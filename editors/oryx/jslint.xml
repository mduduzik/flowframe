<?xml version="1.0" encoding="UTF-8" ?>
<jslint>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Core\Controls\control.js">
    <issue char="20" evidence="if(!ORYX) {var ORYX = {};}" line="26" reason="&apos;ORYX&apos; was used before it was defined." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Core\Controls\docker.js">
    <issue char="20" evidence="if(!ORYX) {var ORYX = {};}" line="27" reason="&apos;ORYX&apos; was used before it was defined." />
    <issue char="13" evidence="&#x9;&#x9;this.anchorLeft;" line="55" reason="Expected an assignment or function call and instead saw an expression." />
    <issue char="13" evidence="&#x9;&#x9;this.anchorRight;" line="56" reason="Expected an assignment or function call and instead saw an expression." />
    <issue char="13" evidence="&#x9;&#x9;this.anchorTop;" line="57" reason="Expected an assignment or function call and instead saw an expression." />
    <issue char="13" evidence="&#x9;&#x9;this.anchorBottom;" line="58" reason="Expected an assignment or function call and instead saw an expression." />
    <issue char="27" evidence="&#x9;&#x9;&#x9;&#x9;if(!dswidth)" line="95" reason="Line breaking error &apos;)&apos;." />
    <issue char="20" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;dswidth = 1;" line="96" reason="Expected &apos;{&apos; and instead saw &apos;dswidth&apos;." />
    <issue char="28" evidence="&#x9;&#x9;&#x9;&#x9;if(!dsheight)" line="97" reason="Line breaking error &apos;)&apos;." />
    <issue char="20" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;dsheight = 1;&#x9;" line="98" reason="Expected &apos;{&apos; and instead saw &apos;dsheight&apos;." />
    <issue char="62" evidence="&#x9;&#x9;&#x9;var dockerIndex = this.parent.dockers.indexOf(this)" line="114" reason="Line breaking error &apos;)&apos;." />
    <issue char="63" evidence="&#x9;&#x9;&#x9;var dockerIndex = this.parent.dockers.indexOf(this)" line="114" reason="Missing semicolon." />
    <issue char="17" evidence="&#x9;&#x9;&#x9;&#x9;}" line="142" reason="Missing semicolon." />
    <issue char="49" evidence="&#x9;&#x9;&#x9;&#x9;this.bounds.centerMoveTo(newPoint)" line="168" reason="Line breaking error &apos;)&apos;." />
    <issue char="50" evidence="&#x9;&#x9;&#x9;&#x9;this.bounds.centerMoveTo(newPoint)" line="168" reason="Missing semicolon." />
    <issue char="16" evidence="&#x9;&#x9;&#x9;var upL " line="198" reason="Line breaking error &apos;upL&apos;." />
    <issue char="19" evidence="&#x9;&#x9;&#x9;var upL " line="198" reason="Missing semicolon." />
    <issue char="21" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;}" line="245" reason="Missing semicolon." />
    <issue char="76" evidence="&#x9;&#x9;&#x9;this._dockedShape.bounds.unregisterCallback(this._updateCallback)" line="257" reason="Line breaking error &apos;)&apos;." />
    <issue char="77" evidence="&#x9;&#x9;&#x9;this._dockedShape.bounds.unregisterCallback(this._updateCallback)" line="257" reason="Missing semicolon." />
    <issue char="13" evidence="&#x9;&#x9;&#x9;}&#x9;" line="313" reason="Missing semicolon." />
    <issue char="53" evidence="&#x9;toString: function() { return &quot;Docker &quot; + this.id }" line="376" reason="Missing semicolon." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Core\Controls\magnet.js">
    <issue char="20" evidence="if(!ORYX) {var ORYX = {};}" line="26" reason="&apos;ORYX&apos; was used before it was defined." />
    <issue char="13" evidence="&#x9;&#x9;this.anchorLeft;" line="46" reason="Expected an assignment or function call and instead saw an expression." />
    <issue char="13" evidence="&#x9;&#x9;this.anchorRight;" line="47" reason="Expected an assignment or function call and instead saw an expression." />
    <issue char="13" evidence="&#x9;&#x9;this.anchorTop;" line="48" reason="Expected an assignment or function call and instead saw an expression." />
    <issue char="13" evidence="&#x9;&#x9;this.anchorBottom;" line="49" reason="Expected an assignment or function call and instead saw an expression." />
    <issue char="104" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;[&apos;circle&apos;, {cx:&quot;8&quot;, cy:&quot;8&quot;, r:&quot;4&quot;, stroke:&quot;none&quot;, fill:&quot;red&quot;, &quot;fill-opacity&quot;:&quot;0.3&quot;}]," line="57" reason="Extra comma." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Core\Math\math.js">
    <issue char="20" evidence="if(!ORYX) {var ORYX = {};}" line="26" reason="&apos;ORYX&apos; was used before it was defined." />
    <issue char="13" evidence="&#x9;&#x9;&#x9;}" line="40" reason="Missing semicolon." />
    <issue char="1" evidence="}" line="41" reason="Missing semicolon." />
    <issue char="19" evidence="&#x9;&#x9;return true" line="63" reason="Missing semicolon." />
    <issue char="19" evidence="&#x9;&#x9;return true" line="68" reason="Missing semicolon." />
    <issue char="20" evidence="&#x9;&#x9;return false" line="72" reason="Missing semicolon." />
    <issue char="20" evidence="&#x9;&#x9;return false" line="76" reason="Missing semicolon." />
    <issue char="83" evidence="&#x9;return &#x9;Math.abs(pointY - ((s * pointX) + lPoint1Y - s * lPoint1X)) &lt; offset" line="81" reason="Missing semicolon." />
    <issue char="1" evidence="}" line="82" reason="Missing semicolon." />
    <issue char="107" evidence="&#x9;&#x9;throw &quot;ORYX.Core.Math.isPointInEllipse needs a ellipse with these properties: x, y, radiusX, radiusY&quot;" line="91" reason="Missing semicolon." />
    <issue char="1" evidence="}" line="98" reason="Missing semicolon." />
    <issue char="66" evidence="&#x9;&#x9;throw &quot;ORYX.Core.Math.isPointInPolygone needs two arguments&quot;" line="109" reason="Missing semicolon." />
    <issue char="71" evidence="        if (!d &amp;&amp; Math.min(x1,x2) &lt;= pointX &amp;&amp; pointX &lt;= Math.max(x1,x2)" line="133" reason="Line breaking error &apos;)&apos;." />
    <issue char="1" evidence="}" line="139" reason="Missing semicolon." />
    <issue char="53" evidence="&#x9;var denominator = Math.pow(lineP2.x - lineP1.x, 2) " line="206" reason="Line breaking error &apos;)&apos;." />
    <issue char="19" evidence="&#x9;if(denominator == 0) {" line="208" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="56" evidence="&#x9;var u = ((point.x - lineP1.x) * (lineP2.x - lineP1.x)  " line="212" reason="Line breaking error &apos;)&apos;." />
    <issue char="58" evidence="&#x9;&#x9;&#x9;+ (point.y - lineP1.y) * (lineP2.y - lineP1.y))" line="213" reason="Line breaking error &apos;)&apos;." />
    <issue char="30" evidence="&#x9;pointOfIntersection = new Object();" line="222" reason="Use the object literal notation {}." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Core\SVG\editpathhandler.js">
    <issue char="20" evidence="if(!ORYX) {var ORYX = {};}" line="26" reason="&apos;ORYX&apos; was used before it was defined." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Core\SVG\label.js">
    <issue char="20" evidence="if(!ORYX) {var ORYX = {};}" line="26" reason="&apos;ORYX&apos; was used before it was defined." />
    <issue char="50" evidence="&#x9;&#x9;&#x9;throw &quot;Label: No parameter textElement.&quot; " line="62" reason="Missing semicolon." />
    <issue char="72" evidence="&#x9;&#x9;&#x9;throw &quot;Label: Parameter textElement is not an SVGTextElement.&quot;&#x9;" line="64" reason="Missing semicolon." />
    <issue char="13" evidence="&#x9;&#x9;this.id;" line="77" reason="Expected an assignment or function call and instead saw an expression." />
    <issue char="13" evidence="&#x9;&#x9;this.fitToElemId;" line="79" reason="Expected an assignment or function call and instead saw an expression." />
    <issue char="13" evidence="&#x9;&#x9;this.edgePosition;" line="81" reason="Expected an assignment or function call and instead saw an expression." />
    <issue char="13" evidence="&#x9;&#x9;this.x;" line="83" reason="Expected an assignment or function call and instead saw an expression." />
    <issue char="13" evidence="&#x9;&#x9;this.y;" line="84" reason="Expected an assignment or function call and instead saw an expression." />
    <issue char="13" evidence="&#x9;&#x9;this.oldX;" line="85" reason="Expected an assignment or function call and instead saw an expression." />
    <issue char="13" evidence="&#x9;&#x9;this.oldY;" line="86" reason="Expected an assignment or function call and instead saw an expression." />
    <issue char="13" evidence="&#x9;&#x9;this._text;" line="90" reason="Expected an assignment or function call and instead saw an expression." />
    <issue char="13" evidence="&#x9;&#x9;this._verticalAlign;" line="91" reason="Expected an assignment or function call and instead saw an expression." />
    <issue char="13" evidence="&#x9;&#x9;this._horizontalAlign;" line="92" reason="Expected an assignment or function call and instead saw an expression." />
    <issue char="13" evidence="&#x9;&#x9;this._rotate;" line="93" reason="Expected an assignment or function call and instead saw an expression." />
    <issue char="13" evidence="&#x9;&#x9;this._rotationPoint;" line="94" reason="Expected an assignment or function call and instead saw an expression." />
    <issue char="13" evidence="&#x9;&#x9;this.anchorLeft;" line="97" reason="Expected an assignment or function call and instead saw an expression." />
    <issue char="13" evidence="&#x9;&#x9;this.anchorRight;" line="98" reason="Expected an assignment or function call and instead saw an expression." />
    <issue char="13" evidence="&#x9;&#x9;this.anchorTop;" line="99" reason="Expected an assignment or function call and instead saw an expression." />
    <issue char="13" evidence="&#x9;&#x9;this.anchorBottom;" line="100" reason="Expected an assignment or function call and instead saw an expression." />
    <issue char="27" evidence="&#x9;&#x9;if(this.fitToElemId)" line="114" reason="Line breaking error &apos;)&apos;." />
    <issue char="12" evidence="&#x9;&#x9;&#x9;this.fitToElemId = this.shapeId + this.fitToElemId;" line="115" reason="Expected &apos;{&apos; and instead saw &apos;this&apos;." />
    <issue char="29" evidence="&#x9;&#x9;&#x9;alignValues.each((function(alignValue) {" line="124" reason="Parens are not needed here." />
    <issue char="29" evidence="&#x9;&#x9;&#x9;this.offsetTop = parseInt(this.offsetTop);" line="150" reason="Missing radix parameter." />
    <issue char="32" evidence="&#x9;&#x9;&#x9;this.offsetBottom = parseInt(this.offsetBottom);" line="156" reason="Missing radix parameter." />
    <issue char="43" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;if (this._rotationPoint) " line="256" reason="Line breaking error &apos;)&apos;." />
    <issue char="24" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;this.node.setAttributeNS(null, &apos;transform&apos;, &apos;rotate(&apos; + this._rotate + &apos; &apos; + this._rotationPoint.x + &apos; &apos; + this._rotationPoint.y + &apos;)&apos;);" line="257" reason="Expected &apos;{&apos; and instead saw &apos;this&apos;." />
    <issue char="24" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;this.node.setAttributeNS(null, &apos;transform&apos;, &apos;rotate(&apos; + this._rotate + &apos; &apos; + this.x + &apos; &apos; + this.y + &apos;)&apos;);" line="259" reason="Expected &apos;{&apos; and instead saw &apos;this&apos;." />
    <issue char="40" evidence="&#x9;&#x9;&#x9;&#x9;while (textLines.last() == &quot;&quot;) " line="263" reason="Use &apos;===&apos; to compare with &apos;&apos;." />
    <issue char="45" evidence="&#x9;&#x9;&#x9;&#x9;while (textLines.last() == &quot;&quot;) " line="263" reason="Line breaking error &apos;)&apos;." />
    <issue char="20" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;textLines.pop();" line="264" reason="Expected &apos;{&apos; and instead saw &apos;textLines&apos;." />
    <issue char="35" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;textLines.each((function(textLine, index){" line="269" reason="Parens are not needed here." />
    <issue char="40" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;if (this.fitToElemId) " line="292" reason="Line breaking error &apos;)&apos;." />
    <issue char="24" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;window.setTimeout(this._checkFittingToReferencedElem.bind(this), 0);" line="293" reason="Expected &apos;{&apos; and instead saw &apos;window&apos;." />
    <issue char="24" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;window.setTimeout(this._positionText.bind(this), 0);" line="295" reason="Expected &apos;{&apos; and instead saw &apos;window&apos;." />
    <issue char="60" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var refBoxLength = (this._rotate != 0 " line="326" reason="Line breaking error &apos;0&apos;." />
    <issue char="57" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var refBoxLength = (this._rotate != 0 " line="326" reason="Use &apos;!==&apos; to compare with &apos;0&apos;." />
    <issue char="57" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&amp;&amp; this._rotate % 180 != 0 " line="327" reason="Line breaking error &apos;0&apos;." />
    <issue char="54" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&amp;&amp; this._rotate % 180 != 0 " line="327" reason="Use &apos;!==&apos; to compare with &apos;0&apos;." />
    <issue char="53" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&amp;&amp; this._rotate % 90 == 0 ? " line="328" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="64" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;lastSeperatorIndex = (i == 0) ? i : i-1;" line="343" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="52" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;while (this.node.hasChildNodes()) " line="380" reason="Line breaking error &apos;)&apos;." />
    <issue char="24" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;this.node.removeChild(this.node.childNodes[0]);" line="381" reason="Expected &apos;{&apos; and instead saw &apos;this&apos;." />
    <issue char="28" evidence="&#x9;&#x9;&#x9;$A(tspans).each((function(tspan, index){" line="407" reason="Parens are not needed here." />
    <issue char="44" evidence="&#x9;&#x9;&#x9;&#x9;this.node.removeChild(tspan)" line="437" reason="Missing semicolon." />
    <issue char="71" evidence="&#x9;&#x9;if (/Firefox[\/\s](\d+\.\d+)/.test(navigator.userAgent) &amp;&amp; new Number(RegExp.$1) &gt;= 3) {" line="459" reason="Do not use the Number function as a constructor." />
    <issue char="28" evidence="&#x9;&#x9;&#x9;&#x9;return this._text" line="528" reason="Line breaking error &apos;_text&apos;." />
    <issue char="33" evidence="&#x9;&#x9;&#x9;&#x9;return this._text" line="528" reason="Missing semicolon." />
    <issue char="16" evidence="&#x9;&#x9;&#x9;&#x9;}" line="598" reason="Expected a &apos;break&apos; statement before &apos;case&apos;." />
    <issue char="40" evidence="&#x9;&#x9;if(!node || !node.getAttributeNS)" line="632" reason="Line breaking error &apos;)&apos;." />
    <issue char="12" evidence="&#x9;&#x9;&#x9;return;" line="633" reason="Expected &apos;{&apos; and instead saw &apos;return&apos;." />
    <issue char="12" evidence="" line="633" reason="Too many errors. (89% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Core\SVG\minmaxpathhandler.js">
    <issue char="20" evidence="if(!ORYX) {var ORYX = {};}" line="26" reason="&apos;ORYX&apos; was used before it was defined." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Core\SVG\pointspathhandler.js">
    <issue char="20" evidence="if(!ORYX) {var ORYX = {};}" line="26" reason="&apos;ORYX&apos; was used before it was defined." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Core\SVG\svgmarker.js">
    <issue char="20" evidence="if(!ORYX) {var ORYX = {};}" line="41" reason="&apos;ORYX&apos; was used before it was defined." />
    <issue char="34" evidence="&#x9;toString: function() { return (this.element) ? &quot;SVGMarker &quot; + this.element.id : &quot;SVGMarker &quot; + this.element;}" line="205" reason="Parens are not needed here." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Core\SVG\svgshape.js">
    <issue char="20" evidence="if(!ORYX) {var ORYX = {};}" line="42" reason="&apos;ORYX&apos; was used before it was defined." />
    <issue char="13" evidence="&#x9;&#x9;this.type;" line="55" reason="Expected an assignment or function call and instead saw an expression." />
    <issue char="13" evidence="&#x9;&#x9;this.editPathParser;" line="79" reason="Expected an assignment or function call and instead saw an expression." />
    <issue char="13" evidence="&#x9;&#x9;this.editPathHandler;" line="80" reason="Expected an assignment or function call and instead saw an expression." />
    <issue char="19" evidence="&#x9;&#x9;&#x9;var cx = undefined;" line="153" reason="&apos;cx&apos; is already defined." />
    <issue char="19" evidence="&#x9;&#x9;&#x9;var cy = undefined;" line="154" reason="&apos;cy&apos; is already defined." />
    <issue char="23" evidence="&#x9;&#x9;&#x9;var cxAttr = this.element.getAttributeNS(null, &quot;cx&quot;);" line="157" reason="&apos;cxAttr&apos; is already defined." />
    <issue char="23" evidence="&#x9;&#x9;&#x9;var cyAttr = this.element.getAttributeNS(null, &quot;cy&quot;);" line="163" reason="&apos;cyAttr&apos; is already defined." />
    <issue char="25" evidence="&#x9;&#x9;&#x9;delete parser;" line="274" reason="Expected &apos;.&apos; and instead saw &apos;;&apos;." />
    <issue char="26" evidence="&#x9;&#x9;&#x9;delete handler;" line="275" reason="Expected &apos;.&apos; and instead saw &apos;;&apos;." />
    <issue char="22" evidence="&#x9;&#x9;&#x9;for(var i = 0; i &lt; anchors.length; i++) {" line="306" reason="&apos;i&apos; is already defined." />
    <issue char="45" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;if(this.x !== this.oldX) this.element.setAttributeNS(null, &quot;x&quot;, this.x);" line="359" reason="Expected &apos;{&apos; and instead saw &apos;this&apos;." />
    <issue char="45" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;if(this.y !== this.oldY) this.element.setAttributeNS(null, &quot;y&quot;, this.y);" line="360" reason="Expected &apos;{&apos; and instead saw &apos;this&apos;." />
    <issue char="54" evidence="&#x9;&#x9;&#x9;&#x9; &#x9;if(this.width !== this.oldWidth) this.element.setAttributeNS(null, &quot;width&quot;, this.width);" line="361" reason="Expected &apos;{&apos; and instead saw &apos;this&apos;." />
    <issue char="55" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;if(this.height !== this.oldHeight) this.element.setAttributeNS(null, &quot;height&quot;, this.height);" line="362" reason="Expected &apos;{&apos; and instead saw &apos;this&apos;." />
    <issue char="43" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;if(this.x !== this.oldX)" line="387" reason="Line breaking error &apos;)&apos;." />
    <issue char="24" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;this.element.setAttributeNS(null, &quot;x1&quot;, this.x);" line="388" reason="Expected &apos;{&apos; and instead saw &apos;this&apos;." />
    <issue char="43" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;if(this.y !== this.oldY)" line="390" reason="Line breaking error &apos;)&apos;." />
    <issue char="24" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;this.element.setAttributeNS(null, &quot;y1&quot;, this.y);" line="391" reason="Expected &apos;{&apos; and instead saw &apos;this&apos;." />
    <issue char="75" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;if(this.x !== this.oldX || this.width !== this.oldWidth)" line="393" reason="Line breaking error &apos;)&apos;." />
    <issue char="24" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;this.element.setAttributeNS(null, &quot;x2&quot;, this.x + this.width);" line="394" reason="Expected &apos;{&apos; and instead saw &apos;this&apos;." />
    <issue char="77" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;if(this.y !== this.oldY || this.height !== this.oldHeight)" line="396" reason="Line breaking error &apos;)&apos;." />
    <issue char="24" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;this.element.setAttributeNS(null, &quot;y2&quot;, this.y + this.height);" line="397" reason="Expected &apos;{&apos; and instead saw &apos;this&apos;." />
    <issue char="35" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;var widthDelta = (this.oldWidth === 0) ? 0 : this.width / this.oldWidth;" line="428" reason="&apos;widthDelta&apos; is already defined." />
    <issue char="36" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;var heightDelta = (this.oldHeight === 0) ? 0 : this.height / this.oldHeight;" line="429" reason="&apos;heightDelta&apos; is already defined." />
    <issue char="16" evidence="&#x9;&#x9;&#x9;&#x9;break;" line="458" reason="Unreachable &apos;break&apos; after &apos;return&apos;." />
    <issue char="16" evidence="&#x9;&#x9;&#x9;&#x9;break;" line="468" reason="Unreachable &apos;break&apos; after &apos;return&apos;." />
    <issue char="16" evidence="&#x9;&#x9;&#x9;&#x9;break;" line="471" reason="Unreachable &apos;break&apos; after &apos;return&apos;." />
    <issue char="16" evidence="&#x9;&#x9;&#x9;&#x9;break;" line="474" reason="Unreachable &apos;break&apos; after &apos;return&apos;." />
    <issue char="16" evidence="&#x9;&#x9;&#x9;&#x9;break;" line="498" reason="Unreachable &apos;break&apos; after &apos;return&apos;." />
    <issue char="68" evidence="&#x9;&#x9;&#x9;&#x9;if (elem.className &amp;&amp; elem.className.baseVal == &quot;me&quot;) " line="522" reason="Line breaking error &apos;)&apos;." />
    <issue char="20" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;return true;" line="523" reason="Expected &apos;{&apos; and instead saw &apos;return&apos;." />
    <issue char="20" evidence="&#x9;&#x9;&#x9;if(!attr)" line="532" reason="Line breaking error &apos;)&apos;." />
    <issue char="16" evidence="&#x9;&#x9;&#x9;&#x9;return this.isVisible(elem.parentNode);" line="533" reason="Expected &apos;{&apos; and instead saw &apos;return&apos;." />
    <issue char="35" evidence="&#x9;&#x9;&#x9;else if (attr == &quot;none&quot;) " line="534" reason="Line breaking error &apos;)&apos;." />
    <issue char="16" evidence="&#x9;&#x9;&#x9;&#x9;return false;" line="535" reason="Expected &apos;{&apos; and instead saw &apos;return&apos;." />
    <issue char="34" evidence="&#x9;toString: function() { return (this.element) ? &quot;SVGShape &quot; + this.element.id : &quot;SVGShape &quot; + this.element;}" line="544" reason="Parens are not needed here." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Core\StencilSet\complexpropertyitem.js">
    <issue char="20" evidence="if(!ORYX) {var ORYX = {};}" line="26" reason="&apos;ORYX&apos; was used before it was defined." />
    <issue char="36" evidence="&#x9;&#x9;&#x9;&#x9;jsonItem.items.each((function(item) {" line="71" reason="Parens are not needed here." />
    <issue char="90" evidence="&#x9;&#x9;&#x9;&#x9;throw &quot;ORYX.Core.StencilSet.Property(construct): No property items defined.&quot;" line="75" reason="Missing semicolon." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Core\StencilSet\property.js">
    <issue char="13" evidence="    var ORYX = {};" line="27" reason="&apos;ORYX&apos; was used before it was defined." />
    <issue char="29" evidence="        if(jsonProp.optional != false)" line="72" reason="Use &apos;!==&apos; to compare with &apos;false&apos;." />
    <issue char="37" evidence="        if(jsonProp.optional != false)" line="72" reason="Line breaking error &apos;)&apos;." />
    <issue char="12" evidence="        &#x9;jsonProp.optional = true;" line="73" reason="Expected &apos;{&apos; and instead saw &apos;jsonProp&apos;." />
    <issue char="67" evidence="&#x9;&#x9;if(!jsonProp.directlyEditable &amp;&amp; jsonProp.directlyEditable != false) {" line="125" reason="Use &apos;!==&apos; to compare with &apos;false&apos;." />
    <issue char="36" evidence="        &#x9;&#x9;jsonProp.restParams[&quot;userId&quot;] = ORYX.CONFIG.USER_ID;" line="141" reason="[&apos;userId&apos;] is better written in dot notation." />
    <issue char="20" evidence="        &#x9;&#x9;new Ajax.Request(jsonProp.restUrl, {" line="143" reason="&apos;new&apos; should not be used as a statement." />
    <issue char="20" evidence="" line="143" reason="Stopping, unable to continue. (35% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Core\StencilSet\propertyitem.js">
    <issue char="20" evidence="if(!ORYX) {var ORYX = {};}" line="26" reason="&apos;ORYX&apos; was used before it was defined." />
    <issue char="15" evidence="&#x9;&#x9;return (this._jsonItem.icon) ? this.property().stencil()._source + &quot;icons/&quot; + this._jsonItem.icon : &quot;&quot;;" line="101" reason="Parens are not needed here." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Core\StencilSet\rules.js">
    <issue char="20" evidence="if(!ORYX) {var ORYX = {};}" line="26" reason="&apos;ORYX&apos; was used before it was defined." />
    <issue char="54" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;if(extension.rules.connectionRules)" line="110" reason="Line breaking error &apos;)&apos;." />
    <issue char="24" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;jsonRules.connectionRules = jsonRules.connectionRules.concat(extension.rules.connectionRules);" line="111" reason="Expected &apos;{&apos; and instead saw &apos;jsonRules&apos;." />
    <issue char="55" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;if(extension.rules.cardinalityRules)" line="112" reason="Line breaking error &apos;)&apos;." />
    <issue char="24" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;jsonRules.cardinalityRules = jsonRules.cardinalityRules.concat(extension.rules.cardinalityRules);" line="113" reason="Expected &apos;{&apos; and instead saw &apos;jsonRules&apos;." />
    <issue char="55" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;if(extension.rules.containmentRules)" line="114" reason="Line breaking error &apos;)&apos;." />
    <issue char="24" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;jsonRules.containmentRules = jsonRules.containmentRules.concat(extension.rules.containmentRules);" line="115" reason="Expected &apos;{&apos; and instead saw &apos;jsonRules&apos;." />
    <issue char="52" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;if(extension.rules.morphingRules)" line="116" reason="Line breaking error &apos;)&apos;." />
    <issue char="24" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;jsonRules.morphingRules = jsonRules.morphingRules.concat(extension.rules.morphingRules);" line="117" reason="Expected &apos;{&apos; and instead saw &apos;jsonRules&apos;." />
    <issue char="37" evidence="&#x9;&#x9;&#x9;&#x9;if(extension.stencils) " line="119" reason="Line breaking error &apos;)&apos;." />
    <issue char="20" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;stencils = stencils.concat(extension.stencils);" line="120" reason="Expected &apos;{&apos; and instead saw &apos;stencils&apos;." />
    <issue char="55" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (!cr[namespace + rules.role]) " line="135" reason="Line breaking error &apos;)&apos;." />
    <issue char="28" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cr[namespace + rules.role] = new Hash();" line="136" reason="Expected &apos;{&apos; and instead saw &apos;cr&apos;." />
    <issue char="44" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;connect.to.each((function(to){" line="145" reason="Parens are not needed here." />
    <issue char="68" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (this._isRoleOfOtherNamespace(rules.role)) " line="156" reason="Line breaking error &apos;)&apos;." />
    <issue char="28" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;role = rules.role;" line="157" reason="Expected &apos;{&apos; and instead saw &apos;role&apos;." />
    <issue char="28" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;role = namespace + rules.role;" line="159" reason="Expected &apos;{&apos; and instead saw &apos;role&apos;." />
    <issue char="70" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (this._isRoleOfOtherNamespace(connect.from)) " line="161" reason="Line breaking error &apos;)&apos;." />
    <issue char="28" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;from = connect.from;" line="162" reason="Expected &apos;{&apos; and instead saw &apos;from&apos;." />
    <issue char="28" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;from = namespace + connect.from;" line="164" reason="Expected &apos;{&apos; and instead saw &apos;from&apos;." />
    <issue char="43" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (!cr[role][from]) " line="166" reason="Line breaking error &apos;)&apos;." />
    <issue char="28" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cr[role][from] = toRoles;" line="167" reason="Expected &apos;{&apos; and instead saw &apos;cr&apos;." />
    <issue char="28" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cr[role][from] = cr[role][from].concat(toRoles);" line="169" reason="Expected &apos;{&apos; and instead saw &apos;cr&apos;." />
    <issue char="40" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;rules.connects.each((function(connect){" line="139" reason="Parens are not needed here." />
    <issue char="47" evidence="&#x9;&#x9;&#x9;&#x9;jsonRules.connectionRules.each((function(rules){" line="128" reason="Parens are not needed here." />
    <issue char="24" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for (i in rules) {" line="189" reason="The body of a for in should be wrapped in an if statement to filter unwanted properties from the prototype." />
    <issue char="49" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;rules.outgoingEdges.each((function(rule){" line="196" reason="Parens are not needed here." />
    <issue char="49" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;rules.incomingEdges.each((function(rule){" line="208" reason="Parens are not needed here." />
    <issue char="48" evidence="&#x9;&#x9;&#x9;&#x9;jsonRules.cardinalityRules.each((function(rules){" line="178" reason="Parens are not needed here." />
    <issue char="40" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;rules.contains.each((function(containRole){" line="235" reason="Parens are not needed here." />
    <issue char="48" evidence="&#x9;&#x9;&#x9;&#x9;jsonRules.containmentRules.each((function(rules){" line="224" reason="Parens are not needed here." />
    <issue char="42" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;rules.baseMorphs.each((function(baseMorphStencilId){" line="263" reason="Parens are not needed here." />
    <issue char="45" evidence="&#x9;&#x9;&#x9;&#x9;jsonRules.morphingRules.each((function(rules){" line="249" reason="Parens are not needed here." />
    <issue char="35" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;t&quot;: o[&quot;t&quot;]||1," line="276" reason="[&apos;t&apos;] is better written in dot notation." />
    <issue char="35" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;r&quot;: o[&quot;r&quot;]||1," line="277" reason="[&apos;r&apos;] is better written in dot notation." />
    <issue char="35" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;b&quot;: o[&quot;b&quot;]||1," line="278" reason="[&apos;b&apos;] is better written in dot notation." />
    <issue char="35" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;l&quot;: o[&quot;l&quot;]||1" line="279" reason="[&apos;l&apos;] is better written in dot notation." />
    <issue char="25" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}" line="280" reason="Missing semicolon." />
    <issue char="17" evidence="&#x9;&#x9;&#x9;&#x9;}" line="281" reason="Missing semicolon." />
    <issue char="30" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;if (rules[&quot;ins&quot;]){" line="297" reason="[&apos;ins&apos;] is better written in dot notation." />
    <issue char="47" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;layoutRules[layoutKey][&quot;ins&quot;] = (rules[&quot;ins&quot;]||[]).map(function(e){ return getDirections(e) })" line="298" reason="[&apos;ins&apos;] is better written in dot notation." />
    <issue char="63" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;layoutRules[layoutKey][&quot;ins&quot;] = (rules[&quot;ins&quot;]||[]).map(function(e){ return getDirections(e) })" line="298" reason="[&apos;ins&apos;] is better written in dot notation." />
    <issue char="115" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;layoutRules[layoutKey][&quot;ins&quot;] = (rules[&quot;ins&quot;]||[]).map(function(e){ return getDirections(e) })" line="298" reason="Missing semicolon." />
    <issue char="118" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;layoutRules[layoutKey][&quot;ins&quot;] = (rules[&quot;ins&quot;]||[]).map(function(e){ return getDirections(e) })" line="298" reason="Missing semicolon." />
    <issue char="30" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;if (rules[&quot;out&quot;]) {" line="300" reason="[&apos;out&apos;] is better written in dot notation." />
    <issue char="47" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;layoutRules[layoutKey][&quot;out&quot;] = getDirections(rules[&quot;out&quot;]);" line="301" reason="[&apos;out&apos;] is better written in dot notation." />
    <issue char="76" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;layoutRules[layoutKey][&quot;out&quot;] = getDirections(rules[&quot;out&quot;]);" line="301" reason="[&apos;out&apos;] is better written in dot notation." />
    <issue char="30" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;if (rules[&quot;outs&quot;]){" line="303" reason="[&apos;outs&apos;] is better written in dot notation." />
    <issue char="47" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;layoutRules[layoutKey][&quot;outs&quot;] = (rules[&quot;outs&quot;]||[]).map(function(e){ return getDirections(e) })" line="304" reason="[&apos;outs&apos;] is better written in dot notation." />
    <issue char="64" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;layoutRules[layoutKey][&quot;outs&quot;] = (rules[&quot;outs&quot;]||[]).map(function(e){ return getDirections(e) })" line="304" reason="[&apos;outs&apos;] is better written in dot notation." />
    <issue char="64" evidence="" line="304" reason="Too many errors. (22% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Core\StencilSet\stencil.js">
    <issue char="20" evidence="if(!ORYX) {var ORYX = {};}" line="26" reason="&apos;ORYX&apos; was used before it was defined." />
    <issue char="25" evidence="&#x9;&#x9;if(!jsonStencil) throw &quot;Stencilset seems corrupt.&quot;;" line="46" reason="Expected &apos;{&apos; and instead saw &apos;throw&apos;." />
    <issue char="23" evidence="&#x9;&#x9;if(!namespace) throw &quot;Stencil does not provide namespace.&quot;;" line="47" reason="Expected &apos;{&apos; and instead saw &apos;throw&apos;." />
    <issue char="20" evidence="&#x9;&#x9;if(!source) throw &quot;Stencil does not provide SVG source.&quot;;" line="48" reason="Expected &apos;{&apos; and instead saw &apos;throw&apos;." />
    <issue char="24" evidence="&#x9;&#x9;if(!stencilSet) throw &quot;Fatal internal error loading stencilset.&quot;;" line="49" reason="Expected &apos;{&apos; and instead saw &apos;throw&apos;." />
    <issue char="57" evidence="&#x9;&#x9;if(defaultPosition &amp;&amp; !this._jsonStencil.position) " line="58" reason="Line breaking error &apos;)&apos;." />
    <issue char="12" evidence="&#x9;&#x9;&#x9;this._jsonStencil.position = defaultPosition;" line="59" reason="Expected &apos;{&apos; and instead saw &apos;this&apos;." />
    <issue char="13" evidence="&#x9;&#x9;this._view;" line="61" reason="Expected an assignment or function call and instead saw an expression." />
    <issue char="82" evidence="&#x9;&#x9;if(!this._jsonStencil.description) { this._jsonStencil.description = &quot;&quot;; };" line="92" reason="Unnecessary semicolon." />
    <issue char="37" evidence="&#x9;&#x9;this._jsonStencil.roles.each((function(role, index) {" line="100" reason="Parens are not needed here." />
    <issue char="41" evidence="&#x9;&#x9;&#x9;this._jsonStencil.layout = []" line="126" reason="Missing semicolon." />
    <issue char="36" evidence="&#x9;&#x9;&#x9;&#x9;$A(imageElems).each((function(imageElem) {" line="159" reason="Parens are not needed here." />
    <issue char="106" evidence="&#x9;&#x9;&#x9;&#x9;throw &quot;ORYX.Core.StencilSet.Stencil(_loadSVGOnSuccess): The response is not a SVG document.&quot;" line="166" reason="Missing semicolon." />
    <issue char="16" evidence="&#x9;&#x9;&#x9;new Ajax.Request(" line="169" reason="&apos;new&apos; should not be used as a statement." />
    <issue char="16" evidence="" line="169" reason="Stopping, unable to continue. (38% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Core\StencilSet\stencilset.js">
    <issue char="13" evidence="    var ORYX = {};" line="27" reason="&apos;ORYX&apos; was used before it was defined." />
    <issue char="16" evidence="&#x9;&#x9;&#x9;new Ajax.Request(source, {" line="71" reason="&apos;new&apos; should not be used as a statement." />
    <issue char="16" evidence="" line="71" reason="Stopping, unable to continue. (15% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Core\StencilSet\stencilsets.js">
    <issue char="20" evidence="if(!ORYX) {var ORYX = {};}" line="26" reason="&apos;ORYX&apos; was used before it was defined." />
    <issue char="73" evidence="&#x9;&#x9;&#x9;var stencilSet = ORYX.Core.StencilSet.stencilSet(stencilSetNS)" line="61" reason="Line breaking error &apos;)&apos;." />
    <issue char="74" evidence="&#x9;&#x9;&#x9;var stencilSet = ORYX.Core.StencilSet.stencilSet(stencilSetNS)" line="61" reason="Missing semicolon." />
    <issue char="97" evidence="&#x9;&#x9;ORYX.Core.StencilSet._rulesByEditorInstance[editorId] = new ORYX.Core.StencilSet.Rules();;" line="121" reason="Unnecessary semicolon." />
    <issue char="13" evidence="&#x9;if(result)" line="177" reason="Line breaking error &apos;)&apos;." />
    <issue char="8" evidence="&#x9;&#x9;return result;" line="178" reason="Expected &apos;{&apos; and instead saw &apos;return&apos;." />
    <issue char="13" evidence="&#x9;if(result)" line="182" reason="Line breaking error &apos;)&apos;." />
    <issue char="8" evidence="&#x9;&#x9;return result;" line="183" reason="Expected &apos;{&apos; and instead saw &apos;return&apos;." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Core\abstractLayouter.js">
    <issue char="20" evidence="if(!ORYX){ var ORYX = {} }" line="6" reason="&apos;ORYX&apos; was used before it was defined." />
    <issue char="24" evidence="if(!ORYX){ var ORYX = {} }" line="6" reason="Missing semicolon." />
    <issue char="36" evidence="if(!ORYX.Plugins){ ORYX.Plugins = {} }" line="7" reason="Missing semicolon." />
    <issue char="10" evidence="&#x9;&#x9;})" line="63" reason="Missing semicolon." />
    <issue char="49" evidence="&#x9;&#x9;&#x9;return this.isIncludedInLayout(shape) " line="79" reason="Missing semicolon." />
    <issue char="20" evidence="&#x9;&#x9;}.bind(this))" line="80" reason="Line breaking error &apos;)&apos;." />
    <issue char="21" evidence="&#x9;&#x9;}.bind(this))" line="80" reason="Missing semicolon." />
    <issue char="73" evidence="&#x9;&#x9;throw new Error(&quot;Layouter has to implement the layout function.&quot;)" line="95" reason="Missing semicolon." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Core\abstractPlugin.js">
    <issue char="20" evidence="if(!ORYX){ var ORYX = {} }" line="6" reason="&apos;ORYX&apos; was used before it was defined." />
    <issue char="24" evidence="if(!ORYX){ var ORYX = {} }" line="6" reason="Missing semicolon." />
    <issue char="36" evidence="if(!ORYX.Plugins){ ORYX.Plugins = {} }" line="7" reason="Missing semicolon." />
    <issue char="29" evidence="&#x9;&#x9;&#x9;shapes = [shapes]" line="76" reason="Missing semicolon." />
    <issue char="19" evidence="&#x9;&#x9;&#x9;return &quot;&quot;" line="125" reason="Missing semicolon." />
    <issue char="12" evidence="&#x9;&#x9;new Ajax.Request(source, {" line="131" reason="&apos;new&apos; should not be used as a statement." />
    <issue char="12" evidence="" line="131" reason="Stopping, unable to continue. (27% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Core\abstractshape.js">
    <issue char="20" evidence="if(!ORYX) {var ORYX = {};}" line="26" reason="&apos;ORYX&apos; was used before it was defined." />
    <issue char="41" evidence="&#x9;&#x9;&#x9;stencilId = this._stencil.id()" line="51" reason="Line breaking error &apos;)&apos;." />
    <issue char="42" evidence="&#x9;&#x9;&#x9;stencilId = this._stencil.id()" line="51" reason="Missing semicolon." />
    <issue char="40" evidence="&#x9;&#x9;this._stencil.properties().each((function(property) {" line="67" reason="Parens are not needed here." />
    <issue char="38" evidence="&#x9;&#x9;&#x9;stencil.properties().each((function(property) {" line="75" reason="Parens are not needed here." />
    <issue char="57" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;return shape.resourceId == resourceId" line="120" reason="Missing semicolon." />
    <issue char="73" evidence="&#x9;&#x9;&#x9;&#x9;throw &quot;getAbstractShapesAtPosition needs 1 or 2 arguments!&quot;" line="223" reason="Missing semicolon." />
    <issue char="47" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;if(!node.isVisible){ return }" line="241" reason="Missing semicolon." />
    <issue char="44" evidence="&#x9;&#x9;this.getStencil().properties().each((function(property){" line="339" reason="Parens are not needed here." />
    <issue char="185" evidence="&#x9;&#x9;serialize = serialize.sort(function(a,b){ return Number(this.properties.keys().member(a.prefix+&quot;-&quot;+a.name)) &gt; Number(this.properties.keys().member(b.prefix+&quot;-&quot;+b.name)) ? -1 : 0 }.bind(this));" line="358" reason="Missing semicolon." />
    <issue char="45" evidence="            if(Ext.type(value) === &quot;object&quot;) value = Ext.encode(value);" line="367" reason="Expected &apos;{&apos; and instead saw &apos;value&apos;." />
    <issue char="51" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(!this.parent) {break};" line="372" reason="&apos;}&apos; is not a statement label." />
    <issue char="28" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var parent = this.getCanvas().getChildShapeByResourceId(value);" line="375" reason="Unreachable &apos;var&apos; after &apos;break&apos;." />
    <issue char="16" evidence="&#x9;&#x9;&#x9;&#x9;default:" line="381" reason="Expected &apos;}&apos; to match &apos;{&apos; from line 373 and instead saw &apos;default&apos;." />
    <issue char="16" evidence="&#x9;&#x9;&#x9;&#x9;default:" line="381" reason="Missing &apos;:&apos; on a case clause." />
    <issue char="16" evidence="" line="381" reason="Stopping, unable to continue. (73% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Core\bounds.js">
    <issue char="20" evidence="if(!ORYX) {var ORYX = {};}" line="26" reason="&apos;ORYX&apos; was used before it was defined." />
    <issue char="12" evidence="&#x9;&#x9;&#x9;this.changedWhileSuspend = true;" line="57" reason="Expected &apos;{&apos; and instead saw &apos;this&apos;." />
    <issue char="23" evidence="&#x9;&#x9;&#x9;&#x9;var ax = Math.min(arguments[0], arguments[2]);" line="132" reason="&apos;ax&apos; is already defined." />
    <issue char="23" evidence="&#x9;&#x9;&#x9;&#x9;var ay = Math.min(arguments[1], arguments[3]);" line="133" reason="&apos;ay&apos; is already defined." />
    <issue char="23" evidence="&#x9;&#x9;&#x9;&#x9;var bx = Math.max(arguments[0], arguments[2]);" line="134" reason="&apos;bx&apos; is already defined." />
    <issue char="23" evidence="&#x9;&#x9;&#x9;&#x9;var by = Math.max(arguments[1], arguments[3]);" line="135" reason="&apos;by&apos; is already defined." />
    <issue char="9" evidence="&#x9;&#x9;};" line="240" reason="Unnecessary semicolon." />
    <issue char="34" evidence="&#x9;&#x9;var pointX, pointY, offset;" line="364" reason="&apos;offset&apos; is already defined." />
    <issue char="28" evidence="&#x9;&#x9;if(pointX &gt;= ul.x - offset " line="397" reason="Line breaking error &apos;offset&apos;." />
    <issue char="59" evidence="&#x9;&#x9;&#x9;&amp;&amp; pointX &lt;= lr.x + offset &amp;&amp; pointY &gt;= ul.y - offset " line="398" reason="Line breaking error &apos;offset&apos;." />
    <issue char="38" evidence="&#x9;&#x9;&#x9;&amp;&amp; pointY &lt;= lr.y + offset)" line="399" reason="Line breaking error &apos;)&apos;." />
    <issue char="12" evidence="&#x9;&#x9;&#x9;return true;" line="400" reason="Expected &apos;{&apos; and instead saw &apos;return&apos;." />
    <issue char="12" evidence="&#x9;&#x9;&#x9;return false;" line="402" reason="Expected &apos;{&apos; and instead saw &apos;return&apos;." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Core\canvas.js">
    <issue char="20" evidence="if(!ORYX) {var ORYX = {};}" line="26" reason="&apos;ORYX&apos; was used before it was defined." />
    <issue char="25" evidence="&#x9;&#x9;&#x9;}.bind(this))" line="160" reason="Missing semicolon." />
    <issue char="17" evidence="&#x9;&#x9;&#x9;if (!(this.children.member(uiObject))) {" line="240" reason="Parens are not needed here." />
    <issue char="44" evidence="&#x9;&#x9;&#x9;&#x9;if(this.eventHandlerCallback)" line="268" reason="Line breaking error &apos;)&apos;." />
    <issue char="20" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;this.eventHandlerCallback({type:ORYX.CONFIG.EVENT_SHAPEADDED,shape:uiObject})" line="269" reason="Expected &apos;{&apos; and instead saw &apos;this&apos;." />
    <issue char="97" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;this.eventHandlerCallback({type:ORYX.CONFIG.EVENT_SHAPEADDED,shape:uiObject})" line="269" reason="Missing semicolon." />
    <issue char="26" evidence="        if(!shapeObjects) return;" line="334" reason="Expected &apos;{&apos; and instead saw &apos;return&apos;." />
    <issue char="16" evidence="                for(field in shape.json.properties){" line="404" reason="The body of a for in should be wrapped in an if statement to filter unwanted properties from the prototype." />
    <issue char="71" evidence="            maxWidth    = Math.max( maxWidth, b.lowerRight().x + offset)" line="496" reason="Line breaking error &apos;)&apos;." />
    <issue char="72" evidence="            maxWidth    = Math.max( maxWidth, b.lowerRight().x + offset)" line="496" reason="Missing semicolon." />
    <issue char="73" evidence="            maxHeight   = Math.max( maxHeight, b.lowerRight().y + offset)" line="497" reason="Missing semicolon." />
    <issue char="125" evidence="            this.setSize({width: Math.max(this.bounds.width(), maxWidth), height: Math.max(this.bounds.height(), maxHeight)})" line="501" reason="Missing semicolon." />
    <issue char="56" evidence="&#x9;&#x9;if(!elements || elements.length &lt; 1) { return [] }" line="524" reason="Missing semicolon." />
    <issue char="50" evidence="&#x9;&#x9;if(elements.length == 1) { return elements}" line="526" reason="Missing semicolon." />
    <issue char="49" evidence="&#x9;&#x9;&#x9;&#x9;if(elements.member(parentShape)) return false;" line="531" reason="Expected &apos;{&apos; and instead saw &apos;return&apos;." />
    <issue char="48" evidence="&#x9;&#x9;&#x9;&#x9;parentShape = parentShape.parent" line="532" reason="Missing semicolon." />
    <issue char="55" evidence="&#x9;&#x9;if(!size || !size.width || !size.height){return}" line="540" reason="Missing semicolon." />
    <issue char="103" evidence="&#x9;&#x9;&#x9;this.bounds.set({a:{x:0,y:0},b:{x:size.width/this.zoomLevel,y:size.height/this.zoomLevel}})&#x9;&#x9;" line="552" reason="Missing semicolon." />
    <issue char="22" evidence="&#x9;&#x9;&#x9;&#x9;if(x1 == undefined) {" line="579" reason="Use &apos;===&apos; to compare with &apos;undefined&apos;." />
    <issue char="14" evidence="&#x9;&#x9;if(x1 == undefined) {" line="596" reason="Use &apos;===&apos; to compare with &apos;undefined&apos;." />
    <issue char="16" evidence="&#x9;&#x9;} catch(e) {}" line="622" reason="&apos;e&apos; is already defined." />
    <issue char="42" evidence="&#x9;&#x9;&#x9;&#x9;if(elem.childNodes.length == 0)" line="630" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="46" evidence="&#x9;&#x9;&#x9;&#x9;if(elem.childNodes.length == 0)" line="630" reason="Line breaking error &apos;)&apos;." />
    <issue char="20" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;elem.textContent = elem.textContent.escapeHTML();" line="631" reason="Expected &apos;{&apos; and instead saw &apos;elem&apos;." />
    <issue char="53" evidence="&#x9;toString: function() { return &quot;Canvas &quot; + this.id }," line="717" reason="Missing semicolon." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Core\command.js">
    <issue char="20" evidence="if(!ORYX) {var ORYX = {};}" line="26" reason="&apos;ORYX&apos; was used before it was defined." />
    <issue char="54" evidence="&#x9;&#x9;throw &quot;Command.execute() has to be implemented!&quot;" line="43" reason="Missing semicolon." />
    <issue char="55" evidence="&#x9;&#x9;throw &quot;Command.rollback() has to be implemented!&quot;" line="47" reason="Missing semicolon." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Core\edge.js">
    <issue char="13" evidence="    var ORYX = {};" line="30" reason="&apos;ORYX&apos; was used before it was defined." />
    <issue char="30" evidence="&#x9;        this.dockers.each((function(docker){" line="121" reason="Parens are not needed here." />
    <issue char="34" evidence="&#x9;            this.dockers.each((function(docker){" line="147" reason="Parens are not needed here." />
    <issue char="34" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var angle = this._getAngle(this.dockers[0], this.dockers[1]);" line="188" reason="&apos;angle&apos; is already defined." />
    <issue char="32" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var pos = this.dockers.first().bounds.center();" line="189" reason="&apos;pos&apos; is already defined." />
    <issue char="42" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(numOfDockers%2 == 0) {" line="208" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="38" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var angle = this._getAngle(this.dockers[numOfDockers/2-1], this.dockers[numOfDockers/2])" line="209" reason="&apos;angle&apos; is already defined." />
    <issue char="115" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var angle = this._getAngle(this.dockers[numOfDockers/2-1], this.dockers[numOfDockers/2])" line="209" reason="Line breaking error &apos;)&apos;." />
    <issue char="116" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var angle = this._getAngle(this.dockers[numOfDockers/2-1], this.dockers[numOfDockers/2])" line="209" reason="Missing semicolon." />
    <issue char="36" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var pos = {x:(pos1.x + pos2.x)/2.0, y:(pos1.y+pos2.y)/2.0};" line="212" reason="&apos;pos&apos; is already defined." />
    <issue char="40" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var index = parseInt(numOfDockers/2);" line="225" reason="Missing radix parameter." />
    <issue char="38" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var angle = this._getAngle(this.dockers[index], this.dockers[index+1])" line="226" reason="&apos;angle&apos; is already defined." />
    <issue char="97" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var angle = this._getAngle(this.dockers[index], this.dockers[index+1])" line="226" reason="Line breaking error &apos;)&apos;." />
    <issue char="98" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var angle = this._getAngle(this.dockers[index], this.dockers[index+1])" line="226" reason="Missing semicolon." />
    <issue char="36" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var pos = this.dockers[index].bounds.center();" line="227" reason="&apos;pos&apos; is already defined." />
    <issue char="41" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var numOfDockers = this.dockers.length;" line="246" reason="&apos;numOfDockers&apos; is already defined." />
    <issue char="42" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(numOfDockers%2 == 0) {" line="247" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="38" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var angle = this._getAngle(this.dockers[numOfDockers/2-1], this.dockers[numOfDockers/2])" line="248" reason="&apos;angle&apos; is already defined." />
    <issue char="115" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var angle = this._getAngle(this.dockers[numOfDockers/2-1], this.dockers[numOfDockers/2])" line="248" reason="Line breaking error &apos;)&apos;." />
    <issue char="116" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var angle = this._getAngle(this.dockers[numOfDockers/2-1], this.dockers[numOfDockers/2])" line="248" reason="Missing semicolon." />
    <issue char="37" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var pos1 = this.dockers[numOfDockers/2-1].bounds.center();" line="249" reason="&apos;pos1&apos; is already defined." />
    <issue char="37" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var pos2 = this.dockers[numOfDockers/2].bounds.center();" line="250" reason="&apos;pos2&apos; is already defined." />
    <issue char="36" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var pos = {x:(pos1.x + pos2.x)/2.0, y:(pos1.y+pos2.y)/2.0};" line="251" reason="&apos;pos&apos; is already defined." />
    <issue char="38" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var index = parseInt(numOfDockers/2);" line="264" reason="&apos;index&apos; is already defined." />
    <issue char="40" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var index = parseInt(numOfDockers/2);" line="264" reason="Missing radix parameter." />
    <issue char="38" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var angle = this._getAngle(this.dockers[index], this.dockers[index+1])" line="265" reason="&apos;angle&apos; is already defined." />
    <issue char="97" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var angle = this._getAngle(this.dockers[index], this.dockers[index+1])" line="265" reason="Line breaking error &apos;)&apos;." />
    <issue char="98" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var angle = this._getAngle(this.dockers[index], this.dockers[index+1])" line="265" reason="Missing semicolon." />
    <issue char="36" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var pos = this.dockers[index].bounds.center();" line="266" reason="&apos;pos&apos; is already defined." />
    <issue char="34" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var angle = this._getAngle(this.dockers[length-2], this.dockers[length-1]);" line="286" reason="&apos;angle&apos; is already defined." />
    <issue char="32" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var pos = this.dockers.last().bounds.center();" line="287" reason="&apos;pos&apos; is already defined." />
    <issue char="35" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var length = this.dockers.length;" line="305" reason="&apos;length&apos; is already defined." />
    <issue char="34" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var angle = this._getAngle(this.dockers[length-2], this.dockers[length-1]);" line="306" reason="&apos;angle&apos; is already defined." />
    <issue char="32" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var pos = this.dockers.last().bounds.center();" line="307" reason="&apos;pos&apos; is already defined." />
    <issue char="38" evidence="&#x9;&#x9;&#x9;var newNodePosition = new Object();" line="368" reason="Use the object literal notation {}." />
    <issue char="43" evidence="&#x9;&#x9;&#x9;newNodePosition.x = startPoint.x " line="371" reason="Line breaking error &apos;x&apos;." />
    <issue char="43" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;+ nodeData.relativDistanceFromDocker1" line="372" reason="Line breaking error &apos;relativDistanceFromDocker1&apos;." />
    <issue char="43" evidence="&#x9;&#x9;&#x9;newNodePosition.y = startPoint.y " line="376" reason="Line breaking error &apos;y&apos;." />
    <issue char="43" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;+ nodeData.relativDistanceFromDocker1" line="377" reason="Line breaking error &apos;relativDistanceFromDocker1&apos;." />
    <issue char="27" evidence="&#x9;&#x9;var position = new Object();" line="401" reason="Use the object literal notation {}." />
    <issue char="62" evidence="&#x9;&#x9;&#x9;this.attachedNodePositionData[node.getId()] = new Object();" line="407" reason="Use the object literal notation {}." />
    <issue char="70" evidence="&#x9;&#x9;&#x9;this.attachedNodePositionData[node.getId()].segment = new Object();" line="411" reason="Use the object literal notation {}." />
    <issue char="37" evidence="&#x9;&#x9;&#x9;if((distance || distance == 0) &amp;&amp; ((!smallestDistance &amp;&amp; smallestDistance != 0) " line="445" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="86" evidence="&#x9;&#x9;&#x9;if((distance || distance == 0) &amp;&amp; ((!smallestDistance &amp;&amp; smallestDistance != 0) " line="445" reason="Use &apos;!==&apos; to compare with &apos;0&apos;." />
    <issue char="90" evidence="&#x9;&#x9;&#x9;if((distance || distance == 0) &amp;&amp; ((!smallestDistance &amp;&amp; smallestDistance != 0) " line="445" reason="Line breaking error &apos;)&apos;." />
    <issue char="66" evidence="&#x9;&#x9;&#x9;if(!distance &amp;&amp; !smallestDistance &amp;&amp; smallestDistance != 0) {" line="463" reason="Use &apos;!==&apos; to compare with &apos;0&apos;." />
    <issue char="79" evidence="&#x9;&#x9;&#x9;&#x9;(ORYX.Core.Math.getDistancePointToPoint(nodeCenterPoint, lineP1)" line="464" reason="Line breaking error &apos;)&apos;." />
    <issue char="86" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&lt; ORYX.Core.Math.getDistancePointToPoint(nodeCenterPoint, lineP2)) ?" line="465" reason="Missing semicolon." />
    <issue char="87" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&lt; ORYX.Core.Math.getDistancePointToPoint(nodeCenterPoint, lineP2)) ?" line="465" reason="Expected an identifier and instead saw &apos;?&apos;." />
    <issue char="87" evidence="" line="465" reason="Stopping, unable to continue. (31% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Core\main.js">
    <issue char="12" evidence="        new ORYX.Editor({" line="49" reason="&apos;new&apos; should not be used as a statement." />
    <issue char="12" evidence="" line="49" reason="Stopping, unable to continue. (2% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Core\node.js">
    <issue char="13" evidence="    var ORYX = {};" line="28" reason="&apos;ORYX&apos; was used before it was defined." />
    <issue char="31" evidence="&#x9;&#x9;&#x9;&#x9;var widthDelta = bounds.width() / oldBounds.width();" line="195" reason="&apos;widthDelta&apos; is already defined." />
    <issue char="32" evidence="&#x9;&#x9;&#x9;&#x9;var heightDelta = bounds.height() / oldBounds.height();" line="196" reason="&apos;heightDelta&apos; is already defined." />
    <issue char="82" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;newX = bounds.width() - (oldBounds.width() - center.x)" line="213" reason="Missing semicolon." />
    <issue char="87" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;label.x = bounds.width() - (oldBounds.width() - label.oldX)" line="248" reason="Missing semicolon." />
    <issue char="64" evidence="&#x9;&#x9;&#x9;&#x9;docker.bounds.centerMoveTo(this.bounds.center())" line="296" reason="Missing semicolon." />
    <issue char="25" evidence="&#x9;&#x9;&#x9;}.bind(this))" line="297" reason="Missing semicolon." />
    <issue char="63" evidence="&#x9;&#x9;} while( !isPointIncluded &amp;&amp; i &lt; this._svgShapes.length)" line="401" reason="Line breaking error &apos;)&apos;." />
    <issue char="64" evidence="&#x9;&#x9;} while( !isPointIncluded &amp;&amp; i &lt; this._svgShapes.length)" line="401" reason="Missing semicolon." />
    <issue char="26" evidence="        this.dockers.each((function(docker){" line="438" reason="Parens are not needed here." />
    <issue char="102" evidence="&#x9;&#x9;var outgoing = data.findAll(function(ser){ return (ser.prefix+&quot;-&quot;+ser.name) == &apos;raziel-outgoing&apos;});" line="507" reason="Missing semicolon." />
    <issue char="36" evidence="&#x9;&#x9;&#x9;if(!this.parent) {return};" line="510" reason="Missing semicolon." />
    <issue char="37" evidence="&#x9;&#x9;&#x9;if(!this.parent) {return};" line="510" reason="Unnecessary semicolon." />
    <issue char="22" evidence="&#x9;&#x9;outgoing.each((function(obj){" line="508" reason="Parens are not needed here." />
    <issue char="19" evidence="            var me = this;" line="697" reason="&apos;me&apos; is already defined." />
    <issue char="27" evidence="        $A(textElems).each((function(textElem){" line="790" reason="Parens are not needed here." />
    <issue char="21" evidence="&#x9;&#x9;return docker&#x9;&#x9;" line="813" reason="Missing semicolon." />
    <issue char="52" evidence="        return this._stencil.title() + &quot; &quot; + this.id" line="817" reason="Missing semicolon." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Core\shape.js">
    <issue char="20" evidence="if(!ORYX) {var ORYX = {};}" line="26" reason="&apos;ORYX&apos; was used before it was defined." />
    <issue char="13" evidence="&#x9;&#x9;this._defaultMagnet;" line="45" reason="Expected an assignment or function call and instead saw an expression." />
    <issue char="61" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (&quot;undefined&quot; == typeof(property.item(prop)) || !property.item(prop)) {" line="115" reason="Parens are not needed here." />
    <issue char="50" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;property.refToView().each((function(ref) {" line="109" reason="Parens are not needed here." />
    <issue char="43" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(itemRef == &quot;&quot;) { this.propertiesChanged[propChanged.key] = true; return; }" line="131" reason="Use &apos;===&apos; to compare with &apos;&apos;." />
    <issue char="50" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;item.refToView().each((function(itemRef) {" line="130" reason="Parens are not needed here." />
    <issue char="46" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;property.items().each((function(item) {" line="129" reason="Parens are not needed here." />
    <issue char="44" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(!svgElem || !(svgElem.ownerSVGElement)) { " line="165" reason="Parens are not needed here." />
    <issue char="94" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;    &#x9;var value = propJson[property.complexAttributeToView()]" line="188" reason="Line breaking error &apos;]&apos;." />
    <issue char="95" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;    &#x9;var value = propJson[property.complexAttributeToView()]" line="188" reason="Missing semicolon." />
    <issue char="67" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (typeof prop == &quot;string&quot;)" line="200" reason="Line breaking error &apos;)&apos;." />
    <issue char="44" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;prop = prop === &quot;true&quot;" line="201" reason="Expected &apos;{&apos; and instead saw &apos;prop&apos;." />
    <issue char="60" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;prop = prop === &quot;true&quot;" line="201" reason="Line breaking error &apos;true&apos;." />
    <issue char="64" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;prop = prop === &quot;true&quot;" line="201" reason="Missing semicolon." />
    <issue char="50" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var label = this._labels[refId];" line="224" reason="&apos;label&apos; is already defined." />
    <issue char="50" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var label = this._labels[refId];" line="230" reason="&apos;label&apos; is already defined." />
    <issue char="54" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var label = this._labels[refId];" line="243" reason="&apos;label&apos; is already defined." />
    <issue char="50" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;property.refToView().each((function(ref) {" line="153" reason="Parens are not needed here." />
    <issue char="40" evidence="&#x9;&#x9;&#x9;this.propertiesChanged.each((function(propChanged) {" line="100" reason="Parens are not needed here." />
    <issue char="52" evidence="&#x9;&#x9;var layoutEvents = this.getStencil().layout()" line="278" reason="Line breaking error &apos;)&apos;." />
    <issue char="53" evidence="&#x9;&#x9;var layoutEvents = this.getStencil().layout()" line="278" reason="Missing semicolon." />
    <issue char="25" evidence="&#x9;&#x9;&#x9;}.bind(this))" line="288" reason="Missing semicolon." />
    <issue char="35" evidence="            if(isNode &amp;&amp; iterator) iterator(incoming);" line="335" reason="Expected &apos;{&apos; and instead saw &apos;iterator&apos;." />
    <issue char="35" evidence="            if(isNode &amp;&amp; iterator) iterator(out);" line="351" reason="Expected &apos;{&apos; and instead saw &apos;iterator&apos;." />
    <issue char="21" evidence="&#x9;&#x9;return result" line="361" reason="Missing semicolon." />
    <issue char="46" evidence="&#x9;&#x9;&#x9;&#x9;if(!uiObject.isVisible){return}" line="385" reason="Missing semicolon." />
    <issue char="41" evidence="&#x9;&#x9;if(uiObject instanceof ORYX.Core.UIObject " line="408" reason="Line breaking error &apos;UIObject&apos;." />
    <issue char="17" evidence="&#x9;&#x9;&#x9;if (!(this.children.member(uiObject))) {" line="411" reason="Parens are not needed here." />
    <issue char="25" evidence="&#x9;&#x9;&#x9;&#x9;if(index != undefined)" line="418" reason="Use &apos;!==&apos; to compare with &apos;undefined&apos;." />
    <issue char="37" evidence="&#x9;&#x9;&#x9;&#x9;if(index != undefined)" line="418" reason="Line breaking error &apos;)&apos;." />
    <issue char="20" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;this.children.splice(index, 0, uiObject);" line="419" reason="Expected &apos;{&apos; and instead saw &apos;this&apos;." />
    <issue char="20" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;this.children.push(uiObject);" line="421" reason="Expected &apos;{&apos; and instead saw &apos;this&apos;." />
    <issue char="25" evidence="&#x9;&#x9;&#x9;&#x9;if(index != undefined &amp;&amp; index &lt; parent.childNodes.length)" line="450" reason="Use &apos;!==&apos; to compare with &apos;undefined&apos;." />
    <issue char="73" evidence="&#x9;&#x9;&#x9;&#x9;if(index != undefined &amp;&amp; index &lt; parent.childNodes.length)" line="450" reason="Line breaking error &apos;)&apos;." />
    <issue char="20" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;uiObject.node = parent.insertBefore(uiObject.node, parent.childNodes[index]);" line="451" reason="Expected &apos;{&apos; and instead saw &apos;uiObject&apos;." />
    <issue char="20" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;uiObject.node = parent.appendChild(uiObject.node);" line="453" reason="Expected &apos;{&apos; and instead saw &apos;uiObject&apos;." />
    <issue char="44" evidence="&#x9;&#x9;&#x9;&#x9;if(this.eventHandlerCallback)" line="459" reason="Line breaking error &apos;)&apos;." />
    <issue char="20" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;this.eventHandlerCallback({type:ORYX.CONFIG.EVENT_SHAPEADDED,shape:uiObject})" line="460" reason="Expected &apos;{&apos; and instead saw &apos;this&apos;." />
    <issue char="97" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;this.eventHandlerCallback({type:ORYX.CONFIG.EVENT_SHAPEADDED,shape:uiObject})" line="460" reason="Missing semicolon." />
    <issue char="26" evidence="&#x9;&#x9;&#x9;var midPointX = Math.min(includePointX, excludePointX) + ((Math.max(includePointX, excludePointX) - Math.min(includePointX, excludePointX)) / 2.0);" line="583" reason="&apos;midPointX&apos; is already defined." />
    <issue char="26" evidence="&#x9;&#x9;&#x9;var midPointY = Math.min(includePointY, excludePointY) + ((Math.max(includePointY, excludePointY) - Math.min(includePointY, excludePointY)) / 2.0);" line="584" reason="&apos;midPointY&apos; is already defined." />
    <issue char="122" evidence="&#x9;&#x9;&#x9;var length = Math.sqrt(Math.pow(includePointX - excludePointX, 2) + Math.pow(includePointY - excludePointY, 2))" line="597" reason="Line breaking error &apos;)&apos;." />
    <issue char="123" evidence="&#x9;&#x9;&#x9;var length = Math.sqrt(Math.pow(includePointX - excludePointX, 2) + Math.pow(includePointY - excludePointY, 2))" line="597" reason="Missing semicolon." />
    <issue char="82" evidence="&#x9;&#x9;&#x9;refPointX = includePointX + ((excludePointX - includePointX) / length)," line="599" reason="Missing semicolon." />
    <issue char="82" evidence="&#x9;&#x9;&#x9;refPointX = includePointX + ((excludePointX - includePointX) / length)," line="599" reason="Expected an identifier and instead saw &apos;,&apos;." />
    <issue char="82" evidence="" line="599" reason="Stopping, unable to continue. (80% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Core\svgDrag.js">
    <issue char="20" evidence="if(!ORYX) {var ORYX = {};}" line="26" reason="&apos;ORYX&apos; was used before it was defined." />
    <issue char="57" evidence="&#x9;&#x9;y: Event.pointerY(event) - this.offSetPosition.y}" line="61" reason="Missing semicolon." />
    <issue char="25" evidence="&#x9;if(this.movedCallback)" line="72" reason="Line breaking error &apos;)&apos;." />
    <issue char="8" evidence="&#x9;&#x9;this.movedCallback(event);" line="73" reason="Expected &apos;{&apos; and instead saw &apos;this&apos;." />
    <issue char="22" evidence="&#x9;if(this.upCallback)" line="83" reason="Line breaking error &apos;)&apos;." />
    <issue char="8" evidence="&#x9;&#x9;this.upCallback(event);" line="84" reason="Expected &apos;{&apos; and instead saw &apos;this&apos;." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Core\uiobject.js">
    <issue char="20" evidence="if(!ORYX) {var ORYX = {};}" line="26" reason="&apos;ORYX&apos; was used before it was defined." />
    <issue char="32" evidence="&#x9;&#x9;if(this.bounds == bounds)" line="68" reason="Line breaking error &apos;)&apos;." />
    <issue char="12" evidence="&#x9;&#x9;&#x9;this.isResized = isResized || this.isResized;" line="69" reason="Expected &apos;{&apos; and instead saw &apos;this&apos;." />
    <issue char="13" evidence="&#x9;&#x9;if (!(this.children.member(uiObject))) {" line="167" reason="Parens are not needed here." />
    <issue char="40" evidence="&#x9;&#x9;&#x9;if(this.eventHandlerCallback)" line="186" reason="Line breaking error &apos;)&apos;." />
    <issue char="16" evidence="&#x9;&#x9;&#x9;&#x9;this.eventHandlerCallback({type:ORYX.CONFIG.EVENT_SHAPEADDED,shape:uiObject})" line="187" reason="Expected &apos;{&apos; and instead saw &apos;this&apos;." />
    <issue char="93" evidence="&#x9;&#x9;&#x9;&#x9;this.eventHandlerCallback({type:ORYX.CONFIG.EVENT_SHAPEADDED,shape:uiObject})" line="187" reason="Missing semicolon." />
    <issue char="55" evidence="&#x9;toString: function() { return &quot;UIObject &quot; + this.id }" line="299" reason="Missing semicolon." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\AfterAbsencePattern.js">
    <issue char="17" evidence="if (!ORYX.Plugins) " line="26" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="    ORYX.Plugins = new Object();" line="27" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="    ORYX.Plugins = new Object();" line="27" reason="Use the object literal notation {}." />
    <issue char="9" evidence="&#x9;&#x9;}" line="70" reason="Missing semicolon." />
    <issue char="12" evidence="        pos[&apos;x&apos;]=posX;" line="87" reason="[&apos;x&apos;] is better written in dot notation." />
    <issue char="12" evidence="        pos[&apos;y&apos;]=0;" line="88" reason="[&apos;y&apos;] is better written in dot notation." />
    <issue char="12" evidence="        pos[&apos;x&apos;]=posX;" line="108" reason="[&apos;x&apos;] is better written in dot notation." />
    <issue char="12" evidence="        pos[&apos;y&apos;]=0;" line="109" reason="[&apos;y&apos;] is better written in dot notation." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\AfterPresencePattern.js">
    <issue char="17" evidence="if (!ORYX.Plugins) " line="26" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="    ORYX.Plugins = new Object();" line="27" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="    ORYX.Plugins = new Object();" line="27" reason="Use the object literal notation {}." />
    <issue char="9" evidence="&#x9;&#x9;}" line="70" reason="Missing semicolon." />
    <issue char="12" evidence="        pos[&apos;x&apos;]=posX;" line="87" reason="[&apos;x&apos;] is better written in dot notation." />
    <issue char="12" evidence="        pos[&apos;y&apos;]=0;" line="88" reason="[&apos;y&apos;] is better written in dot notation." />
    <issue char="12" evidence="        pos[&apos;x&apos;]=posX;" line="108" reason="[&apos;x&apos;] is better written in dot notation." />
    <issue char="12" evidence="        pos[&apos;y&apos;]=0;" line="109" reason="[&apos;y&apos;] is better written in dot notation." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\BeforeAbsencePattern.js">
    <issue char="17" evidence="if (!ORYX.Plugins) " line="26" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="    ORYX.Plugins = new Object();" line="27" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="    ORYX.Plugins = new Object();" line="27" reason="Use the object literal notation {}." />
    <issue char="9" evidence="&#x9;&#x9;}" line="70" reason="Missing semicolon." />
    <issue char="12" evidence="        pos[&apos;x&apos;]=posX;" line="87" reason="[&apos;x&apos;] is better written in dot notation." />
    <issue char="12" evidence="        pos[&apos;y&apos;]=0;" line="88" reason="[&apos;y&apos;] is better written in dot notation." />
    <issue char="12" evidence="        pos[&apos;x&apos;]=posX;" line="108" reason="[&apos;x&apos;] is better written in dot notation." />
    <issue char="12" evidence="        pos[&apos;y&apos;]=0;" line="109" reason="[&apos;y&apos;] is better written in dot notation." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\BeforePresencePattern.js">
    <issue char="17" evidence="if (!ORYX.Plugins) " line="26" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="    ORYX.Plugins = new Object();" line="27" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="    ORYX.Plugins = new Object();" line="27" reason="Use the object literal notation {}." />
    <issue char="9" evidence="&#x9;&#x9;}" line="70" reason="Missing semicolon." />
    <issue char="12" evidence="        pos[&apos;x&apos;]=posX;" line="87" reason="[&apos;x&apos;] is better written in dot notation." />
    <issue char="12" evidence="        pos[&apos;y&apos;]=0;" line="88" reason="[&apos;y&apos;] is better written in dot notation." />
    <issue char="12" evidence="        pos[&apos;x&apos;]=posX;" line="108" reason="[&apos;x&apos;] is better written in dot notation." />
    <issue char="12" evidence="        pos[&apos;y&apos;]=0;" line="109" reason="[&apos;y&apos;] is better written in dot notation." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\BetweenAbsenceTypeIIPattern.js">
    <issue char="17" evidence="if (!ORYX.Plugins) " line="26" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="    ORYX.Plugins = new Object();" line="27" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="    ORYX.Plugins = new Object();" line="27" reason="Use the object literal notation {}." />
    <issue char="9" evidence="&#x9;&#x9;}" line="70" reason="Missing semicolon." />
    <issue char="12" evidence="        pos[&apos;x&apos;]=posX;" line="87" reason="[&apos;x&apos;] is better written in dot notation." />
    <issue char="12" evidence="        pos[&apos;y&apos;]=0;" line="88" reason="[&apos;y&apos;] is better written in dot notation." />
    <issue char="12" evidence="        pos[&apos;x&apos;]=posX;" line="108" reason="[&apos;x&apos;] is better written in dot notation." />
    <issue char="12" evidence="        pos[&apos;y&apos;]=0;" line="109" reason="[&apos;y&apos;] is better written in dot notation." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\BetweenAbsenceTypeIPattern.js">
    <issue char="17" evidence="if (!ORYX.Plugins) " line="26" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="    ORYX.Plugins = new Object();" line="27" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="    ORYX.Plugins = new Object();" line="27" reason="Use the object literal notation {}." />
    <issue char="9" evidence="&#x9;&#x9;}" line="70" reason="Missing semicolon." />
    <issue char="12" evidence="        pos[&apos;x&apos;]=posX;" line="87" reason="[&apos;x&apos;] is better written in dot notation." />
    <issue char="12" evidence="        pos[&apos;y&apos;]=0;" line="88" reason="[&apos;y&apos;] is better written in dot notation." />
    <issue char="12" evidence="        pos[&apos;x&apos;]=posX;" line="108" reason="[&apos;x&apos;] is better written in dot notation." />
    <issue char="12" evidence="        pos[&apos;y&apos;]=0;" line="109" reason="[&apos;y&apos;] is better written in dot notation." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\CreateProcessVariant.js">
    <issue char="17" evidence="if (!ORYX.Plugins) " line="25" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="    ORYX.Plugins = new Object();" line="26" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="    ORYX.Plugins = new Object();" line="26" reason="Use the object literal notation {}." />
    <issue char="36" evidence="            var processGraphXML=new Array();" line="58" reason="Use the array literal notation []." />
    <issue char="38" evidence="            var processGraphShape=new Array();" line="59" reason="Use the array literal notation []." />
    <issue char="12" evidence="        pos[&apos;x&apos;]=posX;" line="112" reason="[&apos;x&apos;] is better written in dot notation." />
    <issue char="12" evidence="        pos[&apos;y&apos;]=0;" line="113" reason="[&apos;y&apos;] is better written in dot notation." />
    <issue char="21" evidence="            var type2=element.getAttributeNode(&quot;type2&quot;).nodeValue;" line="354" reason="&apos;type2&apos; is already defined." />
    <issue char="13" evidence="        from[&apos;type&apos;]=type;" line="406" reason="[&apos;type&apos;] is better written in dot notation." />
    <issue char="13" evidence="        from[&apos;shapeId&apos;]=shapeId;" line="407" reason="[&apos;shapeId&apos;] is better written in dot notation." />
    <issue char="8" evidence="        ;" line="415" reason="Unnecessary semicolon." />
    <issue char="11" evidence="        to[&apos;type&apos;]=type;" line="422" reason="[&apos;type&apos;] is better written in dot notation." />
    <issue char="11" evidence="        to[&apos;shapeId&apos;]=shapeId;" line="423" reason="[&apos;shapeId&apos;] is better written in dot notation." />
    <issue char="19" evidence="            if(ok) break;" line="441" reason="Expected &apos;{&apos; and instead saw &apos;break&apos;." />
    <issue char="8" evidence="        ;" line="462" reason="Unnecessary semicolon." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\GlobalAbsencePattern.js">
    <issue char="17" evidence="if (!ORYX.Plugins) " line="27" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="    ORYX.Plugins = new Object();" line="28" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="    ORYX.Plugins = new Object();" line="28" reason="Use the object literal notation {}." />
    <issue char="9" evidence="&#x9;&#x9;}" line="66" reason="Missing semicolon." />
    <issue char="12" evidence="        pos[&apos;x&apos;]=posX;" line="92" reason="[&apos;x&apos;] is better written in dot notation." />
    <issue char="12" evidence="        pos[&apos;y&apos;]=0;" line="93" reason="[&apos;y&apos;] is better written in dot notation." />
    <issue char="12" evidence="        pos[&apos;x&apos;]=posX;" line="113" reason="[&apos;x&apos;] is better written in dot notation." />
    <issue char="12" evidence="        pos[&apos;y&apos;]=0;" line="114" reason="[&apos;y&apos;] is better written in dot notation." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\GlobalPresencePattern.js">
    <issue char="17" evidence="if (!ORYX.Plugins) " line="27" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="    ORYX.Plugins = new Object();" line="28" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="    ORYX.Plugins = new Object();" line="28" reason="Use the object literal notation {}." />
    <issue char="9" evidence="&#x9;&#x9;}" line="66" reason="Missing semicolon." />
    <issue char="12" evidence="        pos[&apos;x&apos;]=posX;" line="92" reason="[&apos;x&apos;] is better written in dot notation." />
    <issue char="12" evidence="        pos[&apos;y&apos;]=0;" line="93" reason="[&apos;y&apos;] is better written in dot notation." />
    <issue char="12" evidence="        pos[&apos;x&apos;]=posX;" line="113" reason="[&apos;x&apos;] is better written in dot notation." />
    <issue char="12" evidence="        pos[&apos;y&apos;]=0;" line="114" reason="[&apos;y&apos;] is better written in dot notation." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\Layouter\containerLayouter.js">
    <issue char="17" evidence=" if(!ORYX.Plugins)" line="27" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="&#x9;ORYX.Plugins = new Object();" line="28" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="28" reason="Use the object literal notation {}." />
    <issue char="88" evidence="&#x9;&#x9;var ignoreList = (options.ignoreChildsWithId ? options.ignoreChildsWithId : new Array());" line="89" reason="Use the array literal notation []." />
    <issue char="9" evidence="&#x9;&#x9;};" line="102" reason="Unnecessary semicolon." />
    <issue char="92" evidence="&#x9;&#x9;var newYValue = bottomTopSpaceRatio * (shape.bounds.height() - childsBounds.height())" line="110" reason="Line breaking error &apos;)&apos;." />
    <issue char="26" evidence="&#x9;&#x9;&#x9;options = new Object();" line="145" reason="Use the object literal notation {}." />
    <issue char="74" evidence="&#x9;&#x9;&#x9;var xProtrusion = xMovement + ulChilds.x + childsBounds.width()" line="172" reason="Line breaking error &apos;)&apos;." />
    <issue char="75" evidence="&#x9;&#x9;&#x9;var yProtrusion = yMovement + ulChilds.y + childsBounds.height()" line="179" reason="Line breaking error &apos;)&apos;." />
    <issue char="16" evidence="&#x9;&#x9;var ulx = ulShape.x;" line="201" reason="&apos;ulx&apos; is already defined." />
    <issue char="16" evidence="&#x9;&#x9;var uly = ulShape.y;" line="202" reason="&apos;uly&apos; is already defined." />
    <issue char="16" evidence="&#x9;&#x9;var lrx = lrShape.x;" line="203" reason="&apos;lrx&apos; is already defined." />
    <issue char="16" evidence="&#x9;&#x9;var lry = lrShape.y;" line="204" reason="&apos;lry&apos; is already defined." />
    <issue char="57" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;.concat(node.getOutgoingShapes())" line="347" reason="Missing semicolon." />
    <issue char="14" evidence="&#x9;&#x9;&#x9;})" line="363" reason="Missing semicolon." />
    <issue char="17" evidence="&#x9;&#x9;&#x9;if(i == 0) {" line="375" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="1" evidence="}" line="397" reason="Missing semicolon." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\Layouter\edgeLayouter.js">
    <issue char="37" evidence="if(!ORYX.Plugins) { ORYX.Plugins = {} }" line="23" reason="Missing semicolon." />
    <issue char="55" evidence="if(!ORYX.Plugins.Layouter) { ORYX.Plugins.Layouter = {} }" line="24" reason="Missing semicolon." />
    <issue char="4" evidence="new function(){" line="26" reason="&apos;new&apos; should not be used as a statement." />
    <issue char="4" evidence="" line="26" reason="Stopping, unable to continue. (8% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\QueryVariants.js">
    <issue char="17" evidence="if (!ORYX.Plugins) " line="21" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="    ORYX.Plugins = new Object();" line="22" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="    ORYX.Plugins = new Object();" line="22" reason="Use the object literal notation {}." />
    <issue char="9" evidence="&#x9;&#x9;}" line="61" reason="Missing semicolon." />
    <issue char="16" evidence="&#x9;&#x9;&#x9;new Ajax.Request(ORYX.CONFIG.QUERYVARIANTEVAL_URL, {" line="77" reason="&apos;new&apos; should not be used as a statement." />
    <issue char="16" evidence="" line="77" reason="Stopping, unable to continue. (20% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\adHocCC.js">
    <issue char="16" evidence="if(!ORYX.Plugins)" line="23" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Use the object literal notation {}." />
    <issue char="33" evidence="&#x9;&#x9;&#x9;&#x9;var resourceName = child.properties[&apos;oryx-name&apos;];" line="107" reason="&apos;resourceName&apos; is already defined." />
    <issue char="31" evidence="&#x9;&#x9;&#x9;&#x9;var resourceID = child.resourceId;" line="108" reason="&apos;resourceID&apos; is already defined." />
    <issue char="32" evidence="&#x9;&#x9;&#x9;&#x9;if (rootXMLNode != null){" line="120" reason="Use &apos;!==&apos; to compare with &apos;null&apos;." />
    <issue char="75" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var dataFieldTagName = childXMLNodes[j].attributes[&apos;name&apos;].nodeValue;" line="123" reason="[&apos;name&apos;] is better written in dot notation." />
    <issue char="45" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (dataFieldTagName != null) {" line="124" reason="Use &apos;!==&apos; to compare with &apos;null&apos;." />
    <issue char="58" evidence="&#x9;&#x9;&#x9;&#x9;if (task != this.UNSAVED_RESOURCE &amp;&amp; task != &quot;&quot; &amp;&amp; state != &quot;&quot;) {" line="180" reason="Use &apos;!==&apos; to compare with &apos;&apos;." />
    <issue char="73" evidence="&#x9;&#x9;&#x9;&#x9;if (task != this.UNSAVED_RESOURCE &amp;&amp; task != &quot;&quot; &amp;&amp; state != &quot;&quot;) {" line="180" reason="Use &apos;!==&apos; to compare with &apos;&apos;." />
    <issue char="51" evidence="&#x9;&#x9;&#x9;emptyText: ORYX.I18N.AdHocCC.enterEqual," line="203" reason="Extra comma." />
    <issue char="8" evidence="&#x9;&#x9;});" line="204" reason="Expected &apos;}&apos; and instead saw &apos;}&apos;." />
    <issue char="8" evidence="" line="204" reason="Stopping, unable to continue. (56% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\addDocker.js">
    <issue char="16" evidence="if(!ORYX.Plugins)" line="23" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Use the object literal notation {}." />
    <issue char="45" evidence="        if(pressed &amp;&amp; this.deleteDockerButton)" line="66" reason="Line breaking error &apos;)&apos;." />
    <issue char="12" evidence="            this.deleteDockerButton.toggle(false);" line="67" reason="Expected &apos;{&apos; and instead saw &apos;this&apos;." />
    <issue char="42" evidence="        if(pressed &amp;&amp; this.addDockerButton)" line="74" reason="Line breaking error &apos;)&apos;." />
    <issue char="12" evidence="            this.addDockerButton.toggle(false);" line="75" reason="Expected &apos;{&apos; and instead saw &apos;this&apos;." />
    <issue char="24" evidence="        if(!options.edge)" line="111" reason="Line breaking error &apos;)&apos;." />
    <issue char="12" evidence="            return;" line="112" reason="Expected &apos;{&apos; and instead saw &apos;return&apos;." />
    <issue char="9" evidence="        })" line="151" reason="Line breaking error &apos;)&apos;." />
    <issue char="10" evidence="        })" line="151" reason="Missing semicolon." />
    <issue char="26" evidence="        var command = new commandClass(this.enabledAdd(), this.enabledDelete(), options.edge, options.docker, options.position, this.facade);" line="153" reason="A constructor name should start with an uppercase letter." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\addssextension.js">
    <issue char="17" evidence="if (!ORYX.Plugins) " line="23" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="    ORYX.Plugins = new Object();" line="24" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="    ORYX.Plugins = new Object();" line="24" reason="Use the object literal notation {}." />
    <issue char="13" evidence="        if (!(ORYX.CONFIG.IS_TEMPLATE)) {" line="35" reason="Parens are not needed here." />
    <issue char="12" evidence="        new Ajax.Request(url, {" line="57" reason="&apos;new&apos; should not be used as a statement." />
    <issue char="12" evidence="" line="57" reason="Stopping, unable to continue. (23% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\addstencilset.js">
    <issue char="16" evidence="if(!ORYX.Plugins)" line="23" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Use the object literal notation {}." />
    <issue char="109" evidence="&#x9;&#x9;var url = Ext.Msg.prompt(ORYX.I18N.Oryx.title, &quot;Enter relative url of the stencil set&apos;s JSON file:&quot;, (function(btn, url) {" line="50" reason="Parens are not needed here." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\amlSupport.js">
    <issue char="17" evidence="if (!ORYX.Plugins) " line="23" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="    ORYX.Plugins = new Object();" line="24" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="    ORYX.Plugins = new Object();" line="24" reason="Use the object literal notation {}." />
    <issue char="17" evidence="                }" line="91" reason="Missing semicolon." />
    <issue char="24" evidence="            }.bind(this))" line="92" reason="Line breaking error &apos;)&apos;." />
    <issue char="25" evidence="            }.bind(this))" line="92" reason="Missing semicolon." />
    <issue char="40" evidence="                return a.title &gt; b.title" line="96" reason="Missing semicolon." />
    <issue char="13" evidence="            })" line="97" reason="Line breaking error &apos;)&apos;." />
    <issue char="14" evidence="            })" line="97" reason="Missing semicolon." />
    <issue char="40" evidence="                            throw $break" line="139" reason="Missing semicolon." />
    <issue char="24" evidence="                        return" line="146" reason="Line breaking error &apos;return&apos;." />
    <issue char="30" evidence="                        return" line="146" reason="Missing semicolon." />
    <issue char="93" evidence="                        return $A(this.getNodesByClassName(item.data, &quot;span&quot;, &quot;oryx-refuri&quot;))" line="153" reason="Missing semicolon." />
    <issue char="42" evidence="                    }.bind(this)).flatten()" line="154" reason="Line breaking error &apos;)&apos;." />
    <issue char="43" evidence="                    }.bind(this)).flatten()" line="154" reason="Missing semicolon." />
    <issue char="54" evidence="                        if (uriRef.textContent.length == 0) {" line="159" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="28" evidence="                            return" line="160" reason="Line breaking error &apos;return&apos;." />
    <issue char="34" evidence="                            return" line="160" reason="Missing semicolon." />
    <issue char="64" evidence="                            return uriRef.textContent == item.id" line="164" reason="Missing semicolon." />
    <issue char="25" evidence="                        })" line="165" reason="Line breaking error &apos;)&apos;." />
    <issue char="26" evidence="                        })" line="165" reason="Missing semicolon." />
    <issue char="21" evidence="                    })" line="169" reason="Line breaking error &apos;)&apos;." />
    <issue char="22" evidence="                    })" line="169" reason="Missing semicolon." />
    <issue char="40" evidence="                            throw $break" line="195" reason="Missing semicolon." />
    <issue char="24" evidence="                        return" line="202" reason="Line breaking error &apos;return&apos;." />
    <issue char="30" evidence="                        return" line="202" reason="Missing semicolon." />
    <issue char="25" evidence="                        }" line="210" reason="Missing semicolon." />
    <issue char="43" evidence="                        node.textContent = &quot;&quot;" line="220" reason="Missing semicolon." />
    <issue char="25" evidence="            }.bind(this))" line="228" reason="Missing semicolon." />
    <issue char="12" evidence="        new Ajax.Request(url, {" line="250" reason="&apos;new&apos; should not be used as a statement." />
    <issue char="12" evidence="" line="250" reason="Stopping, unable to continue. (41% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\arrangement.js">
    <issue char="45" evidence="&#x9;&#x9;newA &#x9;= newA.concat(old.slice(to))" line="32" reason="Missing semicolon." />
    <issue char="5" evidence="&#x9;};" line="33" reason="Unnecessary semicolon." />
    <issue char="1" evidence="}" line="35" reason="Missing semicolon." />
    <issue char="16" evidence="if(!ORYX.Plugins)" line="37" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="&#x9;ORYX.Plugins = new Object();" line="38" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="38" reason="Use the object literal notation {}." />
    <issue char="141" evidence="&#x9;&#x9;&#x9;&#x9;this.elAndIndex&#x9;= elements.map(function(el){ return {el:el, previous:el.parent.children[el.parent.children.indexOf(el)-1]} })" line="166" reason="Missing semicolon." />
    <issue char="143" evidence="&#x9;&#x9;&#x9;&#x9;this.elAndIndex&#x9;= elements.map(function(el){ return {el:el, previous:el.parent.children[el.parent.children.indexOf(el)-1]} })" line="166" reason="Line breaking error &apos;)&apos;." />
    <issue char="144" evidence="&#x9;&#x9;&#x9;&#x9;this.elAndIndex&#x9;= elements.map(function(el){ return {el:el, previous:el.parent.children[el.parent.children.indexOf(el)-1]} })" line="166" reason="Missing semicolon." />
    <issue char="45" evidence="&#x9;&#x9;&#x9;&#x9;this.callback( this.elements )&#x9;&#x9;&#x9;" line="172" reason="Line breaking error &apos;)&apos;." />
    <issue char="46" evidence="&#x9;&#x9;&#x9;&#x9;this.callback( this.elements )&#x9;&#x9;&#x9;" line="172" reason="Missing semicolon." />
    <issue char="57" evidence="&#x9;&#x9;&#x9;&#x9;this.facade.setSelection( this.elements )" line="173" reason="Missing semicolon." />
    <issue char="50" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;newIndex&#x9;&#x9;= newIndex || 0" line="190" reason="Line breaking error &apos;0&apos;." />
    <issue char="51" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;newIndex&#x9;&#x9;= newIndex || 0" line="190" reason="Missing semicolon." />
    <issue char="77" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;p.children &#x9;= p.children.insertFrom(oldIndex, newIndex)&#x9;&#x9;&#x9;" line="191" reason="Line breaking error &apos;)&apos;." />
    <issue char="78" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;p.children &#x9;= p.children.insertFrom(oldIndex, newIndex)&#x9;&#x9;&#x9;" line="191" reason="Missing semicolon." />
    <issue char="57" evidence="&#x9;&#x9;&#x9;&#x9;this.facade.setSelection( this.elements )" line="196" reason="Missing semicolon." />
    <issue char="26" evidence="&#x9;&#x9;var command = new zLevelCommand(callback, this.facade.getSelection(), this.facade);" line="201" reason="A constructor name should start with an uppercase letter." />
    <issue char="26" evidence="&#x9;&#x9;&#x9;var p = value.parent" line="219" reason="Line breaking error &apos;parent&apos;." />
    <issue char="32" evidence="&#x9;&#x9;&#x9;var p = value.parent" line="219" reason="Missing semicolon." />
    <issue char="51" evidence="&#x9;&#x9;&#x9;p.children = p.children.without( value )" line="221" reason="Line breaking error &apos;)&apos;." />
    <issue char="52" evidence="&#x9;&#x9;&#x9;p.children = p.children.without( value )" line="221" reason="Missing semicolon." />
    <issue char="26" evidence="&#x9;&#x9;&#x9;var p = value.parent" line="238" reason="Line breaking error &apos;parent&apos;." />
    <issue char="32" evidence="&#x9;&#x9;&#x9;var p = value.parent" line="238" reason="Missing semicolon." />
    <issue char="51" evidence="&#x9;&#x9;&#x9;p.children = p.children.without( value )" line="239" reason="Line breaking error &apos;)&apos;." />
    <issue char="52" evidence="&#x9;&#x9;&#x9;p.children = p.children.without( value )" line="239" reason="Missing semicolon." />
    <issue char="146" evidence="&#x9;&#x9;var compactElem = tmpElem.findAll(function(el) {return !tmpElem.some(function(checkedEl){ return checkedEl.node == el.node.previousSibling})});" line="258" reason="Missing semicolon." />
    <issue char="148" evidence="&#x9;&#x9;var compactElem = tmpElem.findAll(function(el) {return !tmpElem.some(function(checkedEl){ return checkedEl.node == el.node.previousSibling})});" line="258" reason="Missing semicolon." />
    <issue char="65" evidence="&#x9;&#x9;&#x9;p.children &#x9;= p.children.insertFrom(index, index-1)&#x9;&#x9;&#x9;" line="265" reason="Line breaking error &apos;)&apos;." />
    <issue char="66" evidence="&#x9;&#x9;&#x9;p.children &#x9;= p.children.insertFrom(index, index-1)&#x9;&#x9;&#x9;" line="265" reason="Missing semicolon." />
    <issue char="142" evidence="&#x9;&#x9;var compactElem = tmpElem.findAll(function(el) {return !tmpElem.some(function(checkedEl){ return checkedEl.node == el.node.nextSibling})});" line="281" reason="Missing semicolon." />
    <issue char="144" evidence="&#x9;&#x9;var compactElem = tmpElem.findAll(function(el) {return !tmpElem.some(function(checkedEl){ return checkedEl.node == el.node.nextSibling})});" line="281" reason="Missing semicolon." />
    <issue char="35" evidence="&#x9;&#x9;&#x9;var nextNode = el.node.nextSibling&#x9;&#x9;" line="286" reason="Line breaking error &apos;nextSibling&apos;." />
    <issue char="46" evidence="&#x9;&#x9;&#x9;var nextNode = el.node.nextSibling&#x9;&#x9;" line="286" reason="Missing semicolon." />
    <issue char="65" evidence="&#x9;&#x9;&#x9;p.children &#x9;= p.children.insertFrom(index, index+1)&#x9;&#x9;&#x9;" line="290" reason="Line breaking error &apos;)&apos;." />
    <issue char="66" evidence="&#x9;&#x9;&#x9;p.children &#x9;= p.children.insertFrom(index, index+1)&#x9;&#x9;&#x9;" line="290" reason="Missing semicolon." />
    <issue char="52" evidence="&#x9;&#x9;&#x9;return (value instanceof ORYX.Core.Node)" line="304" reason="Missing semicolon." />
    <issue char="44" evidence="&#x9;&#x9;&#x9;var d = value.getIncomingShapes()" line="308" reason="Line breaking error &apos;)&apos;." />
    <issue char="45" evidence="&#x9;&#x9;&#x9;var d = value.getIncomingShapes()" line="308" reason="Missing semicolon." />
    <issue char="28" evidence="&#x9;&#x9;&#x9;return d.length == 0 || !elements.include(d[0])" line="309" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="59" evidence="&#x9;&#x9;&#x9;return d.length == 0 || !elements.include(d[0])" line="309" reason="Missing semicolon." />
    <issue char="27" evidence="&#x9;&#x9;&#x9;&#x9;if(!maxSize)" line="338" reason="Line breaking error &apos;)&apos;." />
    <issue char="20" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;maxSize = {width: ORYX.CONFIG.MAXIMUM_SIZE, height: ORYX.CONFIG.MAXIMUM_SIZE};" line="339" reason="Expected &apos;{&apos; and instead saw &apos;maxSize&apos;." />
    <issue char="63" evidence="&#x9;&#x9;&#x9;&#x9;if(!shape.bounds) { throw &quot;Bounds not definined.&quot; }" line="341" reason="Missing semicolon." />
    <issue char="17" evidence="&#x9;            }" line="348" reason="Missing semicolon." />
    <issue char="109" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;newBounds.b.x =&#x9;shape.bounds.lowerRight().x + (maxSize.width - shape.bounds.width())/2" line="355" reason="Missing semicolon." />
    <issue char="111" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;newBounds.b.y =&#x9;shape.bounds.lowerRight().y + (maxSize.height - shape.bounds.height())/2" line="363" reason="Missing semicolon." />
    <issue char="9" evidence="&#x9;&#x9;})" line="444" reason="Line breaking error &apos;)&apos;." />
    <issue char="10" evidence="&#x9;&#x9;})" line="444" reason="Missing semicolon." />
    <issue char="26" evidence="&#x9;&#x9;var command = new commandClass(elements, bounds, maxHeight, maxWidth, parseInt(way), this.facade);" line="446" reason="A constructor name should start with an uppercase letter." />
    <issue char="26" evidence="" line="446" reason="Too many errors. (98% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\autoLayout.js">
    <issue char="16" evidence="if(!ORYX.Plugins)" line="23" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Use the object literal notation {}." />
    <issue char="16" evidence="&#x9;&#x9;&#x9;new Ajax.Request(ORYX.CONFIG.AUTO_LAYOUTER_URL, {" line="99" reason="&apos;new&apos; should not be used as a statement." />
    <issue char="16" evidence="" line="99" reason="Stopping, unable to continue. (77% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\bpel2bpmn.js">
    <issue char="16" evidence="if(!ORYX.Plugins)" line="23" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Use the object literal notation {}." />
    <issue char="39" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;eRDF = &apos;&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; xmlns:b3mn=&quot;http://b3mn.org/2007/b3mn&quot; xmlns:ext=&quot;http://b3mn.org/2007/ext&quot; xmlns:rdf=&quot;http://www.w3.org/1999/02/22-rdf-syntax-ns#&quot; xmlns:atom=&quot;http://b3mn.org/2007/atom+xhtml&quot;&gt;&lt;head profile=&quot;http://purl.org/NET/erdf/profile&quot;&gt;&lt;link rel=&quot;schema.dc&quot; href=&quot;http://purl.org/dc/elements/1.1/&quot; /&gt;&lt;link rel=&quot;schema.dcTerms&quot; href=&quot;http://purl.org/dc/terms/ &quot; /&gt;&lt;link rel=&quot;schema.b3mn&quot; href=&quot;http://b3mn.org&quot; /&gt;&lt;link rel=&quot;schema.oryx&quot; href=&quot;http://oryx-editor.org/&quot; /&gt;&lt;link rel=&quot;schema.raziel&quot; href=&quot;http://raziel.org/&quot; /&gt;&lt;base href=&quot;http://localhost:8080/backend/poem/new&quot; /&gt;&lt;/head&gt;&lt;body&gt;&apos;" line="141" reason="Line breaking error &apos;&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; xmlns:b3mn=&quot;http://b3mn.org/2007/b3mn&quot; xmlns:ext=&quot;http://b3mn.org/2007/ext&quot; xmlns:rdf=&quot;http://www.w3.org/1999/02/22-rdf-syntax-ns#&quot; xmlns:atom=&quot;http://b3mn.org/2007/atom+xhtml&quot;&gt;&lt;head profile=&quot;http://purl.org/NET/erdf/profile&quot;&gt;&lt;link rel=&quot;schema.dc&quot; href=&quot;http://purl.org/dc/elements/1.1/&quot; /&gt;&lt;link rel=&quot;schema.dcTerms&quot; href=&quot;http://purl.org/dc/terms/ &quot; /&gt;&lt;link rel=&quot;schema.b3mn&quot; href=&quot;http://b3mn.org&quot; /&gt;&lt;link rel=&quot;schema.oryx&quot; href=&quot;http://oryx-editor.org/&quot; /&gt;&lt;link rel=&quot;schema.raziel&quot; href=&quot;http://raziel.org/&quot; /&gt;&lt;base href=&quot;http://localhost:8080/backend/poem/new&quot; /&gt;&lt;/head&gt;&lt;body&gt;&apos;." />
    <issue char="25" evidence="&#x9;&#x9;&#x9;delete dialog;" line="173" reason="Expected &apos;.&apos; and instead saw &apos;;&apos;." />
    <issue char="5" evidence="&#x9;}," line="176" reason="Extra comma." />
    <issue char="0" evidence="});" line="177" reason="Expected &apos;}&apos; and instead saw &apos;}&apos;." />
    <issue char="0" evidence="" line="177" reason="Stopping, unable to continue. (99% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\bpel4chor2bpelSupport.js">
    <issue char="16" evidence="if(!ORYX.Plugins)" line="23" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Use the object literal notation {}." />
    <issue char="26" evidence="        window.setTimeout((function(){" line="60" reason="Parens are not needed here." />
    <issue char="16" evidence="&#x9;&#x9;&#x9;new Ajax.Request(ORYX.CONFIG.BPEL4CHOR2BPEL_EXPORT_URL, {" line="87" reason="&apos;new&apos; should not be used as a statement." />
    <issue char="16" evidence="" line="87" reason="Stopping, unable to continue. (47% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\bpel4chorSupport.js">
    <issue char="16" evidence="if(!ORYX.Plugins)" line="23" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Use the object literal notation {}." />
    <issue char="49" evidence="&#x9;&#x9;&#x9;&apos;isEnabled&apos;: function(){ return false}" line="59" reason="Missing semicolon." />
    <issue char="26" evidence="        window.setTimeout((function(){" line="73" reason="Parens are not needed here." />
    <issue char="16" evidence="&#x9;&#x9;&#x9;new Ajax.Request(ORYX.CONFIG.BPEL4CHOR_EXPORT_URL, {" line="100" reason="&apos;new&apos; should not be used as a statement." />
    <issue char="16" evidence="" line="100" reason="Stopping, unable to continue. (44% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\bpelLayout.js">
    <issue char="16" evidence="if(!ORYX.Plugins)" line="23" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Use the object literal notation {}." />
    <issue char="45" evidence="&#x9;&#x9;&#x9;&apos;isEnabled&apos;: function(){ return !(this.isEnabled)}.bind(this)" line="50" reason="Parens are not needed here." />
    <issue char="61" evidence="&#x9;&#x9;&#x9;&apos;isEnabled&apos;: function(){ return !(this.isEnabled)}.bind(this)" line="50" reason="Missing semicolon." />
    <issue char="58" evidence="&#x9;&#x9;&#x9;&apos;isEnabled&apos;: function(){ return this.isEnabled}.bind(this)" line="62" reason="Missing semicolon." />
    <issue char="9" evidence="&#x9;&#x9;};" line="104" reason="Unnecessary semicolon." />
    <issue char="70" evidence="&#x9;&#x9;if (node.getStencil().id() == node.getStencil().namespace() + &quot;process&quot;" line="114" reason="Line breaking error &apos;process&apos;." />
    <issue char="74" evidence="&#x9; &#x9;&#x9;|| node.getStencil().id() == node.getStencil().namespace() + &quot;invoke&quot; " line="115" reason="Line breaking error &apos;invoke&apos;." />
    <issue char="77" evidence="&#x9;&#x9;} else if (node.getStencil().id() == node.getStencil().namespace() + &quot;assign&quot;" line="120" reason="Line breaking error &apos;assign&apos;." />
    <issue char="73" evidence="&#x9;&#x9;&#x9;|| node.getStencil().id() == node.getStencil().namespace() + &quot;eventHandlers&quot;" line="121" reason="Line breaking error &apos;eventHandlers&apos;." />
    <issue char="73" evidence="&#x9;&#x9;&#x9;|| node.getStencil().id() == node.getStencil().namespace() + &quot;faultHandlers&quot;" line="122" reason="Line breaking error &apos;faultHandlers&apos;." />
    <issue char="73" evidence="&#x9;&#x9;&#x9;|| node.getStencil().id() == node.getStencil().namespace() + &quot;compensationHandler&quot;" line="123" reason="Line breaking error &apos;compensationHandler&apos;." />
    <issue char="78" evidence="&#x9;&#x9;} else if  (node.getStencil().id() == node.getStencil().namespace() + &quot;if&quot;" line="128" reason="Line breaking error &apos;if&apos;." />
    <issue char="73" evidence="&#x9;&#x9;&#x9;|| node.getStencil().id() == node.getStencil().namespace() + &quot;sequence&quot;" line="129" reason="Line breaking error &apos;sequence&apos;." />
    <issue char="77" evidence="&#x9;&#x9;} else if (node.getStencil().id() == node.getStencil().namespace() + &quot;onMessage&quot;" line="134" reason="Line breaking error &apos;onMessage&apos;." />
    <issue char="73" evidence="&#x9;&#x9;&#x9;|| node.getStencil().id() == node.getStencil().namespace() + &quot;if_branch&quot;" line="135" reason="Line breaking error &apos;if_branch&apos;." />
    <issue char="73" evidence="&#x9;&#x9;&#x9;|| node.getStencil().id() == node.getStencil().namespace() + &quot;else_branch&quot;" line="136" reason="Line breaking error &apos;else_branch&apos;." />
    <issue char="73" evidence="&#x9;&#x9;&#x9;|| node.getStencil().id() == node.getStencil().namespace() + &quot;while&quot;" line="137" reason="Line breaking error &apos;while&apos;." />
    <issue char="73" evidence="&#x9;&#x9;&#x9;|| node.getStencil().id() == node.getStencil().namespace() + &quot;repeatUntil&quot;" line="138" reason="Line breaking error &apos;repeatUntil&apos;." />
    <issue char="73" evidence="&#x9;&#x9;&#x9;|| node.getStencil().id() == node.getStencil().namespace() + &quot;forEach&quot;" line="139" reason="Line breaking error &apos;forEach&apos;." />
    <issue char="73" evidence="&#x9;&#x9;&#x9;|| node.getStencil().id() == node.getStencil().namespace() + &quot;onAlarm&quot;" line="140" reason="Line breaking error &apos;onAlarm&apos;." />
    <issue char="73" evidence="&#x9;&#x9;&#x9;|| node.getStencil().id() == node.getStencil().namespace() + &quot;onEvent&quot;" line="141" reason="Line breaking error &apos;onEvent&apos;." />
    <issue char="73" evidence="&#x9;&#x9;&#x9;|| node.getStencil().id() == node.getStencil().namespace() + &quot;catch&quot;" line="142" reason="Line breaking error &apos;catch&apos;." />
    <issue char="27" evidence="&#x9;&#x9;if (this.isEnabled == false) {" line="190" reason="Use &apos;===&apos; to compare with &apos;false&apos;." />
    <issue char="10" evidence="     &#x9;};" line="199" reason="Unnecessary semicolon." />
    <issue char="40" evidence="&#x9;&#x9;if(!elements || elements.length == 0) {" line="202" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="9" evidence="&#x9;&#x9;};" line="206" reason="Unnecessary semicolon." />
    <issue char="59" evidence="&#x9;&#x9;&#x9;&#x9;return (node !== eventHandlers &amp;&amp; node !== faultHandlers " line="225" reason="Line breaking error &apos;faultHandlers&apos;." />
    <issue char="79" evidence="&#x9;&#x9;&#x9;&#x9;&amp;&amp; node !== compensationHandler &amp;&amp; node !== terminationHandler)" line="226" reason="Missing semicolon." />
    <issue char="17" evidence="&#x9;&#x9;&#x9;&#x9;};" line="265" reason="Unnecessary semicolon." />
    <issue char="40" evidence="&#x9;&#x9;if(!elements || elements.length == 0) {" line="383" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="9" evidence="&#x9;&#x9;};" line="386" reason="Unnecessary semicolon." />
    <issue char="27" evidence="&#x9;&#x9;if (this.isEnabled == false) {" line="398" reason="Use &apos;===&apos; to compare with &apos;false&apos;." />
    <issue char="10" evidence="     &#x9;};" line="407" reason="Unnecessary semicolon." />
    <issue char="40" evidence="&#x9;&#x9;if(!elements || elements.length == 0) {" line="410" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="9" evidence="&#x9;&#x9;};" line="413" reason="Unnecessary semicolon." />
    <issue char="27" evidence="&#x9;&#x9;if (this.isEnabled == false) {" line="453" reason="Use &apos;===&apos; to compare with &apos;false&apos;." />
    <issue char="10" evidence="     &#x9;};" line="462" reason="Unnecessary semicolon." />
    <issue char="40" evidence="&#x9;&#x9;if(!elements || elements.length == 0) {" line="465" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="9" evidence="&#x9;&#x9;};" line="468" reason="Unnecessary semicolon." />
    <issue char="27" evidence="&#x9;&#x9;if (this.isEnabled == false) {" line="511" reason="Use &apos;===&apos; to compare with &apos;false&apos;." />
    <issue char="10" evidence="     &#x9;};" line="520" reason="Unnecessary semicolon." />
    <issue char="40" evidence="&#x9;&#x9;if(!elements || elements.length == 0) {" line="523" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="9" evidence="&#x9;&#x9;};" line="526" reason="Unnecessary semicolon." />
    <issue char="27" evidence="&#x9;&#x9;if (this.isEnabled == false) {" line="537" reason="Use &apos;===&apos; to compare with &apos;false&apos;." />
    <issue char="9" evidence="&#x9;&#x9;};" line="539" reason="Unnecessary semicolon." />
    <issue char="10" evidence="     &#x9;};" line="546" reason="Unnecessary semicolon." />
    <issue char="18" evidence="&#x9;&#x9;&#x9; &#x9;};" line="596" reason="Unnecessary semicolon." />
    <issue char="18" evidence="&#x9;&#x9;&#x9; &#x9;};&#x9;&#x9;&#x9; &#x9;" line="601" reason="Unnecessary semicolon." />
    <issue char="18" evidence="" line="601" reason="Too many errors. (82% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\bpelSupport.js">
    <issue char="16" evidence="if(!ORYX.Plugins)" line="23" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Use the object literal notation {}." />
    <issue char="26" evidence="        window.setTimeout((function(){" line="75" reason="Parens are not needed here." />
    <issue char="16" evidence="&#x9;&#x9;&#x9;new Ajax.Request(ORYX.CONFIG.BPEL_EXPORT_URL, {" line="103" reason="&apos;new&apos; should not be used as a statement." />
    <issue char="16" evidence="" line="103" reason="Stopping, unable to continue. (30% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\bpmn.js">
    <issue char="16" evidence="if(!ORYX.Plugins)" line="23" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Use the object literal notation {}." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\bpmn11.js">
    <issue char="16" evidence="if(!ORYX.Plugins)" line="23" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Use the object literal notation {}." />
    <issue char="21" evidence="&#x9;&#x9;}.bind(this))" line="52" reason="Missing semicolon." />
    <issue char="57" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;.concat(node.getOutgoingShapes())" line="110" reason="Missing semicolon." />
    <issue char="45" evidence="&#x9;&#x9;&#x9;&#x9;if (docker.isChanged){ return }" line="125" reason="Missing semicolon." />
    <issue char="14" evidence="&#x9;&#x9;&#x9;})" line="127" reason="Missing semicolon." />
    <issue char="42" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;if(group == &quot;Gateways&quot;) " line="140" reason="Line breaking error &apos;)&apos;." />
    <issue char="24" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;return group;" line="141" reason="Expected &apos;{&apos; and instead saw &apos;return&apos;." />
    <issue char="84" evidence="&#x9;&#x9;&#x9;if(!isGateway &amp;&amp; (edge.properties[&quot;oryx-conditiontype&quot;] == &quot;Expression&quot;))" line="143" reason="Line breaking error &apos;)&apos;." />
    <issue char="16" evidence="&#x9;&#x9;&#x9;&#x9;edge.setProperty(&quot;oryx-showdiamondmarker&quot;, true);" line="145" reason="Expected &apos;{&apos; and instead saw &apos;edge&apos;." />
    <issue char="16" evidence="&#x9;&#x9;&#x9;&#x9;edge.setProperty(&quot;oryx-showdiamondmarker&quot;, false);" line="148" reason="Expected &apos;{&apos; and instead saw &apos;edge&apos;." />
    <issue char="48" evidence="&#x9;&#x9;&#x9;&#x9;if(propertyValue != &quot;Expression&quot;)" line="171" reason="Line breaking error &apos;)&apos;." />
    <issue char="20" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;shape.setProperty(&quot;oryx-showdiamondmarker&quot;, false);" line="173" reason="Expected &apos;{&apos; and instead saw &apos;shape&apos;." />
    <issue char="50" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(group == &quot;Gateways&quot;) " line="183" reason="Line breaking error &apos;)&apos;." />
    <issue char="32" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;return group;" line="184" reason="Expected &apos;{&apos; and instead saw &apos;return&apos;." />
    <issue char="39" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(foundGateway)" line="186" reason="Line breaking error &apos;)&apos;." />
    <issue char="28" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;return foundGateway;" line="187" reason="Expected &apos;{&apos; and instead saw &apos;return&apos;." />
    <issue char="39" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;if(!incomingGateway) " line="190" reason="Line breaking error &apos;)&apos;." />
    <issue char="24" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;shape.setProperty(&quot;oryx-showdiamondmarker&quot;, true);" line="192" reason="Expected &apos;{&apos; and instead saw &apos;shape&apos;." />
    <issue char="24" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;shape.setProperty(&quot;oryx-showdiamondmarker&quot;, false);" line="195" reason="Expected &apos;{&apos; and instead saw &apos;shape&apos;." />
    <issue char="12" evidence="&#x9;&#x9;&#x9;return" line="238" reason="Line breaking error &apos;return&apos;." />
    <issue char="18" evidence="&#x9;&#x9;&#x9;return" line="238" reason="Missing semicolon." />
    <issue char="44" evidence="&#x9;&#x9;&#x9;&#x9;addedLanes.push(allLanes[i])" line="260" reason="Missing semicolon." />
    <issue char="13" evidence="&#x9;&#x9;var i=-1;" line="271" reason="&apos;i&apos; is already defined." />
    <issue char="86" evidence="&#x9;&#x9;&#x9;if (!allLanes.any(function(lane){ return lane.resourceId == resourceIds[i]})){" line="273" reason="Missing semicolon." />
    <issue char="87" evidence="&#x9;&#x9;&#x9;if (!allLanes.any(function(lane){ return lane.resourceId == resourceIds[i]})){" line="273" reason="Be careful when making functions within a loop. Consider putting the function in a closure." />
    <issue char="96" evidence="&#x9;&#x9;&#x9;&#x9;selection = selection.without(function(r){ return r.resourceId == resourceIds[i] });" line="275" reason="Missing semicolon." />
    <issue char="98" evidence="&#x9;&#x9;&#x9;&#x9;selection = selection.without(function(r){ return r.resourceId == resourceIds[i] });" line="275" reason="Be careful when making functions within a loop. Consider putting the function in a closure." />
    <issue char="13" evidence="&#x9;&#x9;var i=-1;" line="322" reason="&apos;i&apos; is already defined." />
    <issue char="15" evidence="&#x9;&#x9;&#x9;++i" line="353" reason="Missing semicolon." />
    <issue char="60" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;.concat(children[j].getOutgoingShapes())" line="366" reason="Missing semicolon." />
    <issue char="10" evidence="&#x9;&#x9;})" line="368" reason="Missing semicolon." />
    <issue char="72" evidence="&#x9;&#x9;&#x9;&#x9;height &#x9;? shape.bounds.a.y + height : shape.bounds.b.y" line="379" reason="Line breaking error &apos;)&apos;." />
    <issue char="19" evidence="&#x9;&#x9;(lanes||[]).each(function(lane){" line="390" reason="Missing semicolon." />
    <issue char="19" evidence="&#x9;&#x9;(lanes||[]).each(function(lane){" line="390" reason="Expected an identifier and instead saw &apos;.&apos;." />
    <issue char="19" evidence="" line="390" reason="Stopping, unable to continue. (42% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\bpmn2.0\bpmn2.0.js">
    <issue char="17" evidence=" if(!ORYX.Plugins)" line="23" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Use the object literal notation {}." />
    <issue char="21" evidence="&#x9;&#x9;}.bind(this))" line="56" reason="Missing semicolon." />
    <issue char="57" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;.concat(node.getOutgoingShapes())" line="114" reason="Missing semicolon." />
    <issue char="45" evidence="&#x9;&#x9;&#x9;&#x9;if (docker.isChanged){ return }" line="129" reason="Missing semicolon." />
    <issue char="14" evidence="&#x9;&#x9;&#x9;})" line="131" reason="Missing semicolon." />
    <issue char="42" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;if(group == &quot;Gateways&quot;) " line="144" reason="Line breaking error &apos;)&apos;." />
    <issue char="24" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;return group;" line="145" reason="Expected &apos;{&apos; and instead saw &apos;return&apos;." />
    <issue char="84" evidence="&#x9;&#x9;&#x9;if(!isGateway &amp;&amp; (edge.properties[&quot;oryx-conditiontype&quot;] == &quot;Expression&quot;))" line="147" reason="Line breaking error &apos;)&apos;." />
    <issue char="16" evidence="&#x9;&#x9;&#x9;&#x9;edge.setProperty(&quot;oryx-showdiamondmarker&quot;, true);" line="149" reason="Expected &apos;{&apos; and instead saw &apos;edge&apos;." />
    <issue char="16" evidence="&#x9;&#x9;&#x9;&#x9;edge.setProperty(&quot;oryx-showdiamondmarker&quot;, false);" line="152" reason="Expected &apos;{&apos; and instead saw &apos;edge&apos;." />
    <issue char="48" evidence="&#x9;&#x9;&#x9;&#x9;if(propertyValue != &quot;Expression&quot;)" line="175" reason="Line breaking error &apos;)&apos;." />
    <issue char="20" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;shape.setProperty(&quot;oryx-showdiamondmarker&quot;, false);" line="177" reason="Expected &apos;{&apos; and instead saw &apos;shape&apos;." />
    <issue char="50" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(group == &quot;Gateways&quot;) " line="187" reason="Line breaking error &apos;)&apos;." />
    <issue char="32" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;return group;" line="188" reason="Expected &apos;{&apos; and instead saw &apos;return&apos;." />
    <issue char="39" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(foundGateway)" line="190" reason="Line breaking error &apos;)&apos;." />
    <issue char="28" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;return foundGateway;" line="191" reason="Expected &apos;{&apos; and instead saw &apos;return&apos;." />
    <issue char="39" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;if(!incomingGateway) " line="194" reason="Line breaking error &apos;)&apos;." />
    <issue char="24" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;shape.setProperty(&quot;oryx-showdiamondmarker&quot;, true);" line="196" reason="Expected &apos;{&apos; and instead saw &apos;shape&apos;." />
    <issue char="24" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;shape.setProperty(&quot;oryx-showdiamondmarker&quot;, false);" line="199" reason="Expected &apos;{&apos; and instead saw &apos;shape&apos;." />
    <issue char="12" evidence="&#x9;&#x9;&#x9;return" line="241" reason="Line breaking error &apos;return&apos;." />
    <issue char="18" evidence="&#x9;&#x9;&#x9;return" line="241" reason="Missing semicolon." />
    <issue char="14" evidence="&#x9;&#x9;&#x9;})" line="255" reason="Missing semicolon." />
    <issue char="44" evidence="&#x9;&#x9;&#x9;&#x9;addedLanes.push(allLanes[i])" line="269" reason="Missing semicolon." />
    <issue char="13" evidence="&#x9;&#x9;var i=-1;" line="280" reason="&apos;i&apos; is already defined." />
    <issue char="86" evidence="&#x9;&#x9;&#x9;if (!allLanes.any(function(lane){ return lane.resourceId == resourceIds[i]})){" line="282" reason="Missing semicolon." />
    <issue char="87" evidence="&#x9;&#x9;&#x9;if (!allLanes.any(function(lane){ return lane.resourceId == resourceIds[i]})){" line="282" reason="Be careful when making functions within a loop. Consider putting the function in a closure." />
    <issue char="96" evidence="&#x9;&#x9;&#x9;&#x9;selection = selection.without(function(r){ return r.resourceId == resourceIds[i] });" line="284" reason="Missing semicolon." />
    <issue char="98" evidence="&#x9;&#x9;&#x9;&#x9;selection = selection.without(function(r){ return r.resourceId == resourceIds[i] });" line="284" reason="Be careful when making functions within a loop. Consider putting the function in a closure." />
    <issue char="13" evidence="&#x9;&#x9;var i=-1;" line="331" reason="&apos;i&apos; is already defined." />
    <issue char="15" evidence="&#x9;&#x9;&#x9;++i" line="361" reason="Missing semicolon." />
    <issue char="60" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;.concat(children[j].getOutgoingShapes())" line="374" reason="Missing semicolon." />
    <issue char="10" evidence="&#x9;&#x9;})" line="376" reason="Missing semicolon." />
    <issue char="72" evidence="&#x9;&#x9;&#x9;&#x9;height &#x9;? shape.bounds.a.y + height : shape.bounds.b.y" line="387" reason="Line breaking error &apos;)&apos;." />
    <issue char="19" evidence="&#x9;&#x9;(lanes||[]).each(function(lane){" line="398" reason="Missing semicolon." />
    <issue char="19" evidence="&#x9;&#x9;(lanes||[]).each(function(lane){" line="398" reason="Expected an identifier and instead saw &apos;.&apos;." />
    <issue char="19" evidence="" line="398" reason="Stopping, unable to continue. (58% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\bpmn2.0\bpmn2.0choreography.js">
    <issue char="17" evidence=" if(!ORYX.Plugins)" line="27" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="&#x9;ORYX.Plugins = new Object();" line="28" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="28" reason="Use the object literal notation {}." />
    <issue char="40" evidence="&#x9;&#x9;&#x9;var participantsOnTop = new Array();" line="140" reason="Use the array literal notation []." />
    <issue char="43" evidence="&#x9;&#x9;&#x9;var participantsOnBottom = new Array();" line="141" reason="Use the array literal notation []." />
    <issue char="71" evidence="&#x9;&#x9;&#x9;this.choreographyTasksMeta[choreographyTask.getId()] = new Object();" line="341" reason="Use the object literal notation {}." />
    <issue char="87" evidence="&#x9;&#x9;&#x9;this.choreographyTasksMeta[choreographyTask.getId()].topParticipants = new Array();" line="359" reason="Use the array literal notation []." />
    <issue char="90" evidence="&#x9;&#x9;&#x9;this.choreographyTasksMeta[choreographyTask.getId()].bottomParticipants = new Array();" line="360" reason="Use the array literal notation []." />
    <issue char="49" evidence="&#x9;&#x9;var minimumHeight = choreographyTaskMeta.numOfParticipantsOnTop " line="377" reason="Line breaking error &apos;numOfParticipantsOnTop&apos;." />
    <issue char="49" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;choreographyTaskMeta.numOfParticipantsOnBottom " line="381" reason="Line breaking error &apos;numOfParticipantsOnBottom&apos;." />
    <issue char="33" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;this.extensionSizeForMarker " line="384" reason="Line breaking error &apos;extensionSizeForMarker&apos;." />
    <issue char="29" evidence="&#x9;&#x9;&#x9;var participants = this.getParticipants(choreographyTask,true,false);" line="433" reason="&apos;participants&apos; is already defined." />
    <issue char="17" evidence="&#x9;&#x9;&#x9;if(i == 0) {" line="463" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="18" evidence="&#x9;&#x9;if (!isNew)" line="480" reason="Line breaking error &apos;)&apos;." />
    <issue char="12" evidence="&#x9;&#x9;&#x9;bounds.set(ul.x, " line="481" reason="Expected &apos;{&apos; and instead saw &apos;bounds&apos;." />
    <issue char="47" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;ul.y - resizeFactor * this.participantSize " line="482" reason="Line breaking error &apos;participantSize&apos;." />
    <issue char="55" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;participants.length * this.participantSize " line="487" reason="Line breaking error &apos;participantSize&apos;." />
    <issue char="29" evidence="&#x9;&#x9;&#x9;var participants = choreographyTaskMeta.bottomParticipants;" line="500" reason="&apos;participants&apos; is already defined." />
    <issue char="29" evidence="&#x9;&#x9;&#x9;var participants = this.getParticipants(choreographyTask,false,true);" line="502" reason="&apos;participants&apos; is already defined." />
    <issue char="37" evidence="&#x9;&#x9;&#x9;&#x9;(participants.length != 0 ? " line="511" reason="Use &apos;!==&apos; to compare with &apos;0&apos;." />
    <issue char="135" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;eval(participants.map(function(p){ return this.participantSize + (this.isExtended(p)?this.extensionSizeForMarker:0) }.bind(this)).join(&quot;+&quot;)) :" line="512" reason="Missing semicolon." />
    <issue char="20" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;eval(participants.map(function(p){ return this.participantSize + (this.isExtended(p)?this.extensionSizeForMarker:0) }.bind(this)).join(&quot;+&quot;)) :" line="512" reason="eval is evil." />
    <issue char="38" evidence="&#x9;&#x9;var numOfParticipantsExtended = 0;" line="521" reason="&apos;numOfParticipantsExtended&apos; is already defined." />
    <issue char="25" evidence="&#x9;&#x9;var resizeFactor = participants.length - " line="558" reason="&apos;resizeFactor&apos; is already defined." />
    <issue char="33" evidence="&#x9;&#x9;var resizeFactorExtended = numOfParticipantsExtended - " line="560" reason="&apos;resizeFactorExtended&apos; is already defined." />
    <issue char="19" evidence="&#x9;&#x9;var bounds = choreographyTask.bounds;" line="563" reason="&apos;bounds&apos; is already defined." />
    <issue char="15" evidence="&#x9;&#x9;var ul = bounds.upperLeft();" line="564" reason="&apos;ul&apos; is already defined." />
    <issue char="15" evidence="&#x9;&#x9;var lr = bounds.lowerRight();" line="565" reason="&apos;lr&apos; is already defined." />
    <issue char="18" evidence="&#x9;&#x9;if (!isNew)" line="567" reason="Line breaking error &apos;)&apos;." />
    <issue char="8" evidence="&#x9;&#x9;bounds.set( ul.x, " line="568" reason="Expected &apos;{&apos; and instead saw &apos;bounds&apos;." />
    <issue char="47" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;lr.y + resizeFactor * this.participantSize " line="571" reason="Line breaking error &apos;participantSize&apos;." />
    <issue char="42" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;(choreographyTaskMeta.bottomYStartValue " line="701" reason="Line breaking error &apos;bottomYStartValue&apos;." />
    <issue char="62" evidence="&#x9;&#x9;&#x9;return (!magnet.anchorTop &amp;&amp; !magnet.anchorBottom)" line="712" reason="Missing semicolon." />
    <issue char="63" evidence="&#x9;&#x9;&#x9;var y = (magnet.bounds.center().y + yAdjustment) / heightDelta" line="718" reason="Line breaking error &apos;heightDelta&apos;." />
    <issue char="74" evidence="&#x9;&#x9;&#x9;var y = (magnet.bounds.center().y + yAdjustment) / heightDelta" line="718" reason="Missing semicolon." />
    <issue char="81" evidence="&#x9;&#x9;var absoluteTopYEndValue = choreographyTask.absoluteBounds().upperLeft().y " line="723" reason="Line breaking error &apos;y&apos;." />
    <issue char="86" evidence="&#x9;&#x9;var absoluteBottomYStartValue = choreographyTask.absoluteBounds().upperLeft().y " line="725" reason="Line breaking error &apos;y&apos;." />
    <issue char="26" evidence="&#x9;&#x9;var dockers = new Array();" line="727" reason="Use the array literal notation []." />
    <issue char="62" evidence="&#x9;&#x9;&#x9;if(absoluteTopYEndValue &lt;= docker.bounds.center().y " line="732" reason="Line breaking error &apos;y&apos;." />
    <issue char="62" evidence="&#x9;&#x9;&#x9;if(absoluteTopYEndValue &lt;= docker.bounds.center().y " line="741" reason="Line breaking error &apos;y&apos;." />
    <issue char="24" evidence="&#x9;&#x9;if (!bg){ return }" line="864" reason="Missing semicolon." />
    <issue char="9" evidence="&#x9;&#x9;})" line="902" reason="Line breaking error &apos;)&apos;." />
    <issue char="10" evidence="&#x9;&#x9;})" line="902" reason="Missing semicolon." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\bpmn2.0\bpmn2.0serialization.js">
    <issue char="16" evidence="if(!ORYX.Plugins)" line="27" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="&#x9;ORYX.Plugins = new Object();" line="28" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="28" reason="Use the object literal notation {}." />
    <issue char="16" evidence="        }, true)" line="284" reason="Missing semicolon." />
    <issue char="12" evidence="&#x9;&#x9;new Ajax.Request(url, {" line="292" reason="&apos;new&apos; should not be used as a statement." />
    <issue char="12" evidence="" line="292" reason="Stopping, unable to continue. (87% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\bpmn2.0\bpmn2conversation.js">
    <issue char="16" evidence="if(!ORYX.Plugins)" line="23" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Use the object literal notation {}." />
    <issue char="30" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;if (miProp) " line="49" reason="Line breaking error &apos;)&apos;." />
    <issue char="24" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;aShape.setProperty(&quot;oryx-showforkend&quot;, true);" line="50" reason="Expected &apos;{&apos; and instead saw &apos;aShape&apos;." />
    <issue char="24" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;aShape.setProperty(&quot;oryx-showforkend&quot;, false);" line="52" reason="Expected &apos;{&apos; and instead saw &apos;aShape&apos;." />
    <issue char="30" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;if (miProp) " line="60" reason="Line breaking error &apos;)&apos;." />
    <issue char="24" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;aShape.setProperty(&quot;oryx-showforkstart&quot;, true);" line="61" reason="Expected &apos;{&apos; and instead saw &apos;aShape&apos;." />
    <issue char="24" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;aShape.setProperty(&quot;oryx-showforkstart&quot;, false);" line="63" reason="Expected &apos;{&apos; and instead saw &apos;aShape&apos;." />
    <issue char="20" evidence="&#x9;&#x9;if(changed) this.facade.getCanvas().update();" line="102" reason="Expected &apos;{&apos; and instead saw &apos;this&apos;." />
    <issue char="20" evidence="&#x9;&#x9;if(changed) this.facade.getCanvas().update();" line="145" reason="Expected &apos;{&apos; and instead saw &apos;this&apos;." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\bpmn2bpel.js">
    <issue char="16" evidence="if(!ORYX.Plugins)" line="23" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Use the object literal notation {}." />
    <issue char="20" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;eval(&quot;var process = &quot; + arg);" line="126" reason="eval is evil." />
    <issue char="12" evidence="&#x9;&#x9;new Ajax.Request(url, {" line="143" reason="&apos;new&apos; should not be used as a statement." />
    <issue char="12" evidence="" line="143" reason="Stopping, unable to continue. (58% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\bpmn2dtrp-xmi.js">
    <issue char="16" evidence="if(!ORYX.Plugins)" line="23" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Use the object literal notation {}." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\bpmn2pn.js">
    <issue char="40" evidence="        name = name.replace(/[\[]/, &quot;\\\[&quot;).replace(/[\]]/, &quot;\\\]&quot;);" line="42" reason="Bad escapement." />
    <issue char="64" evidence="        name = name.replace(/[\[]/, &quot;\\\[&quot;).replace(/[\]]/, &quot;\\\]&quot;);" line="42" reason="Bad escapement." />
    <issue char="20" evidence="        if (results == null) {" line="46" reason="Use &apos;===&apos; to compare with &apos;null&apos;." />
    <issue char="27" evidence="        if(!importBPMNUrl) return; //return if no model to import is given" line="91" reason="Expected &apos;{&apos; and instead saw &apos;return&apos;." />
    <issue char="61" evidence="                         ORYX.I18N.BPMN2PNConverter.progress.importingModel" line="94" reason="Line breaking error &apos;)&apos;." />
    <issue char="107" evidence="                Ext.Msg.alert(ORYX.I18N.BPMN2PNConverter.error, ORYX.I18N.BPMN2PNConverter.errors.noRights)" line="105" reason="Missing semicolon." />
    <issue char="10" evidence="        })" line="108" reason="Missing semicolon." />
    <issue char="50" evidence="        return url.replace(/\/self(\/)?$/, &quot;/rdf&quot;)" line="118" reason="Missing semicolon." />
    <issue char="38" evidence="&#x9;&#x9;&#x9;reqURI = &apos;/backend/poem/&apos;+(location.hash.slice(1).replace(/^\/?/,&quot;&quot;).replace(/\/?$/,&quot;&quot;))+&quot;/rdf&quot;;" line="149" reason="Parens are not needed here." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\bpmn2xforms.js">
    <issue char="16" evidence="if(!ORYX.Plugins)" line="23" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Use the object literal notation {}." />
    <issue char="13" evidence="&#x9;&#x9;     content" line="113" reason="Line breaking error &apos;)&apos;." />
    <issue char="21" evidence="&#x9;&#x9;   &apos;_blank&apos;, &quot;resizable=yes,width=600,height=600,toolbar=0,scrollbars=yes&quot;" line="115" reason="Line breaking error &apos;)&apos;." />
    <issue char="12" evidence="&#x9;&#x9;new Ajax.Request(url, {" line="145" reason="&apos;new&apos; should not be used as a statement." />
    <issue char="12" evidence="" line="145" reason="Stopping, unable to continue. (68% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\bpmn2xhtml.js">
    <issue char="16" evidence="if(!ORYX.Plugins)" line="23" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Use the object literal notation {}." />
    <issue char="12" evidence="&#x9;&#x9;new Ajax.Request(url, {" line="102" reason="&apos;new&apos; should not be used as a statement." />
    <issue char="12" evidence="" line="102" reason="Stopping, unable to continue. (64% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\bpmn2xpdl.js">
    <issue char="16" evidence="if(!ORYX.Plugins)" line="23" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Use the object literal notation {}." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\bpmn2xpdl20.js">
    <issue char="16" evidence="if(!ORYX.Plugins)" line="24" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="&#x9;ORYX.Plugins = new Object();" line="25" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="25" reason="Use the object literal notation {}." />
    <issue char="10" evidence="&#x9;&#x9;})" line="67" reason="Missing semicolon." />
    <issue char="134" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;success: function(request){this.facade.importJSON(request.responseText); loadMask.hide();dialog.hide()}.bind(this)," line="127" reason="Missing semicolon." />
    <issue char="25" evidence="&#x9;&#x9;&#x9;delete dialog;" line="150" reason="Expected &apos;.&apos; and instead saw &apos;;&apos;." />
    <issue char="20" evidence="&#x9;&#x9;&#x9;}, true)" line="162" reason="Missing semicolon." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\bpmn2yawl.js">
    <issue char="17" evidence="if (!ORYX.Plugins) " line="5" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="    ORYX.Plugins = new Object();" line="6" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="    ORYX.Plugins = new Object();" line="6" reason="Use the object literal notation {}." />
    <issue char="20" evidence="        }.bind(this))" line="154" reason="Line breaking error &apos;)&apos;." />
    <issue char="21" evidence="        }.bind(this))" line="154" reason="Missing semicolon." />
    <issue char="16" evidence="&#x9;&#x9;if (win != null) {" line="186" reason="Use &apos;!==&apos; to compare with &apos;null&apos;." />
    <issue char="33" evidence="&#x9;&#x9;&#x9;&#x9;return newElement" line="197" reason="Missing semicolon." />
    <issue char="13" evidence="&#x9;&#x9;&#x9;}" line="198" reason="Missing semicolon." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\bpmnClearSodBodHighlights.js">
    <issue char="17" evidence="if (!ORYX.Plugins) " line="21" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="    ORYX.Plugins = new Object();" line="22" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="    ORYX.Plugins = new Object();" line="22" reason="Use the object literal notation {}." />
    <issue char="59" evidence="&#x9;&#x9;&#x9;&#x9;if (allShapes[index].properties[&quot;oryx-id&quot;] != &quot;&quot;) {" line="56" reason="Use &apos;!==&apos; to compare with &apos;&apos;." />
    <issue char="20" evidence="&#x9;&#x9;}.bind(this))" line="69" reason="Line breaking error &apos;)&apos;." />
    <issue char="21" evidence="&#x9;&#x9;}.bind(this))" line="69" reason="Missing semicolon." />
    <issue char="21" evidence="&#x9;&#x9;}.bind(this))" line="77" reason="Missing semicolon." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\bpmnLayouter.js">
    <issue char="9" evidence="if (!ORYX) " line="23" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="&#x9;ORYX = new Object();" line="24" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="15" evidence="&#x9;ORYX = new Object();" line="24" reason="Use the object literal notation {}." />
    <issue char="17" evidence="if (!ORYX.Plugins) " line="25" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="&#x9;ORYX.Plugins = new Object();" line="26" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="26" reason="Use the object literal notation {}." />
    <issue char="12" evidence="&#x9;&#x9;new Ajax.Request(ORYX.CONFIG.BPMN_LAYOUTER, {" line="51" reason="&apos;new&apos; should not be used as a statement." />
    <issue char="12" evidence="" line="51" reason="Stopping, unable to continue. (28% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\bpmnResourceAssignment.js">
    <issue char="17" evidence="if (!ORYX.Plugins) " line="21" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="    ORYX.Plugins = new Object();" line="22" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="    ORYX.Plugins = new Object();" line="22" reason="Use the object literal notation {}." />
    <issue char="57" evidence="&#x9;&#x9;&#x9;&#x9;if(taskElements[i].properties[&quot;oryx-id&quot;] == &quot;&quot;) {" line="63" reason="Use &apos;===&apos; to compare with &apos;&apos;." />
    <issue char="33" evidence="&#x9;&#x9;if(allocationTypeData[0] != null) { //skip following if no resource/ role is selected" line="72" reason="Use &apos;!==&apos; to compare with &apos;null&apos;." />
    <issue char="31" evidence="&#x9;&#x9;&#x9;&#x9;for (var index = 1; index &lt; resourceData.resource.length; index++) {" line="107" reason="&apos;index&apos; is already defined." />
    <issue char="12" evidence="&#x9;&#x9;new Ajax.Request(ORYX.CONFIG.ROOT_PATH + &apos;resourceList&apos;, {" line="126" reason="&apos;new&apos; should not be used as a statement." />
    <issue char="12" evidence="" line="126" reason="Stopping, unable to continue. (46% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\bpmnResourcesBoDAdd.js">
    <issue char="17" evidence="if (!ORYX.Plugins) " line="21" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="    ORYX.Plugins = new Object();" line="22" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="    ORYX.Plugins = new Object();" line="22" reason="Use the object literal notation {}." />
    <issue char="57" evidence="&#x9;&#x9;&#x9;&#x9;if(taskElements[i].properties[&quot;oryx-id&quot;] == &quot;&quot;) {" line="63" reason="Use &apos;===&apos; to compare with &apos;&apos;." />
    <issue char="21" evidence="    &#x9;&#x9;&#x9;if(i == 0) { //get ids of tasks to be bound" line="66" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="82" evidence="&#x9;&#x9;&#x9;&#x9;if (taskElements[taskCounter].properties[&quot;oryx-bindingsofduties&quot;] != &quot;&quot;) {" line="82" reason="Use &apos;!==&apos; to compare with &apos;&apos;." />
    <issue char="45" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;if (savedBindingsData[3] == true) {" line="84" reason="Use &apos;===&apos; to compare with &apos;true&apos;." />
    <issue char="84" evidence="&#x9;&#x9;&#x9;&#x9;if (taskElements[taskCounter].properties[&quot;oryx-separationofduties&quot;] != (&quot;&quot;)) {" line="93" reason="Use &apos;!==&apos; to compare with &apos;&apos;." />
    <issue char="45" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;if (savedSeparationsData == true) {" line="95" reason="Use &apos;===&apos; to compare with &apos;true&apos;." />
    <issue char="60" evidence="    &#x9;&#x9;&#x9;elementIds[m] = parseInt(bindings.substring((bindings.indexOf(&apos;&quot;&apos;)) + 1));" line="125" reason="Parens are not needed here." />
    <issue char="32" evidence="    &#x9;&#x9;&#x9;elementIds[m] = parseInt(bindings.substring((bindings.indexOf(&apos;&quot;&apos;)) + 1));" line="125" reason="Missing radix parameter." />
    <issue char="46" evidence="&#x9;&#x9;    &#x9;bindings = bindings.substring((bindings.indexOf(&apos;,&apos;)) + 1);" line="127" reason="Parens are not needed here." />
    <issue char="24" evidence="    &#x9;&#x9;} else if(j == 0) { //get total count as integer" line="128" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="57" evidence="    &#x9;&#x9;&#x9;totalCount = parseInt(bindings.substring((bindings.indexOf(&apos;:&apos;)) + 1));" line="129" reason="Parens are not needed here." />
    <issue char="29" evidence="    &#x9;&#x9;&#x9;totalCount = parseInt(bindings.substring((bindings.indexOf(&apos;:&apos;)) + 1));" line="129" reason="Missing radix parameter." />
    <issue char="46" evidence="    &#x9;&#x9;&#x9;bindings = bindings.substring((bindings.indexOf(&apos;,&apos;)) + 1);" line="130" reason="Parens are not needed here." />
    <issue char="46" evidence="    &#x9;&#x9;&#x9;bindings = bindings.substring((bindings.indexOf(&apos;&quot;&apos;)) + 1);" line="132" reason="Parens are not needed here." />
    <issue char="46" evidence="    &#x9;&#x9;&#x9;bindings = bindings.substring((bindings.indexOf(&apos;,&apos;)) + 1);" line="135" reason="Parens are not needed here." />
    <issue char="44" evidence="    &#x9;&#x9;taskIds[n] = bindings.substring((bindings.indexOf(&apos;&quot;&apos;)) + 1);" line="140" reason="Parens are not needed here." />
    <issue char="54" evidence="    &#x9;&#x9;boundTasksCopy = boundTasksCopy.substring((boundTasksCopy.indexOf(&apos;;&apos;))+2);" line="158" reason="Parens are not needed here." />
    <issue char="58" evidence="        &#x9;&#x9;taskIds[index] = taskIds[index].substring((taskIds[index].indexOf(&apos;;&apos;))+2);" line="169" reason="Parens are not needed here." />
    <issue char="29" evidence="        &#x9;&#x9;&#x9;if(equal == false) { //one item of set 1 not found in set 2" line="185" reason="Use &apos;===&apos; to compare with &apos;false&apos;." />
    <issue char="26" evidence="        &#x9;&#x9;for(var x = 0; x &lt; singleTaskIdsSavedBindings.length; x++) {" line="190" reason="&apos;x&apos; is already defined." />
    <issue char="30" evidence="        &#x9;&#x9;&#x9;for(var w = 0; w &lt; singleTaskIdsInsertedBinding.length; w++) {" line="191" reason="&apos;w&apos; is already defined." />
    <issue char="26" evidence="        &#x9;&#x9;for(var x = 0; x &lt; singleTaskIdsInsertedBinding.length; x++) {" line="207" reason="&apos;x&apos; is already defined." />
    <issue char="30" evidence="        &#x9;&#x9;&#x9;for(var w = 0; w &lt; singleTaskIdsSavedBindings.length; w++) {" line="208" reason="&apos;w&apos; is already defined." />
    <issue char="29" evidence="        &#x9;&#x9;&#x9;if(equal == false) { //one item of smaller set not found in bigger set" line="215" reason="Use &apos;===&apos; to compare with &apos;false&apos;." />
    <issue char="21" evidence="&#x9;        if(equal == true) {" line="222" reason="Use &apos;===&apos; to compare with &apos;true&apos;." />
    <issue char="22" evidence="    &#x9;for(var index = 0; index &lt; elementIds.length; index++) {" line="228" reason="&apos;index&apos; is already defined." />
    <issue char="52" evidence="&#x9;&#x9;    &#x9;separations = separations.substring((separations.indexOf(&apos;,&apos;)) + 1);" line="251" reason="Parens are not needed here." />
    <issue char="24" evidence="    &#x9;&#x9;} else if(l == 0) { //ignore totalCount" line="252" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="52" evidence="    &#x9;&#x9;&#x9;separations = separations.substring((separations.indexOf(&apos;,&apos;)) + 1);" line="253" reason="Parens are not needed here." />
    <issue char="52" evidence="    &#x9;&#x9;&#x9;separations = separations.substring((separations.indexOf(&apos;&quot;&apos;)) + 1);" line="255" reason="Parens are not needed here." />
    <issue char="52" evidence="    &#x9;&#x9;&#x9;separations = separations.substring((separations.indexOf(&apos;,&apos;)) + 1);" line="258" reason="Parens are not needed here." />
    <issue char="52" evidence="    &#x9;&#x9;boundTaskIds[q] = separations.substring((separations.indexOf(&apos;&quot;&apos;)) + 1);" line="263" reason="Parens are not needed here." />
    <issue char="62" evidence="    &#x9;&#x9;separatedTasksCopy = separatedTasksCopy.substring((separatedTasksCopy.indexOf(&apos;;&apos;))+2);" line="280" reason="Parens are not needed here." />
    <issue char="68" evidence="        &#x9;&#x9;boundTaskIds[index] = boundTaskIds[index].substring((boundTaskIds[index].indexOf(&apos;;&apos;))+2);" line="289" reason="Parens are not needed here." />
    <issue char="33" evidence="        &#x9;&#x9;&#x9;if(duplicate == true) { //two items of set 1 found in set 2 --&gt; contradicting" line="307" reason="Use &apos;===&apos; to compare with &apos;true&apos;." />
    <issue char="26" evidence="        &#x9;&#x9;for(var x = 0; x &lt; singleTaskIdsInsertedSeparation.length; x++) {" line="312" reason="&apos;x&apos; is already defined." />
    <issue char="30" evidence="        &#x9;&#x9;&#x9;for(var w = 0; w &lt; singleTaskIdsSavedSeparations.length; w++) {" line="313" reason="&apos;w&apos; is already defined." />
    <issue char="33" evidence="        &#x9;&#x9;&#x9;if(duplicate == true) { //two items of set 1 found in set 2 --&gt; contradicting" line="323" reason="Use &apos;===&apos; to compare with &apos;true&apos;." />
    <issue char="25" evidence="&#x9;        if(duplicate == true) { //entry does exist, delete?" line="329" reason="Use &apos;===&apos; to compare with &apos;true&apos;." />
    <issue char="29" evidence="&#x9;&#x9;&#x9;&#x9;if(bodDelete == true) {" line="331" reason="Use &apos;===&apos; to compare with &apos;true&apos;." />
    <issue char="66" evidence="    &#x9;&#x9;savedBindingsData[0] = savedBindingsData[0].substring((savedBindingsData[0].indexOf(&apos;:&apos;))+2);" line="347" reason="Parens are not needed here." />
    <issue char="53" evidence="&#x9;&#x9;var totalCount = parseInt(bindings.substring((bindings.indexOf(&apos;:&apos;)) + 1));" line="362" reason="Parens are not needed here." />
    <issue char="25" evidence="&#x9;&#x9;var totalCount = parseInt(bindings.substring((bindings.indexOf(&apos;:&apos;)) + 1));" line="362" reason="Missing radix parameter." />
    <issue char="40" evidence="&#x9;&#x9;&#x9;temp = bindings.substring(0,(bindings.indexOf(&apos;&quot;&apos;)) + 1); //{bodId:&quot;" line="368" reason="Parens are not needed here." />
    <issue char="42" evidence="&#x9;&#x9;&#x9;bindings = bindings.substring((bindings.indexOf(&apos;&quot;&apos;)) + 1); //{bodId:&quot;" line="369" reason="Parens are not needed here." />
    <issue char="18" evidence="&#x9;&#x9;&#x9;while(parseInt(bindings) != elementId) {" line="370" reason="Missing radix parameter." />
    <issue char="74" evidence="&#x9;&#x9;&#x9;&#x9;keptBindings = keptBindings + temp + bindings.substring(0,(bindings.indexOf(&apos;{&apos;)) - 2); //&apos;id&apos;&quot;, BoundTasks:&quot;task_a; task_b&quot;}" line="371" reason="Parens are not needed here." />
    <issue char="74" evidence="" line="371" reason="Too many errors. (72% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\bpmnResourcesBoDShow.js">
    <issue char="17" evidence="if (!ORYX.Plugins) " line="21" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="    ORYX.Plugins = new Object();" line="22" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="    ORYX.Plugins = new Object();" line="22" reason="Use the object literal notation {}." />
    <issue char="47" evidence="&#x9;&#x9;if(!(task instanceof ORYX.Core.Shape)) return;" line="63" reason="Expected &apos;{&apos; and instead saw &apos;return&apos;." />
    <issue char="47" evidence="&#x9;&#x9;if(!(task instanceof ORYX.Core.Shape)) return;" line="74" reason="Expected &apos;{&apos; and instead saw &apos;return&apos;." />
    <issue char="52" evidence="&#x9;&#x9;if(task.properties[&quot;oryx-bindingsofduties&quot;] != &quot;&quot;) {" line="179" reason="Use &apos;!==&apos; to compare with &apos;&apos;." />
    <issue char="48" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;taskIds = taskIds.substring((taskIds.indexOf(&apos;;&apos;)) + 2);" line="188" reason="Parens are not needed here." />
    <issue char="20" evidence="&#x9;&#x9;}.bind(this))" line="218" reason="Line breaking error &apos;)&apos;." />
    <issue char="21" evidence="&#x9;&#x9;}.bind(this))" line="218" reason="Missing semicolon." />
    <issue char="20" evidence="&#x9;&#x9;}.bind(this))" line="227" reason="Line breaking error &apos;)&apos;." />
    <issue char="21" evidence="&#x9;&#x9;}.bind(this))" line="227" reason="Missing semicolon." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\bpmnResourcesSoDAdd.js">
    <issue char="17" evidence="if (!ORYX.Plugins) " line="21" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="    ORYX.Plugins = new Object();" line="22" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="    ORYX.Plugins = new Object();" line="22" reason="Use the object literal notation {}." />
    <issue char="57" evidence="&#x9;&#x9;&#x9;&#x9;if(taskElements[i].properties[&quot;oryx-id&quot;] == &quot;&quot;) {" line="63" reason="Use &apos;===&apos; to compare with &apos;&apos;." />
    <issue char="21" evidence="    &#x9;&#x9;&#x9;if(i == 0) { //get ids of tasks to be separated" line="66" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="79" evidence="        &#x9;if(taskElements[taskCounter].properties[&quot;oryx-separationofduties&quot;] != &quot;&quot;) {" line="82" reason="Use &apos;!==&apos; to compare with &apos;&apos;." />
    <issue char="44" evidence="        &#x9;&#x9;if (savedSeparationsData[3] == true) {" line="84" reason="Use &apos;===&apos; to compare with &apos;true&apos;." />
    <issue char="77" evidence="        &#x9;if(taskElements[taskCounter].properties[&quot;oryx-bindingsofduties&quot;] != (&quot;&quot;)) {" line="93" reason="Use &apos;!==&apos; to compare with &apos;&apos;." />
    <issue char="38" evidence="&#x9;        &#x9;if (savedBindingsData == true) {" line="95" reason="Use &apos;===&apos; to compare with &apos;true&apos;." />
    <issue char="63" evidence="    &#x9;&#x9;&#x9;elementIds[m] = parseInt(separations.substring((separations.indexOf(&apos;&quot;&apos;)) + 1));" line="125" reason="Parens are not needed here." />
    <issue char="32" evidence="    &#x9;&#x9;&#x9;elementIds[m] = parseInt(separations.substring((separations.indexOf(&apos;&quot;&apos;)) + 1));" line="125" reason="Missing radix parameter." />
    <issue char="52" evidence="&#x9;&#x9;    &#x9;separations = separations.substring((separations.indexOf(&apos;,&apos;)) + 1);" line="127" reason="Parens are not needed here." />
    <issue char="24" evidence="    &#x9;&#x9;} else if(j == 0) { //get total count as integer" line="128" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="60" evidence="    &#x9;&#x9;&#x9;totalCount = parseInt(separations.substring((separations.indexOf(&apos;:&apos;)) + 1));" line="129" reason="Parens are not needed here." />
    <issue char="29" evidence="    &#x9;&#x9;&#x9;totalCount = parseInt(separations.substring((separations.indexOf(&apos;:&apos;)) + 1));" line="129" reason="Missing radix parameter." />
    <issue char="52" evidence="    &#x9;&#x9;&#x9;separations = separations.substring((separations.indexOf(&apos;,&apos;)) + 1);" line="130" reason="Parens are not needed here." />
    <issue char="52" evidence="    &#x9;&#x9;&#x9;separations = separations.substring((separations.indexOf(&apos;&quot;&apos;)) + 1);" line="132" reason="Parens are not needed here." />
    <issue char="52" evidence="    &#x9;&#x9;&#x9;separations = separations.substring((separations.indexOf(&apos;,&apos;)) + 1);" line="135" reason="Parens are not needed here." />
    <issue char="47" evidence="    &#x9;&#x9;taskIds[n] = separations.substring((separations.indexOf(&apos;&quot;&apos;)) + 1);" line="140" reason="Parens are not needed here." />
    <issue char="62" evidence="    &#x9;&#x9;separatedTasksCopy = separatedTasksCopy.substring((separatedTasksCopy.indexOf(&apos;;&apos;))+2);" line="158" reason="Parens are not needed here." />
    <issue char="58" evidence="        &#x9;&#x9;taskIds[index] = taskIds[index].substring((taskIds[index].indexOf(&apos;;&apos;))+2);" line="169" reason="Parens are not needed here." />
    <issue char="29" evidence="        &#x9;&#x9;&#x9;if(equal == false) { //one item of set 1 not found in set 2" line="185" reason="Use &apos;===&apos; to compare with &apos;false&apos;." />
    <issue char="26" evidence="        &#x9;&#x9;for(var x = 0; x &lt; singleTaskIdsSavedSeparations.length; x++) {" line="190" reason="&apos;x&apos; is already defined." />
    <issue char="30" evidence="        &#x9;&#x9;&#x9;for(var w = 0; w &lt; singleTaskIdsInsertedSeparation.length; w++) {" line="191" reason="&apos;w&apos; is already defined." />
    <issue char="26" evidence="        &#x9;&#x9;for(var x = 0; x &lt; singleTaskIdsInsertedSeparation.length; x++) {" line="207" reason="&apos;x&apos; is already defined." />
    <issue char="30" evidence="        &#x9;&#x9;&#x9;for(var w = 0; w &lt; singleTaskIdsSavedSeparations.length; w++) {" line="208" reason="&apos;w&apos; is already defined." />
    <issue char="29" evidence="        &#x9;&#x9;&#x9;if(equal == false) { //one item of smaller set not found in bigger set" line="215" reason="Use &apos;===&apos; to compare with &apos;false&apos;." />
    <issue char="21" evidence="&#x9;        if(equal == true) {" line="222" reason="Use &apos;===&apos; to compare with &apos;true&apos;." />
    <issue char="22" evidence="    &#x9;for(var index = 0; index &lt; elementIds.length; index++) {" line="228" reason="&apos;index&apos; is already defined." />
    <issue char="46" evidence="&#x9;&#x9;    &#x9;bindings = bindings.substring((bindings.indexOf(&apos;,&apos;)) + 1);" line="251" reason="Parens are not needed here." />
    <issue char="24" evidence="    &#x9;&#x9;} else if(l == 0) { //ignore totalCount" line="252" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="46" evidence="    &#x9;&#x9;&#x9;bindings = bindings.substring((bindings.indexOf(&apos;,&apos;)) + 1);" line="253" reason="Parens are not needed here." />
    <issue char="46" evidence="    &#x9;&#x9;&#x9;bindings = bindings.substring((bindings.indexOf(&apos;&quot;&apos;)) + 1);" line="255" reason="Parens are not needed here." />
    <issue char="46" evidence="    &#x9;&#x9;&#x9;bindings = bindings.substring((bindings.indexOf(&apos;,&apos;)) + 1);" line="258" reason="Parens are not needed here." />
    <issue char="49" evidence="    &#x9;&#x9;boundTaskIds[q] = bindings.substring((bindings.indexOf(&apos;&quot;&apos;)) + 1);" line="263" reason="Parens are not needed here." />
    <issue char="54" evidence="    &#x9;&#x9;boundTasksCopy = boundTasksCopy.substring((boundTasksCopy.indexOf(&apos;;&apos;))+2);" line="280" reason="Parens are not needed here." />
    <issue char="68" evidence="        &#x9;&#x9;boundTaskIds[index] = boundTaskIds[index].substring((boundTaskIds[index].indexOf(&apos;;&apos;))+2);" line="289" reason="Parens are not needed here." />
    <issue char="33" evidence="        &#x9;&#x9;&#x9;if(duplicate == true) { //two items of set 1 found in set 2 --&gt; contradicting" line="307" reason="Use &apos;===&apos; to compare with &apos;true&apos;." />
    <issue char="26" evidence="        &#x9;&#x9;for(var x = 0; x &lt; singleTaskIdsInsertedBinding.length; x++) {" line="312" reason="&apos;x&apos; is already defined." />
    <issue char="30" evidence="        &#x9;&#x9;&#x9;for(var w = 0; w &lt; singleTaskIdsSavedBinding.length; w++) {" line="313" reason="&apos;w&apos; is already defined." />
    <issue char="33" evidence="        &#x9;&#x9;&#x9;if(duplicate == true) { //two items of set 1 found in set 2 --&gt; contradicting" line="323" reason="Use &apos;===&apos; to compare with &apos;true&apos;." />
    <issue char="25" evidence="&#x9;        if(duplicate == true) { //entry does exist, delete?" line="329" reason="Use &apos;===&apos; to compare with &apos;true&apos;." />
    <issue char="29" evidence="&#x9;&#x9;&#x9;&#x9;if(bodDelete == true) {" line="331" reason="Use &apos;===&apos; to compare with &apos;true&apos;." />
    <issue char="72" evidence="    &#x9;&#x9;savedSeparationsData[0] = savedSeparationsData[0].substring((savedSeparationsData[0].indexOf(&apos;:&apos;))+2);" line="347" reason="Parens are not needed here." />
    <issue char="56" evidence="&#x9;&#x9;var totalCount = parseInt(separations.substring((separations.indexOf(&apos;:&apos;)) + 1));" line="362" reason="Parens are not needed here." />
    <issue char="25" evidence="&#x9;&#x9;var totalCount = parseInt(separations.substring((separations.indexOf(&apos;:&apos;)) + 1));" line="362" reason="Missing radix parameter." />
    <issue char="43" evidence="&#x9;&#x9;&#x9;temp = separations.substring(0,(separations.indexOf(&apos;&quot;&apos;)) + 1); //{sodId:&quot;" line="368" reason="Parens are not needed here." />
    <issue char="48" evidence="&#x9;&#x9;&#x9;separations = separations.substring((separations.indexOf(&apos;&quot;&apos;)) + 1); //{sodId:&quot;" line="369" reason="Parens are not needed here." />
    <issue char="18" evidence="&#x9;&#x9;&#x9;while(parseInt(separations) != elementId) {" line="370" reason="Missing radix parameter." />
    <issue char="83" evidence="&#x9;&#x9;&#x9;&#x9;keptSeparations = keptSeparations + temp + separations.substring(0,(separations.indexOf(&apos;{&apos;)) - 2); //&apos;id&apos;&quot;, SeparatedTasks:&quot;task_a; task_b&quot;}" line="371" reason="Parens are not needed here." />
    <issue char="83" evidence="" line="371" reason="Too many errors. (72% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\bpmnResourcesSoDShow.js">
    <issue char="17" evidence="if (!ORYX.Plugins) " line="21" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="    ORYX.Plugins = new Object();" line="22" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="    ORYX.Plugins = new Object();" line="22" reason="Use the object literal notation {}." />
    <issue char="47" evidence="&#x9;&#x9;if(!(task instanceof ORYX.Core.Shape)) return;" line="63" reason="Expected &apos;{&apos; and instead saw &apos;return&apos;." />
    <issue char="47" evidence="&#x9;&#x9;if(!(task instanceof ORYX.Core.Shape)) return;" line="74" reason="Expected &apos;{&apos; and instead saw &apos;return&apos;." />
    <issue char="54" evidence="&#x9;&#x9;if(task.properties[&quot;oryx-separationofduties&quot;] != &quot;&quot;) {" line="179" reason="Use &apos;!==&apos; to compare with &apos;&apos;." />
    <issue char="48" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;taskIds = taskIds.substring((taskIds.indexOf(&apos;;&apos;)) + 2);" line="188" reason="Parens are not needed here." />
    <issue char="20" evidence="&#x9;&#x9;}.bind(this))" line="218" reason="Line breaking error &apos;)&apos;." />
    <issue char="21" evidence="&#x9;&#x9;}.bind(this))" line="218" reason="Missing semicolon." />
    <issue char="20" evidence="&#x9;&#x9;}.bind(this))" line="227" reason="Line breaking error &apos;)&apos;." />
    <issue char="21" evidence="&#x9;&#x9;}.bind(this))" line="227" reason="Missing semicolon." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\bpmnplus2bpel4chor.js">
    <issue char="16" evidence="if(!ORYX.Plugins)" line="23" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Use the object literal notation {}." />
    <issue char="49" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (list == undefined) {" line="117" reason="Use &apos;===&apos; to compare with &apos;undefined&apos;." />
    <issue char="55" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;list = new Array();" line="118" reason="Use the array literal notation []." />
    <issue char="35" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;var name = null" line="128" reason="Missing semicolon." />
    <issue char="38" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var shape = list[j];" line="133" reason="&apos;shape&apos; is already defined." />
    <issue char="37" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (name == undefined) {" line="134" reason="Use &apos;===&apos; to compare with &apos;undefined&apos;." />
    <issue char="48" evidence="&#x9;&#x9;&#x9;if (edge.getIncomingShapes().size() == 0) {" line="186" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="55" evidence="&#x9;&#x9;&#x9;} else if (edge.getOutgoingShapes().size() == 0) {" line="190" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="15" evidence="&#x9;&#x9;if (id == &quot;&quot;) {" line="222" reason="Use &apos;===&apos; to compare with &apos;&apos;." />
    <issue char="26" evidence="&#x9;&#x9;if (queryLanguage != &quot;&quot;) {" line="240" reason="Use &apos;!==&apos; to compare with &apos;&apos;." />
    <issue char="31" evidence="&#x9;&#x9;if (expressionLanguage != &quot;&quot;) {" line="245" reason="Use &apos;!==&apos; to compare with &apos;&apos;." />
    <issue char="9" evidence="&#x9;&#x9;}" line="284" reason="Missing semicolon." />
    <issue char="21" evidence="&#x9;&#x9;if (curError == 0) {" line="320" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="27" evidence="&#x9;&#x9;&#x9;resultObject = eval(resultString);" line="348" reason="eval is evil." />
    <issue char="28" evidence="&#x9;&#x9;if (version != &quot;1.0&quot;)" line="354" reason="Line breaking error &apos;)&apos;." />
    <issue char="12" evidence="&#x9;&#x9;&#x9;Ext.Msg.alert(&quot;Wrong version &quot; + version + &quot;. Converting nevertheless.&quot;);" line="355" reason="Expected &apos;{&apos; and instead saw &apos;Ext&apos;." />
    <issue char="60" evidence="&#x9;&#x9;if ((!resultObject.res) || (resultObject.res.length == 0)) {" line="357" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="43" evidence="            &#x9;if (error.id == &quot;undefined&quot;)" line="362" reason="Line breaking error &apos;)&apos;." />
    <issue char="20" evidence="            &#x9;&#x9;return;" line="363" reason="Expected &apos;{&apos; and instead saw &apos;return&apos;." />
    <issue char="38" evidence="            &#x9;&#x9;&#x9;if (processId == &quot;&quot;) {" line="370" reason="Use &apos;===&apos; to compare with &apos;&apos;." />
    <issue char="16" evidence="&#x9;&#x9;&#x9;new Ajax.Request(source, {" line="406" reason="&apos;new&apos; should not be used as a statement." />
    <issue char="16" evidence="" line="406" reason="Stopping, unable to continue. (77% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\bpmnplusLayout.js">
    <issue char="16" evidence="if(!ORYX.Plugins)" line="27" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="&#x9;ORYX.Plugins = new Object();" line="28" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="28" reason="Use the object literal notation {}." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\bpmnplusSerialization.js">
    <issue char="16" evidence="if(!ORYX.Plugins)" line="23" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Use the object literal notation {}." />
    <issue char="22" evidence="&#x9;&#x9;if (processId == &quot;&quot;) {" line="71" reason="Use &apos;===&apos; to compare with &apos;&apos;." />
    <issue char="36" evidence="&#x9;&#x9;while(parent.getParentShape != undefined) {" line="99" reason="Use &apos;!==&apos; to compare with &apos;undefined&apos;." />
    <issue char="23" evidence="&#x9;&#x9;&#x9;&#x9;if (id == &quot;&quot;) {" line="108" reason="Use &apos;===&apos; to compare with &apos;&apos;." />
    <issue char="27" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;if (id == undefined) {" line="110" reason="Use &apos;===&apos; to compare with &apos;undefined&apos;." />
    <issue char="27" evidence="&#x9;&#x9;&#x9;&#x9;if (poolId == &quot;&quot;) {" line="135" reason="Use &apos;===&apos; to compare with &apos;&apos;." />
    <issue char="31" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;if (poolId == undefined) {" line="137" reason="Use &apos;===&apos; to compare with &apos;undefined&apos;." />
    <issue char="34" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;if (processId == &quot;&quot;) {" line="151" reason="Use &apos;===&apos; to compare with &apos;&apos;." />
    <issue char="36" evidence="&#x9;&#x9;while(parent.getParentShape != undefined) {" line="184" reason="Use &apos;!==&apos; to compare with &apos;undefined&apos;." />
    <issue char="27" evidence="&#x9;&#x9;&#x9;&#x9;if (poolId == &quot;&quot;) {" line="196" reason="Use &apos;===&apos; to compare with &apos;&apos;." />
    <issue char="31" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;if (poolId == undefined) {" line="198" reason="Use &apos;===&apos; to compare with &apos;undefined&apos;." />
    <issue char="21" evidence="&#x9;&#x9;if (attached != undefined) {" line="241" reason="Use &apos;!==&apos; to compare with &apos;undefined&apos;." />
    <issue char="27" evidence="&#x9;&#x9;&#x9;if (attachedId == &quot;&quot;) {" line="243" reason="Use &apos;===&apos; to compare with &apos;&apos;." />
    <issue char="27" evidence="&#x9;&#x9;&#x9;if (attachedId != undefined) {" line="246" reason="Use &apos;!==&apos; to compare with &apos;undefined&apos;." />
    <issue char="35" evidence="&#x9;&#x9;&#x9;&#x9; &#x9;type:&quot;literal&quot;," line="292" reason="Extra comma." />
    <issue char="16" evidence="&#x9;&#x9;&#x9;&#x9;});" line="293" reason="Expected &apos;}&apos; and instead saw &apos;}&apos;." />
    <issue char="16" evidence="" line="293" reason="Stopping, unable to continue. (65% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\canvasResize.js">
    <issue char="23" evidence="    ORYX.Plugins = new Object();" line="23" reason="Use the object literal notation {}." />
    <issue char="12" evidence="&#x9;&#x9;new ORYX.Plugins.CanvasResizeButton( this.facade.getCanvas(), &quot;N&quot;, this.resize.bind(this));" line="36" reason="&apos;new&apos; should not be used as a statement." />
    <issue char="12" evidence="" line="36" reason="Stopping, unable to continue. (16% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\cpnsupport.js">
    <issue char="16" evidence="if(!ORYX.Plugins)" line="0" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="&#x9;ORYX.Plugins = new Object();" line="1" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="1" reason="Use the object literal notation {}." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\cpntoolsSupport.js">
    <issue char="16" evidence="if(!ORYX.Plugins)" line="0" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="&#x9;ORYX.Plugins = new Object();" line="1" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="1" reason="Use the object literal notation {}." />
    <issue char="12" evidence="&#x9;&#x9;new Ajax.Request(" line="124" reason="&apos;new&apos; should not be used as a statement." />
    <issue char="12" evidence="" line="124" reason="Stopping, unable to continue. (25% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\desynchronizabilityOverlay.js">
    <issue char="17" evidence="if (!ORYX.Plugins) " line="22" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="    ORYX.Plugins = new Object();" line="23" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="    ORYX.Plugins = new Object();" line="23" reason="Use the object literal notation {}." />
    <issue char="16" evidence="&#x9;&#x9;&#x9;new Ajax.Request(ORYX.CONFIG.DESYNCHRONIZABILITY_URL, {" line="68" reason="&apos;new&apos; should not be used as a statement." />
    <issue char="16" evidence="" line="68" reason="Stopping, unable to continue. (53% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\dockerCreation.js">
    <issue char="16" evidence="if(!ORYX.Plugins)" line="23" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Use the object literal notation {}." />
    <issue char="105" evidence="&#x9;&#x9;this.facade.registerOnEvent(ORYX.CONFIG.EVENT_DBLCLICK,function(){window.clearTimeout(this.timer)}.bind(this));" line="45" reason="Missing semicolon." />
    <issue char="104" evidence="&#x9;&#x9;this.facade.registerOnEvent(ORYX.CONFIG.EVENT_MOUSEUP,function(){window.clearTimeout(this.timer)}.bind(this));" line="49" reason="Missing semicolon." />
    <issue char="24" evidence="&#x9;    if(!options.edge)" line="136" reason="Line breaking error &apos;)&apos;." />
    <issue char="12" evidence="&#x9;        return;" line="137" reason="Expected &apos;{&apos; and instead saw &apos;return&apos;." />
    <issue char="26" evidence="&#x9;    var command = new commandClass(options.edge, options.docker, options.position, this.facade, options);    " line="164" reason="A constructor name should start with an uppercase letter." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\dragDocker.js">
    <issue char="16" evidence="if(!ORYX.Plugins)" line="23" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Use the object literal notation {}." />
    <issue char="24" evidence="&#x9;&#x9;&#x9;uiObj.hide()&#x9;" line="73" reason="Missing semicolon." />
    <issue char="14" evidence="&#x9;&#x9;&#x9;})" line="77" reason="Missing semicolon." />
    <issue char="24" evidence="&#x9;&#x9;&#x9;uiObj.show()&#x9;" line="88" reason="Missing semicolon." />
    <issue char="14" evidence="&#x9;&#x9;&#x9;})" line="92" reason="Missing semicolon." />
    <issue char="84" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;this.dockerTarget = uiObj.parent.dockers.last().getDockedShape()" line="133" reason="Missing semicolon." />
    <issue char="85" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;this.dockerSource = uiObj.parent.dockers.first().getDockedShape()" line="135" reason="Missing semicolon." />
    <issue char="77" evidence="&#x9;&#x9;&#x9;this.isStartDocker = this.docker.parent.dockers.first() === this.docker" line="144" reason="Line breaking error &apos;docker&apos;." />
    <issue char="83" evidence="&#x9;&#x9;&#x9;this.isStartDocker = this.docker.parent.dockers.first() === this.docker" line="144" reason="Missing semicolon." />
    <issue char="74" evidence="&#x9;&#x9;&#x9;this.isEndDocker = this.docker.parent.dockers.last() === this.docker" line="145" reason="Line breaking error &apos;docker&apos;." />
    <issue char="80" evidence="&#x9;&#x9;&#x9;this.isEndDocker = this.docker.parent.dockers.last() === this.docker" line="145" reason="Missing semicolon." />
    <issue char="52" evidence="&#x9;&#x9;&#x9;&#x9;this.docker.setDockedShape(undefined)" line="158" reason="Line breaking error &apos;)&apos;." />
    <issue char="53" evidence="&#x9;&#x9;&#x9;&#x9;this.docker.setDockedShape(undefined)" line="158" reason="Missing semicolon." />
    <issue char="118" evidence="&#x9;&#x9;&#x9;var option = {movedCallback: this.dockerMoved.bind(this), upCallback: this.dockerMovedFinished.bind(this)}" line="169" reason="Missing semicolon." />
    <issue char="56" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;this.docker.setDockedShape(undefined)" line="200" reason="Line breaking error &apos;)&apos;." />
    <issue char="57" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;this.docker.setDockedShape(undefined)" line="200" reason="Missing semicolon." />
    <issue char="66" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(highestParent instanceof ORYX.Core.Edge " line="235" reason="Line breaking error &apos;Edge&apos;." />
    <issue char="60" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;this.hideMagnets(this.lastUIObj)" line="278" reason="Missing semicolon." />
    <issue char="51" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;this.showMagnets(uiObj)" line="283" reason="Missing semicolon." />
    <issue char="76" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;this.lastUIObj ? this.hideMagnets(this.lastUIObj) : null;" line="295" reason="Expected an assignment or function call and instead saw an expression." />
    <issue char="72" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;return magnet.absoluteBounds().isIncluded(evPos)" line="303" reason="Missing semicolon." />
    <issue char="39" evidence="&#x9;&#x9;&#x9;var nearestX = minOffset + 1" line="316" reason="Line breaking error &apos;1&apos;." />
    <issue char="40" evidence="&#x9;&#x9;&#x9;var nearestX = minOffset + 1" line="316" reason="Missing semicolon." />
    <issue char="39" evidence="&#x9;&#x9;&#x9;var nearestY = minOffset + 1" line="317" reason="Line breaking error &apos;1&apos;." />
    <issue char="40" evidence="&#x9;&#x9;&#x9;var nearestY = minOffset + 1" line="317" reason="Missing semicolon." />
    <issue char="24" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;return" line="325" reason="Line breaking error &apos;return&apos;." />
    <issue char="30" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;return" line="325" reason="Missing semicolon." />
    <issue char="21" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;};" line="326" reason="Unnecessary semicolon." />
    <issue char="48" evidence="&#x9;&#x9;&#x9;&#x9;this.docker.parent.dockers.each((function(docker){" line="323" reason="Parens are not needed here." />
    <issue char="124" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;var previous = this.docker.parent.dockers[Math.max(this.docker.parent.dockers.indexOf(this.docker)-1, 0)]" line="346" reason="Line breaking error &apos;]&apos;." />
    <issue char="125" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;var previous = this.docker.parent.dockers[Math.max(this.docker.parent.dockers.indexOf(this.docker)-1, 0)]" line="346" reason="Missing semicolon." />
    <issue char="154" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;var next = this.docker.parent.dockers[Math.min(this.docker.parent.dockers.indexOf(this.docker)+1, this.docker.parent.dockers.length-1)]" line="347" reason="Line breaking error &apos;]&apos;." />
    <issue char="155" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;var next = this.docker.parent.dockers[Math.min(this.docker.parent.dockers.indexOf(this.docker)+1, this.docker.parent.dockers.length-1)]" line="347" reason="Missing semicolon." />
    <issue char="44" evidence="&#x9;&#x9;&#x9;this.hideMagnets(this.lastUIObj)" line="408" reason="Missing semicolon." />
    <issue char="49" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;(this.removedDockers||$H({})).each(function(d){" line="450" reason="Missing semicolon." />
    <issue char="49" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;(this.removedDockers||$H({})).each(function(d){" line="450" reason="Expected an identifier and instead saw &apos;.&apos;." />
    <issue char="49" evidence="" line="450" reason="Stopping, unable to continue. (82% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\dragdropresize.js">
    <issue char="16" evidence="if(!ORYX.Plugins) " line="23" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Use the object literal notation {}." />
    <issue char="13" evidence="&#x9;&#x9;this.containmentParentNode;&#x9;&#x9;&#x9;&#x9;// the current future parent node for the dragged shapes" line="46" reason="Expected an assignment or function call and instead saw an expression." />
    <issue char="102" evidence="&#x9;&#x9;if(!this.dragBounds || !this.currentShapes.member(uiObj) || !this.toMoveShapes.length) {return};" line="94" reason="Missing semicolon." />
    <issue char="103" evidence="&#x9;&#x9;if(!this.dragBounds || !this.currentShapes.member(uiObj) || !this.toMoveShapes.length) {return};" line="94" reason="Unnecessary semicolon." />
    <issue char="114" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;this.facade.raiseEvent({type:ORYX.CONFIG.EVENT_ARRANGEMENT_TOP, excludeCommand: true})&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;" line="180" reason="Missing semicolon." />
    <issue char="59" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;parent.add( this.docker.parent )" line="187" reason="Line breaking error &apos;)&apos;." />
    <issue char="60" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;parent.add( this.docker.parent )" line="187" reason="Missing semicolon." />
    <issue char="65" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;this.docker.bounds.centerMoveTo( pos )&#x9;&#x9;&#x9;&#x9;" line="192" reason="Line breaking error &apos;)&apos;." />
    <issue char="66" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;this.docker.bounds.centerMoveTo( pos )&#x9;&#x9;&#x9;&#x9;" line="192" reason="Missing semicolon." />
    <issue char="40" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;var commands = [new dockCommand(docker, position, this.containmentParentNode, this.facade)];" line="205" reason="A constructor name should start with an uppercase letter." />
    <issue char="26" evidence="&#x9;&#x9;&#x9;if (this.vLine)" line="225" reason="Line breaking error &apos;)&apos;." />
    <issue char="16" evidence="&#x9;&#x9;&#x9;&#x9;this.vLine.hide();" line="226" reason="Expected &apos;{&apos; and instead saw &apos;this&apos;." />
    <issue char="26" evidence="&#x9;&#x9;&#x9;if (this.hLine)" line="227" reason="Line breaking error &apos;)&apos;." />
    <issue char="16" evidence="&#x9;&#x9;&#x9;&#x9;this.hLine.hide();" line="228" reason="Expected &apos;{&apos; and instead saw &apos;this&apos;." />
    <issue char="37" evidence="&#x9;&#x9;if(!this.dragEnable) { return };" line="248" reason="Missing semicolon." />
    <issue char="39" evidence="&#x9;&#x9;if(!this.dragEnable) { return };" line="248" reason="Unnecessary semicolon." />
    <issue char="61" evidence="&#x9;&#x9;&#x9;y: Event.pointerY(event) - this.offSetPosition.y}" line="287" reason="Missing semicolon." />
    <issue char="26" evidence="&#x9;&#x9;&#x9;if (this.vLine)" line="298" reason="Line breaking error &apos;)&apos;." />
    <issue char="16" evidence="&#x9;&#x9;&#x9;&#x9;this.vLine.hide();" line="299" reason="Expected &apos;{&apos; and instead saw &apos;this&apos;." />
    <issue char="26" evidence="&#x9;&#x9;&#x9;if (this.hLine)" line="300" reason="Line breaking error &apos;)&apos;." />
    <issue char="16" evidence="&#x9;&#x9;&#x9;&#x9;this.hLine.hide();" line="301" reason="Expected &apos;{&apos; and instead saw &apos;this&apos;." />
    <issue char="45" evidence="&#x9;&#x9;position.x = Math.max( 0 , position.x)" line="309" reason="Line breaking error &apos;)&apos;." />
    <issue char="46" evidence="&#x9;&#x9;position.x = Math.max( 0 , position.x)" line="309" reason="Missing semicolon." />
    <issue char="45" evidence="&#x9;&#x9;position.y = Math.max( 0 , position.y)" line="310" reason="Line breaking error &apos;)&apos;." />
    <issue char="46" evidence="&#x9;&#x9;position.y = Math.max( 0 , position.y)" line="310" reason="Missing semicolon." />
    <issue char="93" evidence="&#x9;&#x9;position.x = Math.min( c.bounds.width() - this.dragBounds.width(), &#x9;&#x9;position.x)" line="314" reason="Line breaking error &apos;)&apos;." />
    <issue char="94" evidence="&#x9;&#x9;position.x = Math.min( c.bounds.width() - this.dragBounds.width(), &#x9;&#x9;position.x)" line="314" reason="Missing semicolon." />
    <issue char="91" evidence="&#x9;&#x9;position.y = Math.min( c.bounds.height() - this.dragBounds.height(), &#x9;position.y)&#x9;" line="315" reason="Line breaking error &apos;)&apos;." />
    <issue char="92" evidence="&#x9;&#x9;position.y = Math.min( c.bounds.height() - this.dragBounds.height(), &#x9;position.y)&#x9;" line="315" reason="Missing semicolon." />
    <issue char="153" evidence="&#x9;&#x9;var checkIfAttachable = this.toMoveShapes.length == 1 &amp;&amp; this.toMoveShapes[0] instanceof ORYX.Core.Node &amp;&amp; this.toMoveShapes[0].dockers.length &gt; 0" line="330" reason="Line breaking error &apos;0&apos;." />
    <issue char="154" evidence="&#x9;&#x9;var checkIfAttachable = this.toMoveShapes.length == 1 &amp;&amp; this.toMoveShapes[0] instanceof ORYX.Core.Node &amp;&amp; this.toMoveShapes[0].dockers.length &gt; 0" line="330" reason="Missing semicolon." />
    <issue char="78" evidence="&#x9;&#x9;checkIfAttachable&#x9;= checkIfAttachable &amp;&amp; underlyingNodes.length != 1" line="331" reason="Line breaking error &apos;1&apos;." />
    <issue char="79" evidence="&#x9;&#x9;checkIfAttachable&#x9;= checkIfAttachable &amp;&amp; underlyingNodes.length != 1" line="331" reason="Missing semicolon." />
    <issue char="109" evidence="&#x9;&#x9;&#x9;&#x9;underlyingNodes.all(function(node, index){return this._currentUnderlyingNodes[index] === node}.bind(this))) {" line="336" reason="Missing semicolon." />
    <issue char="12" evidence="&#x9;&#x9;&#x9;return" line="338" reason="Line breaking error &apos;return&apos;." />
    <issue char="18" evidence="&#x9;&#x9;&#x9;return" line="338" reason="Missing semicolon." />
    <issue char="104" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;(((node instanceof ORYX.Core.Node) || ((node instanceof ORYX.Core.Edge) &amp;&amp; !noEdges)) " line="434" reason="Line breaking error &apos;)&apos;." />
    <issue char="68" evidence="&#x9;&#x9;this.containmentParentNode = underlyingNodes.reverse().find((function(node) {" line="432" reason="Parens are not needed here." />
    <issue char="57" evidence="&#x9;&#x9;&#x9;this.isAddingAllowed = this.toMoveShapes.all((function(currentShape) {" line="457" reason="Parens are not needed here." />
    <issue char="36" evidence="&#x9;&#x9;if(!this.dragBounds) {return}" line="490" reason="Missing semicolon." />
    <issue char="28" evidence="&#x9;&#x9;if( this.dragBounds )" line="509" reason="Line breaking error &apos;)&apos;." />
    <issue char="12" evidence="&#x9;&#x9;&#x9;this.oldDragBounds = this.dragBounds.clone();" line="510" reason="Expected &apos;{&apos; and instead saw &apos;this&apos;." />
    <issue char="36" evidence="&#x9;&#x9;if(!this.dragBounds) {return}" line="520" reason="Missing semicolon." />
    <issue char="79" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;this.update(this.getOffset(this.newBounds, this.oldBounds))" line="556" reason="Missing semicolon." />
    <issue char="21" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;}" line="565" reason="Missing semicolon." />
    <issue char="80" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;.findAll(function(r){ return r instanceof ORYX.Core.Edge }.bind(this))" line="575" reason="Missing semicolon." />
    <issue char="93" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;.findAll(function(r){ return r instanceof ORYX.Core.Edge }.bind(this))" line="575" reason="Line breaking error &apos;)&apos;." />
    <issue char="94" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;.findAll(function(r){ return r instanceof ORYX.Core.Edge }.bind(this))" line="575" reason="Missing semicolon." />
    <issue char="94" evidence="" line="575" reason="Too many errors. (38% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\edit.js">
    <issue char="17" evidence="if (!ORYX.Plugins) " line="22" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="    ORYX.Plugins = new Object();" line="23" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="    ORYX.Plugins = new Object();" line="23" reason="Use the object literal notation {}." />
    <issue char="13" evidence="        if (!(ORYX.CONFIG.IS_TEMPLATE)) {" line="84" reason="Parens are not needed here." />
    <issue char="38" evidence="            if(isChildShapeOfAnother) return;" line="200" reason="Expected &apos;{&apos; and instead saw &apos;return&apos;." />
    <issue char="82" evidence="&#x9;&#x9;&#x9;&#x9;attached = attached.findAll(function(a){ return !shapes.include(a) });" line="207" reason="Missing semicolon." />
    <issue char="47" evidence="            if(shapesToConsider.include(edge)) return false;" line="218" reason="Expected &apos;{&apos; and instead saw &apos;return&apos;." />
    <issue char="55" evidence="            if(edge.getAllDockedShapes().size() === 0) return false; " line="220" reason="Expected &apos;{&apos; and instead saw &apos;return&apos;." />
    <issue char="28" evidence="} catch(e){ORYX.Log.error(e)}" line="242" reason="Missing semicolon." />
    <issue char="28" evidence="        if(selection.length == 0) return;" line="254" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="34" evidence="        if(selection.length == 0) return;" line="254" reason="Expected &apos;{&apos; and instead saw &apos;return&apos;." />
    <issue char="26" evidence="        if( will_update ) this.facade.updateSelection();" line="258" reason="Expected &apos;{&apos; and instead saw &apos;this&apos;." />
    <issue char="9" evidence="        }" line="272" reason="Missing semicolon." />
    <issue char="79" evidence="&#x9;&#x9;&#x9;&#x9;if (!outgoings[out.resourceId]){ outgoings[out.resourceId] = [] }" line="285" reason="Missing semicolon." />
    <issue char="53" evidence="&#x9;&#x9;&#x9;&#x9;outgoings[out.resourceId].push(shape)" line="286" reason="Missing semicolon." />
    <issue char="32" evidence="            if(shape.target &amp;&amp; !(childShapeResourceIds.include(shape.target.resourceId))){" line="297" reason="Parens are not needed here." />
    <issue char="59" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(shape.sourceRemoved === true &amp;&amp; i == 0&amp;&amp;docker.getDocker)){" line="339" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="30" evidence="&#x9;&#x9;&#x9;&#x9;   &#x9;if ((i == 0 &amp;&amp; docker.getDocker instanceof Function &amp;&amp; " line="346" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="25" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}" line="355" reason="Missing semicolon." />
    <issue char="58" evidence="                    if((shape.sourceRemoved === true &amp;&amp; i == 0&amp;&amp;docker.getDocker)){" line="375" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="81" evidence="            s.parentIndex = shape.getParentShape().getChildShapes().indexOf(shape)" line="437" reason="Line breaking error &apos;)&apos;." />
    <issue char="82" evidence="            s.parentIndex = shape.getParentShape().getChildShapes().indexOf(shape)" line="437" reason="Missing semicolon." />
    <issue char="104" evidence="            var incomingDockers = shape.getIncomingShapes().map(function(s){return s.getDockers().last()})" line="456" reason="Missing semicolon." />
    <issue char="105" evidence="            var incomingDockers = shape.getIncomingShapes().map(function(s){return s.getDockers().last()})" line="456" reason="Line breaking error &apos;)&apos;." />
    <issue char="106" evidence="            var incomingDockers = shape.getIncomingShapes().map(function(s){return s.getDockers().last()})" line="456" reason="Missing semicolon." />
    <issue char="105" evidence="            var outgoingDockers = shape.getOutgoingShapes().map(function(s){return s.getDockers().first()})" line="457" reason="Missing semicolon." />
    <issue char="106" evidence="            var outgoingDockers = shape.getOutgoingShapes().map(function(s){return s.getDockers().first()})" line="457" reason="Line breaking error &apos;)&apos;." />
    <issue char="107" evidence="            var outgoingDockers = shape.getOutgoingShapes().map(function(s){return s.getDockers().first()})" line="457" reason="Missing semicolon." />
    <issue char="27" evidence="}catch(e){ORYX.Log.error(e)}" line="467" reason="Missing semicolon." />
    <issue char="47" evidence="    &#x9;&#x9;var parent = (&quot;undefined&quot; != typeof(shape.parent) ?  this.facade.getCanvas().getChildShapeByResourceId(shape.parent.resourceId) : this.facade.getCanvas());            parent.add(shape, shape.parentIndex);" line="483" reason="Parens are not needed here." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\enforceabilityOverlay.js">
    <issue char="17" evidence="if (!ORYX.Plugins) " line="22" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="    ORYX.Plugins = new Object();" line="23" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="    ORYX.Plugins = new Object();" line="23" reason="Use the object literal notation {}." />
    <issue char="16" evidence="&#x9;&#x9;&#x9;new Ajax.Request(ORYX.CONFIG.ENFORCEABILITY_URL, {" line="68" reason="&apos;new&apos; should not be used as a statement." />
    <issue char="16" evidence="" line="68" reason="Stopping, unable to continue. (53% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\epc2bpmn.js">
    <issue char="17" evidence="if (!ORYX.Plugins) " line="23" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="    ORYX.Plugins = new Object();" line="24" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="    ORYX.Plugins = new Object();" line="24" reason="Use the object literal notation {}." />
    <issue char="55" evidence="&#x9;&#x9;if( !this.isBPMN1_0 &amp;&amp; !this.isBPMN1_1){ return }" line="50" reason="Missing semicolon." />
    <issue char="262" evidence="&#x9;&#x9;var waitingpanel = new Ext.Window({id:&apos;oryx-loading-panel_epc2bpmn&apos;,bodyStyle:&apos;padding: 8px&apos;,title:&apos;Oryx&apos;,width:230,height:55,modal:true,resizable:false,closable:false,frame:true,html:&apos;&lt;span style=&quot;font-size:11px;&quot;&gt;Please wait while importing...&lt;/span&gt;&apos;})" line="82" reason="Line breaking error &apos;)&apos;." />
    <issue char="263" evidence="&#x9;&#x9;var waitingpanel = new Ext.Window({id:&apos;oryx-loading-panel_epc2bpmn&apos;,bodyStyle:&apos;padding: 8px&apos;,title:&apos;Oryx&apos;,width:230,height:55,modal:true,resizable:false,closable:false,frame:true,html:&apos;&lt;span style=&quot;font-size:11px;&quot;&gt;Please wait while importing...&lt;/span&gt;&apos;})" line="82" reason="Missing semicolon." />
    <issue char="26" evidence="&#x9;&#x9;waitingpanel.show()" line="83" reason="Line breaking error &apos;)&apos;." />
    <issue char="27" evidence="&#x9;&#x9;waitingpanel.show()" line="83" reason="Missing semicolon." />
    <issue char="46" evidence="&#x9;&#x9;if( !options || !options.url ){ return }" line="85" reason="Missing semicolon." />
    <issue char="12" evidence="        new Ajax.Request( url , {" line="92" reason="&apos;new&apos; should not be used as a statement." />
    <issue char="12" evidence="" line="92" reason="Stopping, unable to continue. (10% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\epcLayouter.js">
    <issue char="9" evidence="if (!ORYX) " line="22" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="&#x9;ORYX = new Object();" line="23" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="15" evidence="&#x9;ORYX = new Object();" line="23" reason="Use the object literal notation {}." />
    <issue char="17" evidence="if (!ORYX.Plugins) " line="24" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="&#x9;ORYX.Plugins = new Object();" line="25" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="25" reason="Use the object literal notation {}." />
    <issue char="12" evidence="&#x9;&#x9;new Ajax.Request(ORYX.CONFIG.EPC_LAYOUTER, {" line="50" reason="&apos;new&apos; should not be used as a statement." />
    <issue char="12" evidence="" line="50" reason="Stopping, unable to continue. (28% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\epcSupport.js">
    <issue char="16" evidence="if(!ORYX.Plugins)" line="23" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Use the object literal notation {}." />
    <issue char="23" evidence="&#x9;&#x9;if (domContent == null) {" line="174" reason="Use &apos;===&apos; to compare with &apos;null&apos;." />
    <issue char="23" evidence="&#x9;&#x9;&#x9;return new String(&quot;Parse Error: \nThe given dom content is null.&quot;);" line="175" reason="Do not use the String function as a constructor." />
    <issue char="12" evidence="&#x9;&#x9;new Ajax.Request(source, {" line="179" reason="&apos;new&apos; should not be used as a statement." />
    <issue char="12" evidence="" line="179" reason="Stopping, unable to continue. (47% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\erdfSupport.js">
    <issue char="16" evidence="if(!ORYX.Plugins)" line="23" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Use the object literal notation {}." />
    <issue char="12" evidence="&#x9;&#x9;new Ajax.Request(url, {" line="115" reason="&apos;new&apos; should not be used as a statement." />
    <issue char="12" evidence="" line="115" reason="Stopping, unable to continue. (30% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\feedback.js">
    <issue char="17" evidence="if (!ORYX.Plugins) " line="21" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="    ORYX.Plugins = {};" line="22" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="16" evidence="if (!ORYX.Config)" line="24" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="&#x9;ORYX.Config = {};" line="25" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="1" evidence="}" line="32" reason="Missing semicolon." />
    <issue char="41" evidence="&#x9;&#x9;((data &amp;&amp; data.properties) || []).each(function(property){" line="46" reason="Missing semicolon." />
    <issue char="41" evidence="&#x9;&#x9;((data &amp;&amp; data.properties) || []).each(function(property){" line="46" reason="Expected an identifier and instead saw &apos;.&apos;." />
    <issue char="41" evidence="" line="46" reason="Stopping, unable to continue. (12% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\file.js">
    <issue char="17" evidence="if (!ORYX.Plugins) " line="22" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="    ORYX.Plugins = new Object();" line="23" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="    ORYX.Plugins = new Object();" line="23" reason="Use the object literal notation {}." />
    <issue char="13" evidence="&#x9;&#x9;if (!(ORYX.CONFIG.IS_TEMPLATE)) {" line="33" reason="Parens are not needed here." />
    <issue char="103" evidence="&#x9;&#x9;this.facade.registerOnEvent(ORYX.CONFIG.EVENT_UNDO_EXECUTE, function(){ this.changeDifference++ }.bind(this) );" line="63" reason="Missing semicolon." />
    <issue char="107" evidence="&#x9;&#x9;this.facade.registerOnEvent(ORYX.CONFIG.EVENT_EXECUTE_COMMANDS, function(){ this.changeDifference++ }.bind(this) );" line="64" reason="Missing semicolon." />
    <issue char="104" evidence="&#x9;&#x9;this.facade.registerOnEvent(ORYX.CONFIG.EVENT_UNDO_ROLLBACK, function(){ this.changeDifference-- }.bind(this) );" line="66" reason="Missing semicolon." />
    <issue char="42" evidence="&#x9;&#x9;&#x9;&#x9;reqURI = &apos;/backend/poem/&apos;+(location.hash.slice(1).replace(/^\/?/,&quot;&quot;).replace(/\/?$/,&quot;&quot;))+&quot;/self&quot;;" line="98" reason="Parens are not needed here." />
    <issue char="19" evidence="&#x9;&#x9;&#x9;var ss = this.facade.getStencilSets().values()[0]" line="133" reason="&apos;ss&apos; is already defined." />
    <issue char="60" evidence="&#x9;&#x9;&#x9;var ss = this.facade.getStencilSets().values()[0]" line="133" reason="Line breaking error &apos;]&apos;." />
    <issue char="61" evidence="&#x9;&#x9;&#x9;var ss = this.facade.getStencilSets().values()[0]" line="133" reason="Missing semicolon." />
    <issue char="133" evidence="&#x9;&#x9;&#x9;var defaultData = {title:ORYX.I18N.Save.newProcess, summary:&apos;&apos;, type:ss.title(), url: reqURI, namespace: ss.namespace() }" line="136" reason="Missing semicolon." />
    <issue char="33" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&lt;/form&gt;&apos;)" line="152" reason="Line breaking error &apos;)&apos;." />
    <issue char="34" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&lt;/form&gt;&apos;)" line="152" reason="Missing semicolon." />
    <issue char="50" evidence="&#x9;&#x9;&#x9;&#x9;var title &#x9;&#x9;= form.elements[&quot;title&quot;].value.strip();" line="157" reason="[&apos;title&apos;] is better written in dot notation." />
    <issue char="49" evidence="&#x9;&#x9;&#x9;&#x9;title &#x9;&#x9;&#x9;= title.length == 0 ? defaultData.title : title;" line="158" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="44" evidence="&#x9;&#x9;&#x9;&#x9;var summary = form.elements[&quot;summary&quot;].value.strip();&#x9;" line="163" reason="[&apos;summary&apos;] is better written in dot notation." />
    <issue char="45" evidence="&#x9;&#x9;&#x9;&#x9;summary &#x9;= summary.length == 0 ? defaultData.summary : summary;" line="164" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="49" evidence="&#x9;&#x9;&#x9;&#x9;var namespace&#x9;= form.elements[&quot;namespace&quot;].value.strip();" line="166" reason="[&apos;namespace&apos;] is better written in dot notation." />
    <issue char="52" evidence="&#x9;&#x9;&#x9;&#x9;namespace&#x9;&#x9;= namespace.length == 0 ? defaultData.namespace : namespace;" line="167" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="51" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;callback( $(&apos;edit_model&apos;) )&#x9;&#x9;&#x9;&#x9;&#x9;" line="188" reason="Missing semicolon." />
    <issue char="12" evidence="&#x9;&#x9;new Ajax.Request(url, {" line="214" reason="&apos;new&apos; should not be used as a statement." />
    <issue char="12" evidence="" line="214" reason="Stopping, unable to continue. (39% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\fileRepository.js">
    <issue char="69" evidence="&#x9;&#x9;&#x9;var parent = Ext.urlDecode(location.search.substring(1))[&quot;directory&quot;];" line="124" reason="[&apos;directory&apos;] is better written in dot notation." />
    <issue char="12" evidence="&#x9;&#x9;&#x9;&apos;&lt;/form&gt;&apos;" line="152" reason="Line breaking error &apos;)&apos;." />
    <issue char="84" evidence="&#x9;&#x9;&#x9;    &#x9;&#x9;modelData.description = $(&quot;edit_model_summary&quot;).value.strip()" line="170" reason="Line breaking error &apos;)&apos;." />
    <issue char="85" evidence="&#x9;&#x9;&#x9;    &#x9;&#x9;modelData.description = $(&quot;edit_model_summary&quot;).value.strip()" line="170" reason="Missing semicolon." />
    <issue char="16" evidence="&#x9;&#x9;&#x9;new Ajax.Request(ORYX.Config.SignavioFileRepositoryModelHandler, {" line="204" reason="&apos;new&apos; should not be used as a statement." />
    <issue char="16" evidence="" line="204" reason="Stopping, unable to continue. (75% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\fragmentRepository.js">
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="27" reason="Use the object literal notation {}." />
    <issue char="13" evidence="&#x9;&#x9;this._currentParent;" line="37" reason="Expected an assignment or function call and instead saw an expression." />
    <issue char="9" evidence="&#x9;&#x9;})" line="43" reason="Line breaking error &apos;)&apos;." />
    <issue char="10" evidence="&#x9;&#x9;})" line="43" reason="Missing semicolon." />
    <issue char="9" evidence="&#x9;&#x9;})" line="54" reason="Line breaking error &apos;)&apos;." />
    <issue char="10" evidence="&#x9;&#x9;})" line="54" reason="Missing semicolon." />
    <issue char="88" evidence="&#x9;&#x9;DragZone.beforeDragEnter = function(){this._lastOverElement = false; return true}.bind(this);" line="62" reason="Missing semicolon." />
    <issue char="20" evidence="&#x9;&#x9;&#x9;&#x9;var stencilSetNode" line="86" reason="Line breaking error &apos;stencilSetNode&apos;." />
    <issue char="34" evidence="&#x9;&#x9;&#x9;&#x9;var stencilSetNode" line="86" reason="Missing semicolon." />
    <issue char="42" evidence="&#x9;&#x9;&#x9;var proxy = dragZone.getProxy()" line="203" reason="Line breaking error &apos;)&apos;." />
    <issue char="43" evidence="&#x9;&#x9;&#x9;var proxy = dragZone.getProxy()" line="203" reason="Missing semicolon." />
    <issue char="65" evidence="&#x9;&#x9;&#x9;if(proxy.dropStatus == proxy.dropNotAllowed) { return }" line="204" reason="Missing semicolon." />
    <issue char="63" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;return (candidate instanceof ORYX.Core.Canvas " line="475" reason="Line breaking error &apos;Canvas&apos;." />
    <issue char="66" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;|| candidate instanceof ORYX.Core.Node" line="476" reason="Line breaking error &apos;Node&apos;." />
    <issue char="149" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (!(parentCandidate instanceof ORYX.Core.Canvas) &amp;&amp; parentCandidate.isPointOverOffset(coord.x, coord.y) &amp;&amp; this._canAttach == undefined) {" line="490" reason="Use &apos;===&apos; to compare with &apos;undefined&apos;." />
    <issue char="66" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;this._canAttach &#x9;= this._canAttach == false ? this._canAttach : undefined;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;" line="519" reason="Use &apos;===&apos; to compare with &apos;false&apos;." />
    <issue char="45" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if( this._canContain == undefined &amp;&amp; !this._canAttach) {" line="522" reason="Use &apos;===&apos; to compare with &apos;undefined&apos;." />
    <issue char="31" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var pr = dragZone.getProxy();" line="546" reason="&apos;pr&apos; is already defined." />
    <issue char="27" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;var pr = dragZone.getProxy();" line="553" reason="&apos;pr&apos; is already defined." />
    <issue char="24" evidence="&#x9;&#x9;&#x9;return false" line="560" reason="Missing semicolon." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\general\feedbackPlugin.js">
    <issue char="17" evidence="if (!ORYX.Plugins) " line="22" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="    ORYX.Plugins = {};" line="23" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="19" evidence="        if ((typeof(screen.width) != &quot;undefined&quot;) &amp;&amp; (screen.width &amp;&amp; screen.height)) " line="159" reason="Parens are not needed here." />
    <issue char="84" evidence="        if ((typeof(screen.width) != &quot;undefined&quot;) &amp;&amp; (screen.width &amp;&amp; screen.height)) " line="159" reason="Line breaking error &apos;)&apos;." />
    <issue char="12" evidence="            env += &quot;\n\nScreen Resolution: &quot; + screen.width + &apos;x&apos; + screen.height;" line="160" reason="Expected &apos;{&apos; and instead saw &apos;env&apos;." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\grouping.js">
    <issue char="16" evidence="if(!ORYX.Plugins)" line="23" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Use the object literal notation {}." />
    <issue char="89" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;group.all(function(grEl) { return selectedEl.member(grEl)})" line="63" reason="Missing semicolon." />
    <issue char="91" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;group.all(function(grEl) { return selectedEl.member(grEl)})" line="63" reason="Missing semicolon." />
    <issue char="82" evidence="&#x9;&#x9;&#x9;&#x9;return group.any(function(grEl) { return newSelection.member(grEl)})" line="74" reason="Missing semicolon." />
    <issue char="84" evidence="&#x9;&#x9;&#x9;&#x9;return group.any(function(grEl) { return newSelection.member(grEl)})" line="74" reason="Missing semicolon." />
    <issue char="47" evidence="&#x9;&#x9;this.selectedElements.push(newSelection)" line="78" reason="Line breaking error &apos;)&apos;." />
    <issue char="48" evidence="&#x9;&#x9;this.selectedElements.push(newSelection)" line="78" reason="Missing semicolon." />
    <issue char="91" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;return !group.any(function(grEl) { return selectedElements.member(grEl)})" line="102" reason="Missing semicolon." />
    <issue char="93" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;return !group.any(function(grEl) { return selectedElements.member(grEl)})" line="102" reason="Missing semicolon." />
    <issue char="9" evidence="&#x9;&#x9;})" line="116" reason="Line breaking error &apos;)&apos;." />
    <issue char="10" evidence="&#x9;&#x9;})" line="116" reason="Missing semicolon." />
    <issue char="26" evidence="&#x9;&#x9;var command = new commandClass(selectedElements, this.groups.clone(), this.setGroups.bind(this), this.facade);" line="118" reason="A constructor name should start with an uppercase letter." />
    <issue char="100" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;!group.all(function(grEl) { return selectedElements.member(grEl)})" line="138" reason="Missing semicolon." />
    <issue char="102" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;!group.all(function(grEl) { return selectedElements.member(grEl)})" line="138" reason="Missing semicolon." />
    <issue char="9" evidence="&#x9;&#x9;})" line="150" reason="Line breaking error &apos;)&apos;." />
    <issue char="10" evidence="&#x9;&#x9;})" line="150" reason="Missing semicolon." />
    <issue char="26" evidence="&#x9;&#x9;var command = new commandClass(selectedElements, this.groups.clone(), this.setGroups.bind(this), this.facade);" line="152" reason="A constructor name should start with an uppercase letter." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\ibpmn2bpmn.js">
    <issue char="16" evidence="if(!ORYX.Plugins)" line="23" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Use the object literal notation {}." />
    <issue char="12" evidence="&#x9;&#x9;new Ajax.Request(url, {" line="84" reason="&apos;new&apos; should not be used as a statement." />
    <issue char="12" evidence="" line="84" reason="Stopping, unable to continue. (29% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\jpdlSupport.js">
    <issue char="16" evidence="if(!ORYX.Plugins)" line="23" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Use the object literal notation {}." />
    <issue char="26" evidence="        window.setTimeout((function(){" line="99" reason="Parens are not needed here." />
    <issue char="12" evidence="&#x9;&#x9;new Ajax.Request(url, {" line="123" reason="&apos;new&apos; should not be used as a statement." />
    <issue char="12" evidence="" line="123" reason="Stopping, unable to continue. (35% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\jsonSupport.js">
    <issue char="17" evidence="if (!ORYX.Plugins) " line="23" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="    ORYX.Plugins = new Object();" line="24" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="    ORYX.Plugins = new Object();" line="24" reason="Use the object literal notation {}." />
    <issue char="13" evidence="        if (!(ORYX.CONFIG.IS_TEMPLATE)) {" line="46" reason="Parens are not needed here." />
    <issue char="16" evidence="        }, true)" line="149" reason="Missing semicolon." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\keysMove.js">
    <issue char="17" evidence="if (!ORYX.Plugins) " line="23" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="    ORYX.Plugins = new Object();" line="24" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="    ORYX.Plugins = new Object();" line="24" reason="Use the object literal notation {}." />
    <issue char="78" evidence="&#x9;&#x9;this.facade.setSelection(this.facade.getCanvas().getChildShapes(true))" line="141" reason="Missing semicolon." />
    <issue char="28" evidence="&#x9;&#x9;&#x9;&#x9;return false " line="175" reason="Missing semicolon." />
    <issue char="32" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;return false" line="182" reason="Missing semicolon." />
    <issue char="21" evidence="&#x9;&#x9;&#x9;}while(s = s.parent); " line="184" reason="Expected a conditional expression and instead saw an assignment." />
    <issue char="32" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;return shape" line="215" reason="Missing semicolon." />
    <issue char="70" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;dockers = dockers.without( shape.dockers.first() )" line="222" reason="Missing semicolon." />
    <issue char="69" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;dockers = dockers.without( shape.dockers.last() )" line="226" reason="Missing semicolon." />
    <issue char="30" evidence="&#x9;&#x9;&#x9;&#x9;return dockers&#x9;" line="229" reason="Missing semicolon." />
    <issue char="27" evidence="&#x9;&#x9;&#x9;&#x9;return null" line="232" reason="Missing semicolon." />
    <issue char="41" evidence="&#x9;&#x9;&#x9;if(selectionBounds[0]+p.x &lt; 0)" line="250" reason="Line breaking error &apos;)&apos;." />
    <issue char="16" evidence="&#x9;&#x9;&#x9;&#x9;p.x = -selectionBounds[0];" line="251" reason="Expected &apos;{&apos; and instead saw &apos;p&apos;." />
    <issue char="41" evidence="&#x9;&#x9;&#x9;if(selectionBounds[1]+p.y &lt; 0)" line="252" reason="Line breaking error &apos;)&apos;." />
    <issue char="16" evidence="&#x9;&#x9;&#x9;&#x9;p.y = -selectionBounds[1];" line="253" reason="Expected &apos;{&apos; and instead saw &apos;p&apos;." />
    <issue char="85" evidence="&#x9;&#x9;&#x9;if(selectionBounds[2]+p.x &gt; this.facade.getCanvas().bounds.lowerRight().x)" line="254" reason="Line breaking error &apos;)&apos;." />
    <issue char="16" evidence="&#x9;&#x9;&#x9;&#x9;p.x = this.facade.getCanvas().bounds.lowerRight().x - selectionBounds[2];" line="255" reason="Expected &apos;{&apos; and instead saw &apos;p&apos;." />
    <issue char="85" evidence="&#x9;&#x9;&#x9;if(selectionBounds[3]+p.y &gt; this.facade.getCanvas().bounds.lowerRight().y)" line="256" reason="Line breaking error &apos;)&apos;." />
    <issue char="16" evidence="&#x9;&#x9;&#x9;&#x9;p.y = this.facade.getCanvas().bounds.lowerRight().y - selectionBounds[3];" line="257" reason="Expected &apos;{&apos; and instead saw &apos;p&apos;." />
    <issue char="18" evidence="&#x9;&#x9;&#x9;if(p.x!=0 || p.y!=0) {" line="259" reason="Use &apos;!==&apos; to compare with &apos;0&apos;." />
    <issue char="28" evidence="&#x9;&#x9;&#x9;if(p.x!=0 || p.y!=0) {" line="259" reason="Use &apos;!==&apos; to compare with &apos;0&apos;." />
    <issue char="212" evidence="&#x9;&#x9;&#x9;&#x9;this.dockers = moveShapes.collect(function(shape){ return shape instanceof ORYX.Core.Controls.Docker ? {docker:shape, dockedShape:shape.getDockedShape(), refPoint:shape.referencePoint} : undefined }).compact();" line="273" reason="Missing semicolon." />
    <issue char="18" evidence="&#x9;&#x9;&#x9;&#x9;})" line="278" reason="Missing semicolon." />
    <issue char="18" evidence="&#x9;&#x9;&#x9;&#x9;})" line="285" reason="Missing semicolon." />
    <issue char="22" evidence="&#x9;&#x9;command = new undockEdgeCommand( shapes );" line="289" reason="A constructor name should start with an uppercase letter." />
    <issue char="5" evidence="&#x9;}," line="292" reason="Extra comma." />
    <issue char="0" evidence="});" line="325" reason="Expected &apos;}&apos; and instead saw &apos;}&apos;." />
    <issue char="0" evidence="" line="325" reason="Stopping, unable to continue. (99% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\labelLayout.js">
    <issue char="16" evidence="if(!ORYX.Plugins)" line="6" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="&#x9;ORYX.Plugins = new Object();" line="7" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="7" reason="Use the object literal notation {}." />
    <issue char="19" evidence="&#x9;if(this.canvas == false){" line="91" reason="Use &apos;===&apos; to compare with &apos;false&apos;." />
    <issue char="42" evidence="&#x9;if(this.myLabel &amp;&amp; this.myLabel._text != &quot;&quot;){&#x9;" line="104" reason="Use &apos;!==&apos; to compare with &apos;&apos;." />
    <issue char="30" evidence="&#x9;&#x9;if(this.labelSelected == true){&#x9;&#x9;&#x9;&#x9;" line="114" reason="Use &apos;===&apos; to compare with &apos;true&apos;." />
    <issue char="34" evidence="&#x9;&#x9;if(&#x9;this.labelSelected == false &amp;&amp; " line="158" reason="Use &apos;===&apos; to compare with &apos;false&apos;." />
    <issue char="27" evidence="&#x9;&#x9;if(&#x9;this.rotate == false &amp;&amp; " line="177" reason="Use &apos;===&apos; to compare with &apos;false&apos;." />
    <issue char="46" evidence="&#x9;&#x9;if(this.myLabel &amp;&amp; this.myLabel._text != &quot;&quot;){" line="216" reason="Use &apos;!==&apos; to compare with &apos;&apos;." />
    <issue char="26" evidence="&#x9;if(this.labelSelected == true){" line="233" reason="Use &apos;===&apos; to compare with &apos;true&apos;." />
    <issue char="19" evidence="&#x9;if(this.rotate == true) {" line="278" reason="Use &apos;===&apos; to compare with &apos;true&apos;." />
    <issue char="17" evidence="&#x9;&#x9;&#x9;this.State7;&#x9;" line="335" reason="Expected an assignment or function call and instead saw an expression." />
    <issue char="18" evidence="&#x9;if(myRotation == 0 || myRotation &lt; 45 &amp;&amp; myRotation &gt; 0 || myRotation == 360){" line="362" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="18" evidence="&#x9;if(myRotation == 0 || myRotation &lt; 360 &amp;&amp; myRotation &gt; 315 || myRotation == 360){" line="397" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="19" evidence="&#x9;if(this.rotate == false) {" line="429" reason="Use &apos;===&apos; to compare with &apos;false&apos;." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\loading.js">
    <issue char="23" evidence="    ORYX.Plugins = new Object();" line="24" reason="Use the object literal notation {}." />
    <issue char="23" evidence="&#x9;&#x9;if(options.text) " line="52" reason="Line breaking error &apos;)&apos;." />
    <issue char="12" evidence="&#x9;&#x9;&#x9;this.node.innerHTML = options.text + &quot;...&quot;;" line="53" reason="Expected &apos;{&apos; and instead saw &apos;this&apos;." />
    <issue char="12" evidence="&#x9;&#x9;&#x9;this.node.innerHTML = ORYX.I18N.Loading.waiting;" line="55" reason="Expected &apos;{&apos; and instead saw &apos;this&apos;." />
    <issue char="30" evidence="&#x9;&#x9;&#x9;window.setTimeout((function(){" line="85" reason="Parens are not needed here." />
    <issue char="1" evidence="}" line="93" reason="Missing semicolon." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\lolaPetriNetSoundnessChecker.js">
    <issue char="27" evidence="        if(!this.overlayIds) " line="27" reason="Line breaking error &apos;)&apos;." />
    <issue char="12" evidence="            return;" line="28" reason="Expected &apos;{&apos; and instead saw &apos;return&apos;." />
    <issue char="29" evidence="            shapes = [shapes]" line="74" reason="Missing semicolon." />
    <issue char="45" evidence="                if(!config.icon &amp;&amp; !this.icon)" line="124" reason="Line breaking error &apos;)&apos;." />
    <issue char="20" evidence="                    config.icon = CheckNode.UNKNOWN_STATUS;" line="125" reason="Expected &apos;{&apos; and instead saw &apos;config&apos;." />
    <issue char="34" evidence="                if(!plugin.marking)" line="149" reason="Line breaking error &apos;)&apos;." />
    <issue char="20" evidence="                    return;" line="150" reason="Expected &apos;{&apos; and instead saw &apos;return&apos;." />
    <issue char="33" evidence="                    if(placeShape)// place can be null if removed" line="154" reason="Line breaking error &apos;)&apos;." />
    <issue char="24" evidence="                        placeShape.setProperty(&quot;oryx-numberoftokens&quot;, 0);" line="155" reason="Expected &apos;{&apos; and instead saw &apos;placeShape&apos;." />
    <issue char="16" evidence="                for(place in plugin.marking){" line="152" reason="The body of a for in should be wrapped in an if statement to filter unwanted properties from the prototype." />
    <issue char="16" evidence="                for(place in marking){" line="165" reason="The body of a for in should be wrapped in an if statement to filter unwanted properties from the prototype." />
    <issue char="57" evidence="                    if(child &amp;&amp; child.itemCls === &apos;error&apos;)" line="175" reason="Line breaking error &apos;)&apos;." />
    <issue char="24" evidence="                        child.remove();" line="176" reason="Expected &apos;{&apos; and instead saw &apos;child&apos;." />
    <issue char="24" evidence="                        &quot;SE&quot; // position in south east" line="207" reason="Line breaking error &apos;)&apos;." />
    <issue char="27" evidence="                        }, (split[1])])," line="224" reason="Parens are not needed here." />
    <issue char="24" evidence="                        &quot;SE&quot; // position in south east" line="225" reason="Line breaking error &apos;)&apos;." />
    <issue char="38" evidence="                if(shapes.length === 0)" line="230" reason="Line breaking error &apos;)&apos;." />
    <issue char="20" evidence="                    return;" line="231" reason="Expected &apos;{&apos; and instead saw &apos;return&apos;." />
    <issue char="56" evidence="                if(! shapes[0] instanceof ORYX.Core.Node)" line="233" reason="Line breaking error &apos;)&apos;." />
    <issue char="20" evidence="                    shapes = plugin.getChildShapesByResourceIds(shapes)" line="234" reason="Expected &apos;{&apos; and instead saw &apos;shapes&apos;." />
    <issue char="70" evidence="                    shapes = plugin.getChildShapesByResourceIds(shapes)" line="234" reason="Line breaking error &apos;)&apos;." />
    <issue char="71" evidence="                    shapes = plugin.getChildShapesByResourceIds(shapes)" line="234" reason="Missing semicolon." />
    <issue char="57" evidence="                this.setIcon(this.deadTransitions.length == 0 ? CheckNode.OK_STATUS : CheckNode.ERROR_STATUS);" line="306" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="69" evidence="                this.setIcon(this.notParticipatingTransitions.length == 0 ? CheckNode.OK_STATUS : CheckNode.ERROR_STATUS);" line="326" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="43" evidence="        var service_tech_site_banner = new Object;" line="331" reason="Use the object literal notation {}." />
    <issue char="49" evidence="        var service_tech_site_banner = new Object;" line="331" reason="Missing &apos;()&apos; invoking a constructor." />
    <issue char="32" evidence="                    if(renderAll)// this expands all nodes so they&apos;re" line="382" reason="Line breaking error &apos;)&apos;." />
    <issue char="24" evidence="                        childNode.expand(true);" line="384" reason="Expected &apos;{&apos; and instead saw &apos;childNode&apos;." />
    <issue char="112" evidence="                        Ext.Msg.alert(&quot;Syntax Check&quot;, &quot;Some syntax errors have been found, please correct them!&quot;)" line="393" reason="Line breaking error &apos;)&apos;." />
    <issue char="113" evidence="                        Ext.Msg.alert(&quot;Syntax Check&quot;, &quot;Some syntax errors have been found, please correct them!&quot;)" line="393" reason="Missing semicolon." />
    <issue char="76" evidence="                                        if(shape.getIncomingShapes().length == 0 &amp;&amp; shape.getStencil().id().search(/Place/) &gt; -1){" line="488" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="76" evidence="                                        if(shape.getOutgoingShapes().length == 0 &amp;&amp; shape.getStencil().id().search(/Place/) &gt; -1){" line="511" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="74" evidence="                                        if(shape instanceof ORYX.Core.Node)" line="541" reason="Line breaking error &apos;)&apos;." />
    <issue char="44" evidence="                                            this.notParticipatingNodes.push(shape);" line="542" reason="Expected &apos;{&apos; and instead saw &apos;this&apos;." />
    <issue char="41" evidence="                                        };" line="565" reason="Unnecessary semicolon." />
    <issue char="62" evidence="                            livenessNode: new LivenessNode({})," line="597" reason="Extra comma." />
    <issue char="24" evidence="                        });" line="599" reason="Expected &apos;}&apos; and instead saw &apos;}&apos;." />
    <issue char="24" evidence="" line="599" reason="Stopping, unable to continue. (89% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\overlay.js">
    <issue char="17" evidence="if (!ORYX.Plugins) " line="44" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="    ORYX.Plugins = new Object();" line="45" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="    ORYX.Plugins = new Object();" line="45" reason="Use the object literal notation {}." />
    <issue char="55" evidence="&#x9;&#x9;this.styleNode = document.createElement(&apos;style&apos;)" line="62" reason="Line breaking error &apos;)&apos;." />
    <issue char="56" evidence="&#x9;&#x9;this.styleNode = document.createElement(&apos;style&apos;)" line="62" reason="Missing semicolon." />
    <issue char="62" evidence="&#x9;&#x9;this.styleNode.setAttributeNS(null, &apos;type&apos;, &apos;text/css&apos;)" line="63" reason="Line breaking error &apos;)&apos;." />
    <issue char="63" evidence="&#x9;&#x9;this.styleNode.setAttributeNS(null, &apos;type&apos;, &apos;text/css&apos;)" line="63" reason="Missing semicolon." />
    <issue char="78" evidence="&#x9;&#x9;document.getElementsByTagName(&apos;head&apos;)[0].appendChild( this.styleNode )" line="65" reason="Missing semicolon." />
    <issue char="85" evidence="&#x9;&#x9;&#x9;&#x9;!options.id&#x9;|| !options.id instanceof String || options.id.length == 0) { " line="84" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="20" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;return" line="86" reason="Line breaking error &apos;return&apos;." />
    <issue char="26" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;return" line="86" reason="Missing semicolon." />
    <issue char="59" evidence="&#x9;&#x9;&#x9;&#x9;if( !el instanceof ORYX.Core.Shape){ return }" line="102" reason="Missing semicolon." />
    <issue char="66" evidence="&#x9;&#x9;&#x9;&#x9;this.setAttributes( el.node , options.attributes )" line="104" reason="Missing semicolon." />
    <issue char="25" evidence="&#x9;&#x9;&#x9;}.bind(this))" line="106" reason="Missing semicolon." />
    <issue char="24" evidence="&#x9;&#x9;var isSVG = true" line="110" reason="Missing semicolon." />
    <issue char="20" evidence="&#x9;&#x9;&#x9;options[&quot;_temps&quot;] = []" line="118" reason="[&apos;_temps&apos;] is better written in dot notation." />
    <issue char="33" evidence="&#x9;&#x9;&#x9;options[&quot;_temps&quot;] = []" line="118" reason="Line breaking error &apos;]&apos;." />
    <issue char="34" evidence="&#x9;&#x9;&#x9;options[&quot;_temps&quot;] = []" line="118" reason="Missing semicolon." />
    <issue char="59" evidence="&#x9;&#x9;&#x9;&#x9;if( !el instanceof ORYX.Core.Shape){ return }" line="124" reason="Missing semicolon." />
    <issue char="30" evidence="&#x9;&#x9;&#x9;&#x9;var _temp = {}" line="126" reason="Missing semicolon." />
    <issue char="58" evidence="&#x9;&#x9;&#x9;&#x9;el.node.firstChild.appendChild( _temp.svg )&#x9;&#x9;" line="130" reason="Line breaking error &apos;)&apos;." />
    <issue char="59" evidence="&#x9;&#x9;&#x9;&#x9;el.node.firstChild.appendChild( _temp.svg )&#x9;&#x9;" line="130" reason="Missing semicolon." />
    <issue char="28" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;options[&apos;nodePosition&apos;] = &quot;START&quot;" line="134" reason="[&apos;nodePosition&apos;] is better written in dot notation." />
    <issue char="51" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;options[&apos;nodePosition&apos;] = &quot;START&quot;" line="134" reason="Missing semicolon." />
    <issue char="58" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;b = el.getDockers().first().bounds" line="149" reason="Missing semicolon." />
    <issue char="57" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;b = el.getDockers().last().bounds" line="151" reason="Missing semicolon." />
    <issue char="28" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;return" line="180" reason="Line breaking error &apos;return&apos;." />
    <issue char="34" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;return" line="180" reason="Missing semicolon." />
    <issue char="102" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;_temp.svg.setAttributeNS(null, &quot;transform&quot;, &quot;translate(&quot; + x + &quot;, &quot; + y + &quot;)&quot;)" line="187" reason="Missing semicolon." />
    <issue char="31" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;}.bind(this)" line="189" reason="Line breaking error &apos;)&apos;." />
    <issue char="32" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;}.bind(this)" line="189" reason="Missing semicolon." />
    <issue char="102" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;_temp.svg.setAttributeNS(null, &quot;transform&quot;, &quot;translate(&quot; + x + &quot;, &quot; + y + &quot;)&quot;)" line="207" reason="Missing semicolon." />
    <issue char="31" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;}.bind(this)" line="209" reason="Line breaking error &apos;)&apos;." />
    <issue char="32" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;}.bind(this)" line="209" reason="Missing semicolon." />
    <issue char="29" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;var point={x:0, y:0};" line="218" reason="&apos;point&apos; is already defined." />
    <issue char="102" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;_temp.svg.setAttributeNS(null, &quot;transform&quot;, &quot;translate(&quot; + x + &quot;, &quot; + y + &quot;)&quot;)" line="225" reason="Missing semicolon." />
    <issue char="31" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;}.bind(this)" line="227" reason="Line breaking error &apos;)&apos;." />
    <issue char="32" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;}.bind(this)" line="227" reason="Missing semicolon." />
    <issue char="44" evidence="&#x9;&#x9;&#x9;&#x9;options._temps.push( _temp )&#x9;" line="236" reason="Missing semicolon." />
    <issue char="25" evidence="&#x9;&#x9;&#x9;}.bind(this))" line="238" reason="Missing semicolon." />
    <issue char="85" evidence="&#x9;&#x9;&#x9;&#x9;!options.id&#x9;|| !options.id instanceof String || options.id.length == 0 ||" line="262" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="20" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;return" line="265" reason="Line breaking error &apos;return&apos;." />
    <issue char="26" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;return" line="265" reason="Missing semicolon." />
    <issue char="59" evidence="&#x9;&#x9;&#x9;&#x9;if( !el instanceof ORYX.Core.Shape){ return }" line="277" reason="Missing semicolon." />
    <issue char="48" evidence="&#x9;&#x9;&#x9;&#x9;this.deleteAttributes( el.node )" line="279" reason="Missing semicolon." />
    <issue char="65" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;tmp.svg.parentNode.removeChild( tmp.svg )" line="289" reason="Missing semicolon." />
    <issue char="77" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;tmp.element.bounds.unregisterCallback( tmp.callback )" line="295" reason="Missing semicolon." />
    <issue char="29" evidence="&#x9;&#x9;&#x9;&#x9;}.bind(this))" line="298" reason="Missing semicolon." />
    <issue char="67" evidence="&#x9;&#x9;var childs = this.getAllChilds( node.firstChild.firstChild )" line="321" reason="Line breaking error &apos;)&apos;." />
    <issue char="68" evidence="&#x9;&#x9;var childs = this.getAllChilds( node.firstChild.firstChild )" line="321" reason="Missing semicolon." />
    <issue char="68" evidence="" line="321" reason="Too many errors. (82% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\overlayexample.js">
    <issue char="17" evidence="if (!ORYX.Plugins) " line="23" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="    ORYX.Plugins = new Object();" line="24" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="    ORYX.Plugins = new Object();" line="24" reason="Use the object literal notation {}." />
    <issue char="27" evidence="&#x9;&#x9;&#x9;this.el = els[0]" line="64" reason="Line breaking error &apos;]&apos;." />
    <issue char="28" evidence="&#x9;&#x9;&#x9;this.el = els[0]" line="64" reason="Missing semicolon." />
    <issue char="39" evidence="&#x9;&#x9;&#x9;this.showOverlay( this.el )" line="65" reason="Missing semicolon." />
    <issue char="52" evidence="&#x9;&#x9;&#x9;this.callback = this.doMouseUp.bind(this)" line="72" reason="Line breaking error &apos;)&apos;." />
    <issue char="53" evidence="&#x9;&#x9;&#x9;this.callback = this.doMouseUp.bind(this)" line="72" reason="Missing semicolon." />
    <issue char="81" evidence="&#x9;&#x9;&#x9;this.facade.registerOnEvent(ORYX.CONFIG.EVENT_MOUSEUP, this.callback)" line="73" reason="Missing semicolon." />
    <issue char="82" evidence="&#x9;&#x9;&#x9;this.facade.unregisterOnEvent(ORYX.CONFIG.EVENT_MOUSEUP, this.callback)" line="75" reason="Line breaking error &apos;)&apos;." />
    <issue char="83" evidence="&#x9;&#x9;&#x9;this.facade.unregisterOnEvent(ORYX.CONFIG.EVENT_MOUSEUP, this.callback)" line="75" reason="Missing semicolon." />
    <issue char="39" evidence="&#x9;&#x9;&#x9;this.showOverlay( this.el )" line="84" reason="Missing semicolon." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\petriNetSoundnessChecker.js">
    <issue char="27" evidence="        if(!this.overlayIds) " line="28" reason="Line breaking error &apos;)&apos;." />
    <issue char="12" evidence="            return;" line="29" reason="Expected &apos;{&apos; and instead saw &apos;return&apos;." />
    <issue char="29" evidence="            shapes = [shapes]" line="75" reason="Missing semicolon." />
    <issue char="45" evidence="                if(!config.icon &amp;&amp; !this.icon)" line="125" reason="Line breaking error &apos;)&apos;." />
    <issue char="20" evidence="                    config.icon = CheckNode.UNKNOWN_STATUS;" line="126" reason="Expected &apos;{&apos; and instead saw &apos;config&apos;." />
    <issue char="34" evidence="                if(!plugin.marking)" line="150" reason="Line breaking error &apos;)&apos;." />
    <issue char="20" evidence="                    return;" line="151" reason="Expected &apos;{&apos; and instead saw &apos;return&apos;." />
    <issue char="33" evidence="                    if(placeShape)//place can be null if removed" line="155" reason="Line breaking error &apos;)&apos;." />
    <issue char="24" evidence="                        placeShape.setProperty(&quot;oryx-numberoftokens&quot;, 0);" line="156" reason="Expected &apos;{&apos; and instead saw &apos;placeShape&apos;." />
    <issue char="16" evidence="                for(place in plugin.marking){" line="153" reason="The body of a for in should be wrapped in an if statement to filter unwanted properties from the prototype." />
    <issue char="16" evidence="                for(place in marking){" line="166" reason="The body of a for in should be wrapped in an if statement to filter unwanted properties from the prototype." />
    <issue char="57" evidence="                    if(child &amp;&amp; child.itemCls === &apos;error&apos;)" line="176" reason="Line breaking error &apos;)&apos;." />
    <issue char="24" evidence="                        child.remove();" line="177" reason="Expected &apos;{&apos; and instead saw &apos;child&apos;." />
    <issue char="24" evidence="                        &quot;SE&quot; //position in south east" line="207" reason="Line breaking error &apos;)&apos;." />
    <issue char="38" evidence="                if(shapes.length === 0)" line="212" reason="Line breaking error &apos;)&apos;." />
    <issue char="20" evidence="                    return;" line="213" reason="Expected &apos;{&apos; and instead saw &apos;return&apos;." />
    <issue char="56" evidence="                if(! shapes[0] instanceof ORYX.Core.Node)" line="215" reason="Line breaking error &apos;)&apos;." />
    <issue char="20" evidence="                    shapes = plugin.getChildShapesByResourceIds(shapes)" line="216" reason="Expected &apos;{&apos; and instead saw &apos;shapes&apos;." />
    <issue char="70" evidence="                    shapes = plugin.getChildShapesByResourceIds(shapes)" line="216" reason="Line breaking error &apos;)&apos;." />
    <issue char="71" evidence="                    shapes = plugin.getChildShapesByResourceIds(shapes)" line="216" reason="Missing semicolon." />
    <issue char="41" evidence="                if(this.deadLocks.length == 0) return;" line="240" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="47" evidence="                if(this.deadLocks.length == 0) return;" line="240" reason="Expected &apos;{&apos; and instead saw &apos;return&apos;." />
    <issue char="51" evidence="                this.setIcon(this.deadLocks.length == 0 ? CheckNode.OK_STATUS : CheckNode.ERROR_STATUS);" line="248" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="64" evidence="                this.setText(&apos;There is &apos;+(this.deadLocks.length == 0 ? &apos;no&apos; : &apos;a&apos;)+&apos; path that leads to a deadlock.&apos;);" line="249" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="52" evidence="                if(node.improperTerminatings.length == 0) return;" line="262" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="58" evidence="                if(node.improperTerminatings.length == 0) return;" line="262" reason="Expected &apos;{&apos; and instead saw &apos;return&apos;." />
    <issue char="62" evidence="                this.setIcon(this.improperTerminatings.length == 0 ? CheckNode.OK_STATUS : CheckNode.ERROR_STATUS);" line="271" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="57" evidence="                this.setIcon(this.deadTransitions.length == 0 ? CheckNode.OK_STATUS : CheckNode.ERROR_STATUS);" line="290" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="69" evidence="                this.setIcon(this.notParticipatingTransitions.length == 0 ? CheckNode.OK_STATUS : CheckNode.ERROR_STATUS);" line="309" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="32" evidence="                    if(renderAll)//this expands all nodes so they&apos;re rendered a first time" line="353" reason="Line breaking error &apos;)&apos;." />
    <issue char="24" evidence="                        childNode.expand(true);" line="354" reason="Expected &apos;{&apos; and instead saw &apos;childNode&apos;." />
    <issue char="112" evidence="                        Ext.Msg.alert(&quot;Syntax Check&quot;, &quot;Some syntax errors have been found, please correct them!&quot;)" line="363" reason="Line breaking error &apos;)&apos;." />
    <issue char="113" evidence="                        Ext.Msg.alert(&quot;Syntax Check&quot;, &quot;Some syntax errors have been found, please correct them!&quot;)" line="363" reason="Missing semicolon." />
    <issue char="76" evidence="                                        if(shape.getIncomingShapes().length == 0 &amp;&amp; shape.getStencil().id().search(/Place/) &gt; -1){" line="449" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="76" evidence="                                        if(shape.getOutgoingShapes().length == 0 &amp;&amp; shape.getStencil().id().search(/Place/) &gt; -1){" line="472" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="74" evidence="                                        if(shape instanceof ORYX.Core.Node)" line="502" reason="Line breaking error &apos;)&apos;." />
    <issue char="44" evidence="                                            this.notParticipatingNodes.push(shape);" line="503" reason="Expected &apos;{&apos; and instead saw &apos;this&apos;." />
    <issue char="41" evidence="                                        };" line="526" reason="Unnecessary semicolon." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\petrinet.js">
    <issue char="17" evidence=" if(!ORYX.Plugins)" line="23" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Use the object literal notation {}." />
    <issue char="33" evidence="&#x9;&#x9;&#x9;&#x9;if(propertyValue == 0) {" line="53" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\pluginLoader.js">
    <issue char="17" evidence="if (!ORYX.Plugins) " line="0" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="    ORYX.Plugins = new Object();" line="1" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="    ORYX.Plugins = new Object();" line="1" reason="Use the object literal notation {}." />
    <issue char="13" evidence="&#x9;&#x9;if (!(ORYX.CONFIG.IS_TEMPLATE)) {" line="11" reason="Parens are not needed here." />
    <issue char="48" evidence="&#x9;if ((!match.requires &#x9;|| !match.requires.namespaces &#x9;" line="33" reason="Line breaking error &apos;namespaces&apos;." />
    <issue char="112" evidence="&#x9;&#x9;&#x9;|| match.requires.namespaces.any(function(req){ return loadedStencilSetsNamespaces.indexOf(req) &gt;= 0 }) )" line="34" reason="Missing semicolon." />
    <issue char="116" evidence="&#x9;&#x9;&#x9;|| match.requires.namespaces.any(function(req){ return loadedStencilSetsNamespaces.indexOf(req) &gt;= 0 }) )" line="34" reason="Line breaking error &apos;)&apos;." />
    <issue char="52" evidence="&#x9;&#x9;&amp;&amp;(!match.notUsesIn &#x9;|| !match.notUsesIn.namespaces &#x9;" line="35" reason="Line breaking error &apos;namespaces&apos;." />
    <issue char="118" evidence="&#x9;&#x9;&#x9;&#x9;|| !match.notUsesIn.namespaces.any(function(req){ return loadedStencilSetsNamespaces.indexOf(req) &gt;= 0 }))){" line="36" reason="Missing semicolon." />
    <issue char="13" evidence="&#x9;&#x9;&#x9;})" line="43" reason="Line breaking error &apos;)&apos;." />
    <issue char="14" evidence="&#x9;&#x9;&#x9;})" line="43" reason="Missing semicolon." />
    <issue char="22" evidence="&#x9;&#x9;if(data.length==0){return};" line="44" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="33" evidence="&#x9;&#x9;if(data.length==0){return};" line="44" reason="Missing semicolon." />
    <issue char="34" evidence="&#x9;&#x9;if(data.length==0){return};" line="44" reason="Unnecessary semicolon." />
    <issue char="10" evidence="&#x9;&#x9;})" line="121" reason="Missing semicolon." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\pnmlexport.js">
    <issue char="17" evidence="if (!ORYX.Plugins) " line="23" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="    ORYX.Plugins = new Object();" line="24" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="    ORYX.Plugins = new Object();" line="24" reason="Use the object literal notation {}." />
    <issue char="36" evidence="    name = name.replace(/[\[]/, &quot;\\\[&quot;).replace(/[\]]/, &quot;\\\]&quot;);" line="27" reason="Bad escapement." />
    <issue char="60" evidence="    name = name.replace(/[\[]/, &quot;\\\[&quot;).replace(/[\]]/, &quot;\\\]&quot;);" line="27" reason="Bad escapement." />
    <issue char="16" evidence="    if (results == null) " line="31" reason="Use &apos;===&apos; to compare with &apos;null&apos;." />
    <issue char="23" evidence="    if (results == null) " line="31" reason="Line breaking error &apos;)&apos;." />
    <issue char="8" evidence="        return &quot;&quot;;" line="32" reason="Expected &apos;{&apos; and instead saw &apos;return&apos;." />
    <issue char="8" evidence="        return results[1];" line="34" reason="Expected &apos;{&apos; and instead saw &apos;return&apos;." />
    <issue char="26" evidence="        window.setTimeout((function(){" line="65" reason="Parens are not needed here." />
    <issue char="16" evidence="            new Ajax.Request(ORYX.CONFIG.PNML_EXPORT_URL, {" line="92" reason="&apos;new&apos; should not be used as a statement." />
    <issue char="16" evidence="" line="92" reason="Stopping, unable to continue. (63% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\processLink.js">
    <issue char="16" evidence="if(!ORYX.Plugins)" line="23" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Use the object literal notation {}." />
    <issue char="86" evidence="&#x9;&#x9;if( option.name !== &quot;oryx-refuri&quot; || !node instanceof ORYX.Core.Node ){ return }" line="54" reason="Missing semicolon." />
    <issue char="18" evidence="&#x9;&#x9;var link  = ORYX.Editor.graft(&quot;http://www.w3.org/2000/svg&quot;, null ,&#x9;&#x9;" line="87" reason="&apos;link&apos; is already defined." />
    <issue char="322" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;[&apos;path&apos;, { &quot;style&quot;: &quot;fill:#f28226;stroke:#000000;stroke-linecap:round;stroke-linejoin:round;stroke-width:0.72&quot;, &quot;transform&quot;: &quot;translate(-3, -1)&quot;, &quot;d&quot;: &quot;M0 8.81 L0 13.06 L5.95 13.06 L5.95 15.05 A50.2313 50.2313 -175.57 0 0 10.77 11.08 A49.9128 49.9128 -1.28 0 0 5.95 6.54 L5.95 8.81 L0 8.81 Z&quot;}]," line="92" reason="Extra comma." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\processLogGenerator.js">
    <issue char="25" evidence="    &#x9;&#x9;var tokens = parseInt(place.properties[&quot;oryx-numberoftokens&quot;]);" line="107" reason="Missing radix parameter." />
    <issue char="45" evidence="            return !(isNaN(tokens) || tokens == 0);" line="108" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="12" evidence="        new Ajax.Request(this.processLogGeneratorHandleURL, {" line="347" reason="&apos;new&apos; should not be used as a statement." />
    <issue char="12" evidence="" line="347" reason="Stopping, unable to continue. (92% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\propertywindow.js">
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="25" reason="Use the object literal notation {}." />
    <issue char="13" evidence="&#x9;&#x9;this.currentDateFormat;" line="50" reason="Expected an assignment or function call and instead saw an expression." />
    <issue char="41" evidence="&#x9;&#x9;this.shapeSelection.shapes = new Array();" line="58" reason="Use the array literal notation []." />
    <issue char="51" evidence="&#x9;&#x9;this.shapeSelection.commonProperties = new Array();" line="59" reason="Use the array literal notation []." />
    <issue char="37" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;var p1 = r1.data[&apos;popular&apos;], p2  = r2.data[&apos;popular&apos;];" line="108" reason="[&apos;popular&apos;] is better written in dot notation." />
    <issue char="63" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;var p1 = r1.data[&apos;popular&apos;], p2  = r2.data[&apos;popular&apos;];" line="108" reason="[&apos;popular&apos;] is better written in dot notation." />
    <issue char="42" evidence="&#x9;&#x9;}), ORYX.I18N.PropertyWindow.title)" line="146" reason="Line breaking error &apos;)&apos;." />
    <issue char="43" evidence="&#x9;&#x9;}), ORYX.I18N.PropertyWindow.title)" line="146" reason="Missing semicolon." />
    <issue char="24" evidence="&#x9;&#x9;&#x9;return false" line="177" reason="Missing semicolon." />
    <issue char="9" evidence="&#x9;&#x9;})&#x9;&#x9;" line="286" reason="Line breaking error &apos;)&apos;." />
    <issue char="10" evidence="&#x9;&#x9;})&#x9;&#x9;" line="286" reason="Missing semicolon." />
    <issue char="26" evidence="&#x9;&#x9;var command = new commandClass();" line="288" reason="A constructor name should start with an uppercase letter." />
    <issue char="53" evidence="&#x9;&#x9;var row = this.field ? this.field.row : this.row " line="343" reason="Line breaking error &apos;row&apos;." />
    <issue char="56" evidence="&#x9;&#x9;var row = this.field ? this.field.row : this.row " line="343" reason="Missing semicolon." />
    <issue char="9" evidence="&#x9;&#x9;})" line="349" reason="Line breaking error &apos;)&apos;." />
    <issue char="10" evidence="&#x9;&#x9;})" line="349" reason="Missing semicolon." />
    <issue char="60" evidence="&#x9;&#x9;&#x9;region.setTitle(ORYX.I18N.PropertyWindow.title +&apos; (&apos;" line="363" reason="Line breaking error &apos; (&apos;." />
    <issue char="57" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;+ this.shapeSelection.shapes.length" line="364" reason="Line breaking error &apos;length&apos;." />
    <issue char="30" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;+ &apos; &apos;" line="365" reason="Line breaking error &apos; &apos;." />
    <issue char="55" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;+ ORYX.I18N.PropertyWindow.selected " line="366" reason="Line breaking error &apos;selected&apos;." />
    <issue char="62" evidence="&#x9;&#x9;&#x9;&#x9;this.shapeSelection.commonPropertiesValues[key]" line="390" reason="Line breaking error &apos;]&apos;." />
    <issue char="9" evidence="&#x9;&#x9;})" line="404" reason="Line breaking error &apos;)&apos;." />
    <issue char="10" evidence="&#x9;&#x9;})" line="404" reason="Missing semicolon." />
    <issue char="36" evidence="&#x9;&#x9;if(comparingStencils.length == 0) {" line="423" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="68" evidence="&#x9;&#x9;&#x9;&#x9;properties[property.namespace() + &apos;-&apos; + property.id() " line="430" reason="Line breaking error &apos;)&apos;." />
    <issue char="75" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;if(properties[property.namespace() + &apos;-&apos; + property.id()" line="439" reason="Line breaking error &apos;)&apos;." />
    <issue char="78" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;intersection[property.namespace() + &apos;-&apos; + property.id()" line="441" reason="Line breaking error &apos;)&apos;." />
    <issue char="33" evidence="&#x9;&#x9;if(event.elements.length == 0) {" line="460" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="60" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(!input.isValid(false))" line="524" reason="Line breaking error &apos;)&apos;." />
    <issue char="40" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;this.updateAfterInvalid(key);" line="525" reason="Expected &apos;{&apos; and instead saw &apos;this&apos;." />
    <issue char="60" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(!input.isValid(false))" line="529" reason="Line breaking error &apos;)&apos;." />
    <issue char="40" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;this.updateAfterInvalid(key);" line="530" reason="Expected &apos;{&apos; and instead saw &apos;this&apos;." />
    <issue char="44" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var numberField = new Ext.form.NumberField({ allowBlank: pair.optional(), allowDecimals:true, msgTarget:&apos;title&apos;, minValue: pair.min(), maxValue: pair.max()});" line="556" reason="&apos;numberField&apos; is already defined." />
    <issue char="61" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(value.value() == attribute)" line="584" reason="Line breaking error &apos;)&apos;." />
    <issue char="36" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;attribute = value.title();" line="585" reason="Expected &apos;{&apos; and instead saw &apos;attribute&apos;." />
    <issue char="55" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(value.refToView()[0])" line="587" reason="Line breaking error &apos;)&apos;." />
    <issue char="36" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;refToViewFlag = true;" line="588" reason="Expected &apos;{&apos; and instead saw &apos;refToViewFlag&apos;." />
    <issue char="40" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}.bind(this))" line="620" reason="Line breaking error &apos;)&apos;." />
    <issue char="41" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}.bind(this))" line="620" reason="Missing semicolon." />
    <issue char="70" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var currFormat = ORYX.I18N.PropertyWindow.dateFormat" line="626" reason="Line breaking error &apos;dateFormat&apos;." />
    <issue char="80" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var currFormat = ORYX.I18N.PropertyWindow.dateFormat" line="626" reason="Missing semicolon." />
    <issue char="59" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(!(attribute instanceof Date))" line="627" reason="Line breaking error &apos;)&apos;." />
    <issue char="32" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;attribute = Date.parseDate(attribute, currFormat)" line="628" reason="Expected &apos;{&apos; and instead saw &apos;attribute&apos;." />
    <issue char="80" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;attribute = Date.parseDate(attribute, currFormat)" line="628" reason="Line breaking error &apos;)&apos;." />
    <issue char="81" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;attribute = Date.parseDate(attribute, currFormat)" line="628" reason="Missing semicolon." />
    <issue char="35" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var cf = new Ext.form.ComplexListField({ allowBlank: pair.optional()}, pair.complexItems(), key, this.facade);" line="648" reason="&apos;cf&apos; is already defined." />
    <issue char="44" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var editorInput = new Ext.form.TextField(" line="656" reason="&apos;editorInput&apos; is already defined." />
    <issue char="44" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var editorInput = new Ext.form.TextField({ allowBlank: pair.optional(),  msgTarget:&apos;title&apos;, maxLength:pair.length(), enableKeyEvents: true});" line="675" reason="&apos;editorInput&apos; is already defined." />
    <issue char="113" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;attribute = &quot;&lt;a href=&apos;&quot; + attribute + &quot;&apos; target=&apos;_blank&apos;&gt;&quot; + attribute.split(&quot;://&quot;)[1] + &quot;&lt;/a&gt;&quot;" line="690" reason="Missing semicolon." />
    <issue char="54" evidence="&#x9;&#x9;&#x9;this.shapeSelection.commonProperties.each((function(pair, index) {" line="489" reason="Parens are not needed here." />
    <issue char="54" evidence="" line="489" reason="Too many errors. (39% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\queryResultHighlighter.js">
    <issue char="17" evidence="if (!ORYX.Plugins) " line="21" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="    ORYX.Plugins = new Object();" line="22" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="    ORYX.Plugins = new Object();" line="22" reason="Use the object literal notation {}." />
    <issue char="14" evidence="&#x9;&#x9;&#x9;})" line="84" reason="Missing semicolon." />
    <issue char="34" evidence="&#x9;&#x9;&#x9;&#x9;if (item.nodeType != null &amp;&amp; item.nodeId != null) {" line="111" reason="Use &apos;!==&apos; to compare with &apos;null&apos;." />
    <issue char="57" evidence="&#x9;&#x9;&#x9;&#x9;if (item.nodeType != null &amp;&amp; item.nodeId != null) {" line="111" reason="Use &apos;!==&apos; to compare with &apos;null&apos;." />
    <issue char="41" evidence="&#x9;&#x9;&#x9;&#x9;} else if (item.edgeType != null) {" line="113" reason="Use &apos;!==&apos; to compare with &apos;null&apos;." />
    <issue char="30" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;var shape = this.getEdgeByFromAndTo(item.from, item.to)" line="114" reason="&apos;shape&apos; is already defined." />
    <issue char="75" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;var shape = this.getEdgeByFromAndTo(item.from, item.to)" line="114" reason="Missing semicolon." />
    <issue char="23" evidence="&#x9;&#x9;&#x9;&#x9;} else return; // unknown element type" line="115" reason="Expected &apos;{&apos; and instead saw &apos;return&apos;." />
    <issue char="28" evidence="&#x9;&#x9;&#x9;&#x9;if (!shape) return;" line="117" reason="Expected &apos;{&apos; and instead saw &apos;return&apos;." />
    <issue char="48" evidence="&#x9;&#x9;if(!(shape instanceof ORYX.Core.Shape)) return;" line="188" reason="Expected &apos;{&apos; and instead saw &apos;return&apos;." />
    <issue char="33" evidence="&#x9;&#x9;&#x9;return edge.incoming != null" line="289" reason="Use &apos;!==&apos; to compare with &apos;null&apos;." />
    <issue char="34" evidence="&#x9;&#x9;&#x9;  &amp;&amp; edge.incoming[0] != null" line="290" reason="Use &apos;!==&apos; to compare with &apos;null&apos;." />
    <issue char="48" evidence="&#x9;&#x9;&#x9;  &amp;&amp; edge.incoming[0].resourceId == fromId" line="291" reason="Line breaking error &apos;fromId&apos;." />
    <issue char="31" evidence="&#x9;&#x9;&#x9;  &amp;&amp; edge.outgoing != null" line="292" reason="Use &apos;!==&apos; to compare with &apos;null&apos;." />
    <issue char="34" evidence="&#x9;&#x9;&#x9;  &amp;&amp; edge.outgoing[0] != null" line="293" reason="Use &apos;!==&apos; to compare with &apos;null&apos;." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\queryevaluator.js">
    <issue char="17" evidence="if (!ORYX.Plugins) " line="21" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="    ORYX.Plugins = new Object();" line="22" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="    ORYX.Plugins = new Object();" line="22" reason="Use the object literal notation {}." />
    <issue char="9" evidence="&#x9;&#x9;}" line="68" reason="Missing semicolon." />
    <issue char="9" evidence="&#x9;&#x9;})" line="95" reason="Line breaking error &apos;)&apos;." />
    <issue char="10" evidence="&#x9;&#x9;})" line="95" reason="Missing semicolon." />
    <issue char="30" evidence="&#x9;&#x9;&#x9;grow&#x9;&#x9;: true," line="100" reason="Extra comma." />
    <issue char="8" evidence="&#x9;&#x9;});" line="102" reason="Expected &apos;}&apos; and instead saw &apos;}&apos;." />
    <issue char="8" evidence="" line="102" reason="Stopping, unable to continue. (19% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\rdfExport.js">
    <issue char="16" evidence="if(!ORYX.Plugins)" line="23" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Use the object literal notation {}." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\renameShapes.js">
    <issue char="17" evidence="if (!ORYX.Plugins) " line="23" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="    ORYX.Plugins = new Object();" line="24" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="    ORYX.Plugins = new Object();" line="24" reason="Use the object literal notation {}." />
    <issue char="38" evidence="            edit: &quot;function&quot; == typeof(options.edit_template) ? options.edit_template : function(a){return a;}," line="80" reason="Parens are not needed here." />
    <issue char="40" evidence="            render: &quot;function&quot; == typeof(options.render_template) ? options.render_template : function(a){return a;}" line="81" reason="Parens are not needed here." />
    <issue char="35" evidence="&#x9;&#x9;&#x9;return (item.refToView() " line="98" reason="Line breaking error &apos;)&apos;." />
    <issue char="50" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&amp;&amp;  item.refToView().length &gt; 0" line="99" reason="Line breaking error &apos;0&apos;." />
    <issue char="111" evidence="&#x9;    return props.findAll(function(item){ return !item.readonly() &amp;&amp;  item.type() == ORYX.CONFIG.TYPE_STRING });" line="104" reason="Missing semicolon." />
    <issue char="129" evidence="&#x9;    return properties.find(function(item){ return item.refToView().any(function(toView){ return label.id == shape.id + toView })});" line="108" reason="Missing semicolon." />
    <issue char="132" evidence="&#x9;    return properties.find(function(item){ return item.refToView().any(function(toView){ return label.id == shape.id + toView })});" line="108" reason="Missing semicolon." />
    <issue char="57" evidence="&#x9;&#x9;if( !(shape instanceof ORYX.Core.Shape) ){ return }" line="112" reason="Missing semicolon." />
    <issue char="84" evidence="&#x9;&#x9;var allRefToViews&#x9;= props.collect(function(prop){ return prop.refToView() }).flatten().compact();" line="120" reason="Missing semicolon." />
    <issue char="150" evidence="&#x9;&#x9;var labels&#x9;&#x9;&#x9;= shape.getLabels().findAll(function(label){ return allRefToViews.any(function(toView){ return label.id.endsWith(toView) }); })" line="122" reason="Missing semicolon." />
    <issue char="156" evidence="&#x9;&#x9;var labels&#x9;&#x9;&#x9;= shape.getLabels().findAll(function(label){ return allRefToViews.any(function(toView){ return label.id.endsWith(toView) }); })" line="122" reason="Line breaking error &apos;)&apos;." />
    <issue char="157" evidence="&#x9;&#x9;var labels&#x9;&#x9;&#x9;= shape.getLabels().findAll(function(label){ return allRefToViews.any(function(toView){ return label.id.endsWith(toView) }); })" line="122" reason="Missing semicolon." />
    <issue char="26" evidence="&#x9;&#x9;if( labels.length == 0 ){ return } " line="125" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="40" evidence="&#x9;&#x9;if( labels.length == 0 ){ return } " line="125" reason="Missing semicolon." />
    <issue char="126" evidence="&#x9;&#x9;    nearestLabel = labels.find(function(label){ return label.node == evt.target || label.node == evt.target.parentNode })" line="130" reason="Missing semicolon." />
    <issue char="128" evidence="&#x9;&#x9;    nearestLabel = labels.find(function(label){ return label.node == evt.target || label.node == evt.target.parentNode })" line="130" reason="Line breaking error &apos;)&apos;." />
    <issue char="129" evidence="&#x9;&#x9;    nearestLabel = labels.find(function(label){ return label.node == evt.target || label.node == evt.target.parentNode })" line="130" reason="Missing semicolon." />
    <issue char="64" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;        return {diff: len, label: label} " line="143" reason="Missing semicolon." />
    <issue char="68" evidence="&#x9;&#x9;&#x9;        diff.sort(function(a, b){ return a.diff &gt; b.diff })&#x9;" line="146" reason="Missing semicolon." />
    <issue char="70" evidence="&#x9;&#x9;&#x9;        diff.sort(function(a, b){ return a.diff &gt; b.diff })&#x9;" line="146" reason="Line breaking error &apos;)&apos;." />
    <issue char="71" evidence="&#x9;&#x9;&#x9;        diff.sort(function(a, b){ return a.diff &gt; b.diff })&#x9;" line="146" reason="Missing semicolon." />
    <issue char="29" evidence="&#x9;&#x9;&#x9;        var diff = labels.collect(function(label){" line="151" reason="&apos;diff&apos; is already defined." />
    <issue char="64" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;        return {diff: len, label: label} " line="155" reason="Missing semicolon." />
    <issue char="68" evidence="&#x9;&#x9;&#x9;        diff.sort(function(a, b){ return a.diff &gt; b.diff })&#x9;" line="158" reason="Missing semicolon." />
    <issue char="70" evidence="&#x9;&#x9;&#x9;        diff.sort(function(a, b){ return a.diff &gt; b.diff })&#x9;" line="158" reason="Line breaking error &apos;)&apos;." />
    <issue char="71" evidence="&#x9;&#x9;&#x9;        diff.sort(function(a, b){ return a.diff &gt; b.diff })&#x9;" line="158" reason="Missing semicolon." />
    <issue char="23" evidence="            var center = shape.absoluteBounds().center();" line="187" reason="&apos;center&apos; is already defined." />
    <issue char="47" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;value&#x9;&#x9;: (function(value, propId, shape){" line="197" reason="Parens are not needed here." />
    <issue char="19" evidence="&#x9;&#x9;&#x9;config[&apos;grow&apos;]&#x9;= true;" line="223" reason="[&apos;grow&apos;] is better written in dot notation." />
    <issue char="68" evidence="&#x9;&#x9;this.shownTextField.on( &apos;blur&apos;, &#x9;this.destroy.bind(this) )" line="237" reason="Line breaking error &apos;)&apos;." />
    <issue char="69" evidence="&#x9;&#x9;this.shownTextField.on( &apos;blur&apos;, &#x9;this.destroy.bind(this) )" line="237" reason="Missing semicolon." />
    <issue char="17" evidence="&#x9;&#x9;&#x9;&#x9;})" line="251" reason="Line breaking error &apos;)&apos;." />
    <issue char="18" evidence="&#x9;&#x9;&#x9;&#x9;})" line="251" reason="Missing semicolon." />
    <issue char="30" evidence="&#x9;&#x9;&#x9;var newValue&#x9;= (function(value, propId, shape){" line="243" reason="Parens are not needed here." />
    <issue char="17" evidence="&#x9;&#x9;&#x9;&#x9;})" line="280" reason="Line breaking error &apos;)&apos;." />
    <issue char="18" evidence="&#x9;&#x9;&#x9;&#x9;})" line="280" reason="Missing semicolon." />
    <issue char="34" evidence="&#x9;&#x9;&#x9;&#x9;var command = new commandClass();" line="282" reason="A constructor name should start with an uppercase letter." />
    <issue char="21" evidence="&#x9;&#x9;}.bind(this) )" line="287" reason="Line breaking error &apos;)&apos;." />
    <issue char="22" evidence="&#x9;&#x9;}.bind(this) )" line="287" reason="Missing semicolon." />
    <issue char="77" evidence="&#x9;&#x9;if (bounds === null || typeof bounds === &quot;undefined&quot; || bounds.width == 0 || bounds.height == 0) {" line="323" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="99" evidence="&#x9;&#x9;if (bounds === null || typeof bounds === &quot;undefined&quot; || bounds.width == 0 || bounds.height == 0) {" line="323" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\rowlayouting.js">
    <issue char="16" evidence="if(!ORYX.Plugins)" line="23" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Use the object literal notation {}." />
    <issue char="40" evidence="&#x9;&#x9;if(!elements || elements.length == 0) {" line="57" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="164" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(shape.dockers.length === 0 || !elements.member(shape.dockers.first().getDockedShape()))});&#x9;&#x9;" line="71" reason="Missing semicolon." />
    <issue char="29" evidence="&#x9;&#x9;&#x9;&#x9;if(!newBounds)" line="76" reason="Line breaking error &apos;)&apos;." />
    <issue char="20" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;newBounds = value.absoluteBounds();" line="77" reason="Expected &apos;{&apos; and instead saw &apos;newBounds&apos;." />
    <issue char="20" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;newBounds.include(value.absoluteBounds());" line="79" reason="Expected &apos;{&apos; and instead saw &apos;newBounds&apos;." />
    <issue char="72" evidence="&#x9;&#x9;if(!this.dragBounds || !this.toMoveShapes.member(uiObj)) {return};" line="105" reason="Missing semicolon." />
    <issue char="73" evidence="&#x9;&#x9;if(!this.dragBounds || !this.toMoveShapes.member(uiObj)) {return};" line="105" reason="Unnecessary semicolon." />
    <issue char="9" evidence="&#x9;&#x9;}" line="113" reason="Missing semicolon." />
    <issue char="40" evidence="&#x9;&#x9;&#x9;if(elements.include(shape)) shape.bounds.moveBy(offsetPos);" line="135" reason="Expected &apos;{&apos; and instead saw &apos;shape&apos;." />
    <issue char="14" evidence="&#x9;&#x9;&#x9;})" line="155" reason="Missing semicolon." />
    <issue char="18" evidence="&#x9;&#x9;&#x9;&#x9;})" line="163" reason="Missing semicolon." />
    <issue char="28" evidence="&#x9;&#x9;&#x9;&#x9;if (isNewRow) " line="223" reason="Line breaking error &apos;)&apos;." />
    <issue char="20" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;insertRowOffset += lr.y - rowBottom;" line="224" reason="Expected &apos;{&apos; and instead saw &apos;insertRowOffset&apos;." />
    <issue char="52" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;if (movedShapes.include(element)) " line="226" reason="Line breaking error &apos;)&apos;." />
    <issue char="24" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;insertRowOffset += lr.y - rowBottom;" line="227" reason="Expected &apos;{&apos; and instead saw &apos;insertRowOffset&apos;." />
    <issue char="57" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;if ((oldUlY - ul.y) &gt; deleteRowOffset) " line="236" reason="Line breaking error &apos;)&apos;." />
    <issue char="24" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;deleteRowOffset = oldUlY - ul.y;" line="237" reason="Expected &apos;{&apos; and instead saw &apos;deleteRowOffset&apos;." />
    <issue char="38" evidence="&#x9;&#x9;&#x9;if (rowRight &gt; maxRowRight) " line="276" reason="Line breaking error &apos;)&apos;." />
    <issue char="16" evidence="&#x9;&#x9;&#x9;&#x9;maxRowRight = rowRight;" line="277" reason="Expected &apos;{&apos; and instead saw &apos;maxRowRight&apos;." />
    <issue char="35" evidence="&#x9;&#x9;&#x9;if (lr.y &gt; maxRowBottom) " line="278" reason="Line breaking error &apos;)&apos;." />
    <issue char="16" evidence="&#x9;&#x9;&#x9;&#x9;maxRowBottom = lr.y;" line="279" reason="Expected &apos;{&apos; and instead saw &apos;maxRowBottom&apos;." />
    <issue char="40" evidence="&#x9;&#x9;&#x9;if (maxRowRight &gt; marginLeft) " line="291" reason="Line breaking error &apos;)&apos;." />
    <issue char="16" evidence="&#x9;&#x9;&#x9;&#x9;event.shape.bounds.set(ul.x, ul.y, ul.x + maxRowRight + marginLeft, ul.y + rowBottom + marginTop);" line="292" reason="Expected &apos;{&apos; and instead saw &apos;event&apos;." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\selectionframe.js">
    <issue char="16" evidence="if(!ORYX.Plugins)" line="23" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Use the object literal notation {}." />
    <issue char="42" evidence="&#x9;&#x9;this.offsetPosition = {x: 0, y: 0}" line="38" reason="Missing semicolon." />
    <issue char="40" evidence="&#x9;&#x9;this.offsetScroll&#x9;= {x:0,y:0}" line="42" reason="Missing semicolon." />
    <issue char="13" evidence="&#x9;&#x9;&#x9;}" line="60" reason="Missing semicolon." />
    <issue char="13" evidence="&#x9;&#x9;&#x9;}" line="100" reason="Missing semicolon." />
    <issue char="13" evidence="&#x9;&#x9;&#x9;}" line="105" reason="Missing semicolon." />
    <issue char="71" evidence="&#x9;&#x9;&#x9;&#x9;if(bA.x &gt; a.x &amp;&amp; bA.y &gt; a.y &amp;&amp; bB.x &lt; b.x &amp;&amp; bB.y &lt; b.y)" line="117" reason="Line breaking error &apos;)&apos;." />
    <issue char="20" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;return true;" line="118" reason="Expected &apos;{&apos; and instead saw &apos;return&apos;." />
    <issue char="28" evidence="&#x9;&#x9;&#x9;&#x9;return false" line="119" reason="Missing semicolon." />
    <issue char="87" evidence="&#x9;&#x9;&#x9;height&#x9;: Event.pointerY(event) - this.position.y - this.offsetPosition.y," line="131" reason="Extra comma." />
    <issue char="8" evidence="&#x9;&#x9;}" line="132" reason="Expected &apos;}&apos; and instead saw &apos;}&apos;." />
    <issue char="8" evidence="" line="132" reason="Stopping, unable to continue. (72% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\selectssperspective.js">
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="25" reason="Use the object literal notation {}." />
    <issue char="12" evidence="&#x9;&#x9;new Ajax.Request(url, {" line="49" reason="&apos;new&apos; should not be used as a statement." />
    <issue char="12" evidence="" line="49" reason="Stopping, unable to continue. (20% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\shapeHighlighting.js">
    <issue char="16" evidence="if(!ORYX.Plugins)" line="23" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="&#x9;ORYX.Plugins = new Object(); " line="24" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object(); " line="24" reason="Use the object literal notation {}." />
    <issue char="87" evidence="&#x9;&#x9;&#x9;var strWidth = options.strokewidth ? options.strokewidth &#x9;: ORYX.CONFIG.BORDER_OFFSET" line="92" reason="Line breaking error &apos;BORDER_OFFSET&apos;." />
    <issue char="100" evidence="&#x9;&#x9;&#x9;var strWidth = options.strokewidth ? options.strokewidth &#x9;: ORYX.CONFIG.BORDER_OFFSET" line="92" reason="Missing semicolon." />
    <issue char="45" evidence="&#x9;&#x9;} else if(options.elements.length == 1 " line="99" reason="Line breaking error &apos;1&apos;." />
    <issue char="63" evidence="&#x9;&#x9;if(!elements || elements.length &lt;= 0) {return undefined}" line="120" reason="Missing semicolon." />
    <issue char="19" evidence="&#x9;&#x9;var path = &quot;&quot;" line="125" reason="Line breaking error &apos;&apos;." />
    <issue char="19" evidence="&#x9;&#x9;var path = &quot;&quot;" line="125" reason="Missing semicolon." />
    <issue char="32" evidence="&#x9;&#x9;&#x9;if(!element) {return}" line="129" reason="Missing semicolon." />
    <issue char="32" evidence="&#x9;&#x9;&#x9;bounds.widen(padding)" line="132" reason="Line breaking error &apos;)&apos;." />
    <issue char="33" evidence="&#x9;&#x9;&#x9;bounds.widen(padding)" line="132" reason="Missing semicolon." />
    <issue char="22" evidence="&#x9;&#x9;elements.each((function(element) {" line="128" reason="Parens are not needed here." />
    <issue char="19" evidence="&#x9;&#x9;var path = &quot;&quot;" line="154" reason="Line breaking error &apos;&apos;." />
    <issue char="19" evidence="&#x9;&#x9;var path = &quot;&quot;" line="154" reason="Missing semicolon." />
    <issue char="23" evidence="&#x9;&#x9;var path &#x9;= &quot;&quot;" line="172" reason="Line breaking error &apos;&apos;." />
    <issue char="23" evidence="&#x9;&#x9;var path &#x9;= &quot;&quot;" line="172" reason="Missing semicolon." />
    <issue char="51" evidence="&#x9;&#x9;path = path + &quot;M&quot; + (a.x + offset) + &quot; &quot; + (a.y);" line="176" reason="Parens are not needed here." />
    <issue char="60" evidence="&#x9;&#x9;var path = &quot;M&quot; + edgeDockers[0].bounds.center().x + &quot; &quot; " line="187" reason="Line breaking error &apos; &apos;." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\shapemenu.js">
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Use the object literal notation {}." />
    <issue char="69" evidence="&#x9;&#x9;this.facade.registerOnEvent(ORYX.CONFIG.EVENT_RESIZE_START,  (function(){" line="42" reason="Parens are not needed here." />
    <issue char="109" evidence="&#x9;&#x9;this.facade.registerOnEvent(ORYX.CONFIG.EVENT_STENCIL_SET_LOADED, (function(){ this.registryChanged() }).bind(this));" line="56" reason="Missing semicolon." />
    <issue char="74" evidence="&#x9;&#x9;this.facade.registerOnEvent(ORYX.CONFIG.EVENT_STENCIL_SET_LOADED, (function(){ this.registryChanged() }).bind(this));" line="56" reason="Parens are not needed here." />
    <issue char="30" evidence="&#x9;&#x9;&#x9;}.bind(this), 300)" line="90" reason="Missing semicolon." />
    <issue char="109" evidence="&#x9;&#x9;&#x9;pluginsData = pluginsData.each(function(value) {value.group = value.group ? value.group : &apos;unknown&apos;});" line="106" reason="Missing semicolon." />
    <issue char="23" evidence="&#x9;&#x9;&#x9;nodes.each((function(stencil) {" line="132" reason="Parens are not needed here." />
    <issue char="23" evidence="&#x9;&#x9;&#x9;edges.each((function(stencil) {" line="157" reason="Parens are not needed here." />
    <issue char="34" evidence="&#x9;&#x9;stencilsets.values().each((function(stencilSet){" line="129" reason="Parens are not needed here." />
    <issue char="81" evidence="&#x9;&#x9;this.shapeMenu.setNumberOfButtonsPerLevel(ORYX.CONFIG.SHAPEMENU_BOTTOM, 1)" line="212" reason="Line breaking error &apos;)&apos;." />
    <issue char="82" evidence="&#x9;&#x9;this.shapeMenu.setNumberOfButtonsPerLevel(ORYX.CONFIG.SHAPEMENU_BOTTOM, 1)" line="212" reason="Missing semicolon." />
    <issue char="31" evidence="&#x9;&#x9;if(this._morphMenuShown)" line="229" reason="Line breaking error &apos;)&apos;." />
    <issue char="12" evidence="&#x9;&#x9;&#x9;this.hideMorphMenu();" line="230" reason="Expected &apos;{&apos; and instead saw &apos;this&apos;." />
    <issue char="12" evidence="&#x9;&#x9;&#x9;this.showMorphMenu();" line="232" reason="Expected &apos;{&apos; and instead saw &apos;this&apos;." />
    <issue char="36" evidence="&#x9;&#x9;&#x9;this.showShapeMenu(true)" line="247" reason="Missing semicolon." />
    <issue char="33" evidence="&#x9;&#x9;if(elements.length != 1) return;" line="257" reason="Expected &apos;{&apos; and instead saw &apos;return&apos;." />
    <issue char="37" evidence="&#x9;&#x9;if(possibleMorphs.size()&lt;=1) return; // if morphing to other stencils is not possible, don&apos;t show button" line="273" reason="Expected &apos;{&apos; and instead saw &apos;return&apos;." />
    <issue char="25" evidence="&#x9;&#x9;&#x9;&#x9;handler: (function() { this.morphShape(elements[0], morph); }).bind(this) " line="285" reason="Parens are not needed here." />
    <issue char="28" evidence="&#x9;&#x9;possibleMorphs.each((function(morph) {" line="279" reason="Parens are not needed here." />
    <issue char="33" evidence="&#x9;&#x9;if(elements.length != 1) return;" line="299" reason="Expected &apos;{&apos; and instead saw &apos;return&apos;." />
    <issue char="26" evidence="&#x9;&#x9;var targets = new Array();" line="308" reason="Use the array literal notation []." />
    <issue char="29" evidence="&#x9;&#x9;var addedEdges = new Array();" line="309" reason="Use the array literal notation []." />
    <issue char="36" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;var shallAppear = !possibleMorphs.any((function(morphStencil) {" line="325" reason="&apos;shallAppear&apos; is already defined." />
    <issue char="104" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(this.baseMorphStencils.include(morphStencil) &amp;&amp; edges.include(morphStencil)) return true;" line="326" reason="Expected &apos;{&apos; and instead saw &apos;return&apos;." />
    <issue char="58" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;var shallAppear = !possibleMorphs.any((function(morphStencil) {" line="325" reason="Parens are not needed here." />
    <issue char="82" evidence="&#x9;&#x9;&#x9;&#x9;if(this.createdButtons[edge.namespace() + edge.type() + edge.id()]) " line="333" reason="Line breaking error &apos;)&apos;." />
    <issue char="20" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;this.createdButtons[edge.namespace() + edge.type() + edge.id()].prepareToShow();" line="334" reason="Expected &apos;{&apos; and instead saw &apos;this&apos;." />
    <issue char="19" evidence="&#x9;&#x9;edges.each((function(edge) {" line="313" reason="Parens are not needed here." />
    <issue char="31" evidence="&#x9;&#x9;var addedTargets = new Array();" line="346" reason="Use the array literal notation []." />
    <issue char="44" evidence="&#x9;&#x9;&#x9;&#x9;if (target.type()===&quot;edge&quot;) return; " line="353" reason="Expected &apos;{&apos; and instead saw &apos;return&apos;." />
    <issue char="69" evidence="&#x9;&#x9;&#x9;&#x9;if (!this.facade.getRules().showInShapeMenu(target)) return " line="356" reason="Expected &apos;{&apos; and instead saw &apos;return&apos;." />
    <issue char="69" evidence="&#x9;&#x9;&#x9;&#x9;if (!this.facade.getRules().showInShapeMenu(target)) return " line="356" reason="Line breaking error &apos;return&apos;." />
    <issue char="16" evidence="&#x9;&#x9;&#x9;&#x9;if(!this.baseMorphStencils.include(target)) {" line="359" reason="Expected an identifier and instead saw &apos;if&apos;." />
    <issue char="16" evidence="" line="359" reason="Stopping, unable to continue. (24% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\shaperepository.js">
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Use the object literal notation {}." />
    <issue char="13" evidence="&#x9;&#x9;this._currentParent;" line="33" reason="Expected an assignment or function call and instead saw an expression." />
    <issue char="9" evidence="&#x9;&#x9;})" line="39" reason="Line breaking error &apos;)&apos;." />
    <issue char="10" evidence="&#x9;&#x9;})" line="39" reason="Missing semicolon." />
    <issue char="9" evidence="&#x9;&#x9;})" line="49" reason="Line breaking error &apos;)&apos;." />
    <issue char="10" evidence="&#x9;&#x9;})" line="49" reason="Missing semicolon." />
    <issue char="23" evidence="&#x9;&#x9;&#x9;return true" line="60" reason="Missing semicolon." />
    <issue char="32" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;groups.each((function(group) {" line="126" reason="Parens are not needed here." />
    <issue char="38" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;if (groups.length == 0) {" line="153" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="30" evidence="&#x9;&#x9;&#x9;&#x9;stencils.each((function(value) {" line="114" reason="Parens are not needed here." />
    <issue char="55" evidence="&#x9;&#x9;&#x9;this.facade.getStencilSets().values().each((function(sset) {" line="84" reason="Parens are not needed here." />
    <issue char="12" evidence="&#x9;&#x9;new Ajax.Request(&quot;/backend/poem/jobdefinition&quot;, {" line="163" reason="&apos;new&apos; should not be used as a statement." />
    <issue char="12" evidence="" line="163" reason="Stopping, unable to continue. (33% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\simplepnmlexport.js">
    <issue char="17" evidence="if (!ORYX.Plugins) " line="23" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="    ORYX.Plugins = new Object();" line="24" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="    ORYX.Plugins = new Object();" line="24" reason="Use the object literal notation {}." />
    <issue char="26" evidence="        window.setTimeout((function(){" line="66" reason="Parens are not needed here." />
    <issue char="16" evidence="&#x9;&#x9;&#x9;new Ajax.Request(ORYX.CONFIG.SIMPLE_PNML_EXPORT_URL, {" line="95" reason="&apos;new&apos; should not be used as a statement." />
    <issue char="16" evidence="" line="95" reason="Stopping, unable to continue. (79% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\stepThroughPlugin.js">
    <issue char="52" evidence="            this.callback = this.doMouseUp.bind(this)" line="167" reason="Line breaking error &apos;)&apos;." />
    <issue char="53" evidence="            this.callback = this.doMouseUp.bind(this)" line="167" reason="Missing semicolon." />
    <issue char="81" evidence="            this.facade.registerOnEvent(ORYX.CONFIG.EVENT_MOUSEUP, this.callback)" line="168" reason="Missing semicolon." />
    <issue char="82" evidence="            this.facade.unregisterOnEvent(ORYX.CONFIG.EVENT_MOUSEUP, this.callback)" line="170" reason="Line breaking error &apos;)&apos;." />
    <issue char="83" evidence="            this.facade.unregisterOnEvent(ORYX.CONFIG.EVENT_MOUSEUP, this.callback)" line="170" reason="Missing semicolon." />
    <issue char="47" evidence="        if (!(shape instanceof ORYX.Core.Shape)) " line="231" reason="Line breaking error &apos;)&apos;." />
    <issue char="12" evidence="            return;" line="232" reason="Expected &apos;{&apos; and instead saw &apos;return&apos;." />
    <issue char="29" evidence="&#x9;&#x9;&#x9;if(propertyValue == 0) {" line="310" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="9" evidence="&#x9;&#x9;}" line="335" reason="Missing semicolon." />
    <issue char="37" evidence="&#x9;&#x9;&#x9;if (&quot;undefined&quot; == typeof(place._setProperty_monkey)) {" line="337" reason="Parens are not needed here." />
    <issue char="44" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;markPlaces(place, a)" line="341" reason="Missing semicolon." />
    <issue char="17" evidence="&#x9;&#x9;&#x9;&#x9;}" line="344" reason="Missing semicolon." />
    <issue char="9" evidence="&#x9;&#x9;})" line="346" reason="Line breaking error &apos;)&apos;." />
    <issue char="10" evidence="&#x9;&#x9;})" line="346" reason="Missing semicolon." />
    <issue char="25" evidence="            var tokens = parseInt(place.properties[&quot;oryx-numberoftokens&quot;]);" line="350" reason="Missing radix parameter." />
    <issue char="13" evidence="        if(0 == anyTokenFound){" line="360" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="52" evidence="                if(place.getIncomingShapes().length == 0){" line="362" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="13" evidence="        if (!(this.isTransition(shape))) return; // Can be a docker, place or something else" line="387" reason="Parens are not needed here." />
    <issue char="41" evidence="        if (!(this.isTransition(shape))) return; // Can be a docker, place or something else" line="387" reason="Expected &apos;{&apos; and instead saw &apos;return&apos;." />
    <issue char="19" evidence="&#x9;&#x9;&#x9;return parseInt(place.properties[&quot;oryx-numberoftokens&quot;]) &gt; 0;" line="391" reason="Missing radix parameter." />
    <issue char="24" evidence="        if(!transition) return;" line="428" reason="Expected &apos;{&apos; and instead saw &apos;return&apos;." />
    <issue char="49" evidence="        place.setProperty(&quot;oryx-numberoftokens&quot;, parseInt(place.properties[&quot;oryx-numberoftokens&quot;])-1);" line="440" reason="Missing radix parameter." />
    <issue char="21" evidence="        var tokens = parseInt(place.properties[&quot;oryx-numberoftokens&quot;]) +1;" line="444" reason="Missing radix parameter." />
    <issue char="23" evidence="                return parseInt(place.properties[&quot;oryx-numberoftokens&quot;]) &gt; 0;" line="498" reason="Missing radix parameter." />
    <issue char="100" evidence="        return (shape.getStencil().id().search(/#Event$/) &gt; -1) &amp;&amp; shape.getIncomingShapes().length == 0 &amp;&amp; shape.getOutgoingShapes().length == 1;" line="550" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="21" evidence="        if (this.rdf == undefined) {" line="582" reason="Use &apos;===&apos; to compare with &apos;undefined&apos;." />
    <issue char="41" evidence="                if (request.responseText != &quot;&quot;) {" line="638" reason="Use &apos;!==&apos; to compare with &apos;&apos;." />
    <issue char="72" evidence="        this.executionTrace = this.executionTrace.replace(/[^;]*;$/, &quot;&quot;)" line="775" reason="Missing semicolon." />
    <issue char="26" evidence="        if (!this.active()) " line="779" reason="Line breaking error &apos;)&apos;." />
    <issue char="12" evidence="            return;" line="780" reason="Expected &apos;{&apos; and instead saw &apos;return&apos;." />
    <issue char="12" evidence="        new Ajax.Request(ORYX.CONFIG.STEP_THROUGH, {" line="816" reason="&apos;new&apos; should not be used as a statement." />
    <issue char="12" evidence="" line="816" reason="Stopping, unable to continue. (97% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\syntaxchecker.js">
    <issue char="17" evidence="if (!ORYX.Plugins) " line="21" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="    ORYX.Plugins = new Object();" line="22" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="    ORYX.Plugins = new Object();" line="22" reason="Use the object literal notation {}." />
    <issue char="12" evidence="        new Ajax.Request(ORYX.CONFIG.SYNTAXCHECKER_URL, {" line="142" reason="&apos;new&apos; should not be used as a statement." />
    <issue char="12" evidence="" line="142" reason="Stopping, unable to continue. (47% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\tbpmCanvasMode.js">
    <issue char="17" evidence="if (!ORYX.Plugins) " line="22" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="    ORYX.Plugins = new Object();" line="23" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="    ORYX.Plugins = new Object();" line="23" reason="Use the object literal notation {}." />
    <issue char="12" evidence="    &#x9;&#x9;)" line="99" reason="Line breaking error &apos;)&apos;." />
    <issue char="13" evidence="    &#x9;&#x9;)" line="99" reason="Missing semicolon." />
    <issue char="103" evidence="&#x9;&#x9;&#x9;&#x9;&quot;url(&quot; + this.facade.getCanvas().properties[&quot;oryx-photo&quot;] + &quot;) no-repeat scroll 0% 0%&quot;;;" line="106" reason="Unnecessary semicolon." />
    <issue char="41" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (rect.isEdited)" line="110" reason="Line breaking error &apos;)&apos;." />
    <issue char="28" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;rect.setAttributeNS(null,&quot;fill&quot;,this.edited);" line="111" reason="Expected &apos;{&apos; and instead saw &apos;rect&apos;." />
    <issue char="28" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;rect.setAttributeNS(null,&quot;fill&quot;,&quot;None&quot;);" line="113" reason="Expected &apos;{&apos; and instead saw &apos;rect&apos;." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\tbpmShapeConnector.js">
    <issue char="16" evidence="if(!ORYX.Plugins)" line="23" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Use the object literal notation {}." />
    <issue char="62" evidence="&#x9;            if (! this.createEdge( this.sourceNode, uiObj))" line="73" reason="Line breaking error &apos;)&apos;." />
    <issue char="20" evidence="&#x9;            &#x9;return;" line="74" reason="Expected &apos;{&apos; and instead saw &apos;return&apos;." />
    <issue char="35" evidence="        &#x9;this.sourceNode = uiObj" line="79" reason="Missing semicolon." />
    <issue char="5" evidence="&#x9;}," line="106" reason="Extra comma." />
    <issue char="0" evidence="});" line="107" reason="Expected &apos;}&apos; and instead saw &apos;}&apos;." />
    <issue char="0" evidence="" line="107" reason="Stopping, unable to continue. (77% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\tbpmsupport.js">
    <issue char="17" evidence="if (!ORYX.Plugins) " line="22" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="    ORYX.Plugins = new Object();" line="23" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="    ORYX.Plugins = new Object();" line="23" reason="Use the object literal notation {}." />
    <issue char="41" evidence="    &#x9;if (canvas.bounds.width() &lt; width)" line="188" reason="Line breaking error &apos;)&apos;." />
    <issue char="12" evidence="    &#x9;&#x9;canvas.setSize({width: width + 50, height: canvas.bounds.height()});" line="189" reason="Expected &apos;{&apos; and instead saw &apos;canvas&apos;." />
    <issue char="43" evidence="    &#x9;if (canvas.bounds.height() &lt; height)" line="190" reason="Line breaking error &apos;)&apos;." />
    <issue char="12" evidence="    &#x9;&#x9;canvas.setSize({height: height + 50, width: canvas.bounds.width()});" line="191" reason="Expected &apos;{&apos; and instead saw &apos;canvas&apos;." />
    <issue char="8" evidence="&#x9;&#x9;)" line="217" reason="Line breaking error &apos;)&apos;." />
    <issue char="9" evidence="&#x9;&#x9;)" line="217" reason="Missing semicolon." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\timeline.js">
    <issue char="17" evidence="if (!ORYX.Plugins) " line="21" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="    ORYX.Plugins = {};" line="22" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="16" evidence="if (!ORYX.Config)" line="24" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="&#x9;ORYX.Config = {};" line="25" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="1" evidence="}" line="29" reason="Missing semicolon." />
    <issue char="64" evidence="&#x9;&#x9;if (&quot;undefined&quot; != typeof(data) &amp;&amp; &quot;undefined&quot; != typeof(data.properties)) {" line="37" reason="Parens are not needed here." />
    <issue char="24" evidence="&#x9;&#x9;var children = []" line="117" reason="Line breaking error &apos;]&apos;." />
    <issue char="25" evidence="&#x9;&#x9;var children = []" line="117" reason="Missing semicolon." />
    <issue char="23" evidence="&#x9;&#x9;if (str.length == 0 || isNaN(Date.parse(str))) {" line="131" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="54" evidence="&#x9;&#x9;&#x9;&#x9;if (this.getChildEvents(shape).length == 0) {" line="147" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="21" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;}" line="155" reason="Missing semicolon." />
    <issue char="31" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;root = parent" line="168" reason="Line breaking error &apos;parent&apos;." />
    <issue char="37" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;root = parent" line="168" reason="Missing semicolon." />
    <issue char="42" evidence="&#x9;&#x9;&#x9;min_date = Math.min(min_date, parseInt(dir[i].date));" line="183" reason="Missing radix parameter." />
    <issue char="42" evidence="&#x9;&#x9;&#x9;max_date = Math.max(max_date, parseInt(dir[i].date));" line="184" reason="Missing radix parameter." />
    <issue char="8" evidence="&#x9;&#x9;for (i in dir) {" line="182" reason="The body of a for in should be wrapped in an if statement to filter unwanted properties from the prototype." />
    <issue char="9" evidence="&#x9;&#x9;};" line="188" reason="Unnecessary semicolon." />
    <issue char="18" evidence="&#x9;&#x9;&#x9;if (0 == max_date - min_date) {" line="192" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="20" evidence="&#x9;&#x9;&#x9;var d = parseInt(dir[id].date - min_date) * (max_x - min_x) / (max_date - min_date) + min_x;" line="196" reason="Missing radix parameter." />
    <issue char="41" evidence="&#x9;&#x9;&#x9;if (a.center.y &lt; b.center.y) return -1;" line="202" reason="Expected &apos;{&apos; and instead saw &apos;return&apos;." />
    <issue char="41" evidence="&#x9;&#x9;&#x9;if (a.center.y &gt; b.center.y) return 1;" line="203" reason="Expected &apos;{&apos; and instead saw &apos;return&apos;." />
    <issue char="19" evidence="&#x9;&#x9;for (var i in dir) {" line="212" reason="&apos;i&apos; was used before it was defined." />
    <issue char="50" evidence="&#x9;&#x9;&#x9;&#x9;y_offset = y_offset + 70 * (node.w)" line="237" reason="Line breaking error &apos;)&apos;." />
    <issue char="43" evidence="&#x9;&#x9;&#x9;&#x9;y_offset = y_offset + 70 * (node.w)" line="237" reason="Parens are not needed here." />
    <issue char="51" evidence="&#x9;&#x9;&#x9;&#x9;y_offset = y_offset + 70 * (node.w)" line="237" reason="Missing semicolon." />
    <issue char="25" evidence="&#x9;&#x9;&#x9;}.bind(this))" line="251" reason="Missing semicolon." />
    <issue char="21" evidence="&#x9;&#x9;}.bind(this))(roots, min_y);" line="252" reason="Missing semicolon." />
    <issue char="27" evidence="&#x9;&#x9;}.bind(this))(roots, min_y);" line="252" reason="Expected &apos;)&apos; to match &apos;(&apos; from line 253 and instead saw &apos;,&apos;." />
    <issue char="28" evidence="&#x9;&#x9;}.bind(this))(roots, min_y);" line="252" reason="Missing semicolon." />
    <issue char="29" evidence="&#x9;&#x9;}.bind(this))(roots, min_y);" line="252" reason="Expected an assignment or function call and instead saw an expression." />
    <issue char="34" evidence="&#x9;&#x9;}.bind(this))(roots, min_y);" line="252" reason="Missing semicolon." />
    <issue char="34" evidence="&#x9;&#x9;}.bind(this))(roots, min_y);" line="252" reason="Expected an identifier and instead saw &apos;)&apos;." />
    <issue char="34" evidence="" line="252" reason="Stopping, unable to continue. (96% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\toolbar.js">
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="25" reason="Use the object literal notation {}." />
    <issue char="42" evidence="&#x9;&#x9;&#x9;if(value.group &amp;&amp; value.index != undefined) {" line="38" reason="Use &apos;!==&apos; to compare with &apos;undefined&apos;." />
    <issue char="58" evidence="&#x9;&#x9;&#x9;&#x9;this.groupIndex[value.group] = value.index" line="39" reason="Missing semicolon." />
    <issue char="38" evidence="&#x9;&#x9;ownPluginData.properties.each((function(value){" line="37" reason="Parens are not needed here." />
    <issue char="50" evidence="&#x9;&#x9;&#x9;return ((this.groupIndex[value.group] != undefined ? this.groupIndex[value.group] : &quot;&quot; ) + value.group + &quot;&quot; + value.index).toLowerCase();" line="78" reason="Use &apos;!==&apos; to compare with &apos;undefined&apos;." />
    <issue char="43" evidence="&#x9;&#x9;var newPlugs =  pluginsData.sortBy((function(value) {" line="77" reason="Parens are not needed here." />
    <issue char="75" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;return !this.plugs.include( value )" line="81" reason="Missing semicolon." />
    <issue char="25" evidence="&#x9;&#x9;if(plugs.length&lt;1)" line="83" reason="Line breaking error &apos;)&apos;." />
    <issue char="12" evidence="&#x9;&#x9;&#x9;return;" line="84" reason="Expected &apos;{&apos; and instead saw &apos;return&apos;." />
    <issue char="44" evidence="&#x9;&#x9;ORYX.Log.trace(&quot;Creating a toolbar.&quot;)" line="88" reason="Line breaking error &apos;)&apos;." />
    <issue char="45" evidence="&#x9;&#x9;ORYX.Log.trace(&quot;Creating a toolbar.&quot;)" line="88" reason="Missing semicolon." />
    <issue char="35" evidence="&#x9;&#x9;&#x9;if(!value.name) {return}" line="104" reason="Missing semicolon." />
    <issue char="79" evidence="&#x9;&#x9;&#x9;&#x9; if (&quot;undefined&quot; != typeof(pageTracker) &amp;&amp; &quot;function&quot; == typeof(pageTracker._trackEvent) )" line="115" reason="Parens are not needed here." />
    <issue char="71" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;pageTracker._trackEvent(&quot;ToolbarButton&quot;,value.name)" line="117" reason="Missing semicolon." />
    <issue char="13" evidence="&#x9;&#x9;&#x9;}" line="121" reason="Missing semicolon." />
    <issue char="36" evidence="                                new Ext.ToolTip({" line="161" reason="&apos;new&apos; should not be used as a statement." />
    <issue char="36" evidence="" line="161" reason="Stopping, unable to continue. (46% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\transformationDownloadDialog.js">
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="25" reason="Use the object literal notation {}." />
    <issue char="25" evidence="&#x9;&#x9;&#x9;delete dialog;" line="68" reason="Expected &apos;.&apos; and instead saw &apos;;&apos;." />
    <issue char="25" evidence="&#x9;&#x9;&#x9;delete dialog;" line="111" reason="Expected &apos;.&apos; and instead saw &apos;;&apos;." />
    <issue char="23" evidence="&#x9;&#x9;&#x9;delete text;" line="112" reason="Expected &apos;.&apos; and instead saw &apos;;&apos;." />
    <issue char="25" evidence="&#x9;&#x9;&#x9;delete dialog;" line="185" reason="Expected &apos;.&apos; and instead saw &apos;;&apos;." />
    <issue char="23" evidence="&#x9;&#x9;&#x9;delete grid;" line="186" reason="Expected &apos;.&apos; and instead saw &apos;;&apos;." />
    <issue char="30" evidence="&#x9;&#x9;&#x9;&#x9;if (selection == undefined) {" line="197" reason="Use &apos;===&apos; to compare with &apos;undefined&apos;." />
    <issue char="30" evidence="&#x9;&#x9;&#x9;&#x9;if (selection == undefined) {" line="215" reason="Use &apos;===&apos; to compare with &apos;undefined&apos;." />
    <issue char="21" evidence="&#x9;&#x9;   &apos;_blank&apos;, &quot;resizable=yes,width=600,height=600,toolbar=0,scrollbars=yes&quot;" line="246" reason="Line breaking error &apos;)&apos;." />
    <issue char="21" evidence="&#x9;&#x9;   &apos;_blank&apos;, &quot;resizable=yes,width=800,height=300,toolbar=0,scrollbars=yes&quot;" line="261" reason="Line breaking error &apos;)&apos;." />
    <issue char="25" evidence="&#x9;&#x9;return newElement" line="278" reason="Missing semicolon." />
    <issue char="16" evidence="&#x9;&#x9;if (win != null) {" line="310" reason="Use &apos;!==&apos; to compare with &apos;null&apos;." />
    <issue char="25" evidence="&#x9;&#x9;&#x9;&#x9;var file = this.addFileExtension(content.get(&quot;file&quot;));" line="323" reason="&apos;file&apos; is already defined." />
    <issue char="1" evidence="}" line="368" reason="Missing semicolon." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\transformationDownloadDialogForBPEL4Chor.js">
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="25" reason="Use the object literal notation {}." />
    <issue char="25" evidence="&#x9;&#x9;&#x9;delete dialog;" line="99" reason="Expected &apos;.&apos; and instead saw &apos;;&apos;." />
    <issue char="23" evidence="&#x9;&#x9;&#x9;delete grid;" line="100" reason="Expected &apos;.&apos; and instead saw &apos;;&apos;." />
    <issue char="30" evidence="&#x9;&#x9;&#x9;&#x9;if (selection == undefined) {" line="111" reason="Use &apos;===&apos; to compare with &apos;undefined&apos;." />
    <issue char="30" evidence="&#x9;&#x9;&#x9;&#x9;if (selection == undefined) {" line="129" reason="Use &apos;===&apos; to compare with &apos;undefined&apos;." />
    <issue char="16" evidence="&#x9;&#x9;if (win != null) {" line="162" reason="Use &apos;!==&apos; to compare with &apos;null&apos;." />
    <issue char="29" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;var file = this.addFileExtension(content.get(&quot;file&quot;));" line="179" reason="&apos;file&apos; is already defined." />
    <issue char="1" evidence="}&#x9;" line="244" reason="Missing semicolon." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\treeGraphSupport.js">
    <issue char="17" evidence="if (!ORYX.Plugins) " line="23" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="    ORYX.Plugins = new Object();" line="24" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="    ORYX.Plugins = new Object();" line="24" reason="Use the object literal notation {}." />
    <issue char="39" evidence="&#x9;&#x9;&#x9;id: &#x9;&#x9;&#x9;&quot;treegraph&quot;," line="59" reason="Extra comma." />
    <issue char="8" evidence="&#x9;&#x9;});" line="60" reason="Expected &apos;}&apos; and instead saw &apos;}&apos;." />
    <issue char="8" evidence="" line="60" reason="Stopping, unable to continue. (44% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\uml.js">
    <issue char="17" evidence=" if(!ORYX.Plugins)" line="27" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="&#x9;ORYX.Plugins = new Object();" line="28" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="28" reason="Use the object literal notation {}." />
    <issue char="18" evidence="&#x9;&#x9;if (event[&quot;key&quot;] == &quot;oryx-name&quot;) {" line="96" reason="[&apos;key&apos;] is better written in dot notation." />
    <issue char="53" evidence="&#x9;&#x9;if (shape.propertiesChanged[&quot;oryx-abstract&quot;] == true) {" line="109" reason="Use &apos;===&apos; to compare with &apos;true&apos;." />
    <issue char="87" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;function(label) { return label.id == (event.shape.id + &quot;className&quot;) }" line="111" reason="Missing semicolon." />
    <issue char="50" evidence="&#x9;&#x9;&#x9;if (shape.properties[&quot;oryx-abstract&quot;] == true) {" line="114" reason="Use &apos;===&apos; to compare with &apos;true&apos;." />
    <issue char="55" evidence="&#x9;&#x9;if (shape.propertiesChanged[&quot;oryx-attributes&quot;] == true || shape.propertiesChanged[&quot;oryx-methods&quot;]) {" line="121" reason="Use &apos;===&apos; to compare with &apos;true&apos;." />
    <issue char="88" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;function(label) { return label.id == (event.shape.id + &quot;attributes&quot;) }" line="125" reason="Missing semicolon." />
    <issue char="85" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;function(label) { return label.id == (event.shape.id + &quot;methods&quot;) }" line="128" reason="Missing semicolon." />
    <issue char="99" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;function(element) { return element.element.id == (event.shape.id + &quot;separator&quot;) }" line="131" reason="Missing semicolon." />
    <issue char="55" evidence="&#x9;&#x9;&#x9;&#x9;shape.bounds.a.y + distanceTilBottom + 5" line="158" reason="Line breaking error &apos;)&apos;." />
    <issue char="50" evidence="&#x9;&#x9;if (shape.propertiesChanged[&quot;oryx-items&quot;] == true) {" line="169" reason="Use &apos;===&apos; to compare with &apos;true&apos;." />
    <issue char="83" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;function(label) { return label.id == (event.shape.id + &quot;items&quot;) }" line="172" reason="Missing semicolon." />
    <issue char="55" evidence="&#x9;&#x9;&#x9;&#x9;shape.bounds.a.y + distanceTilBottom + 5" line="184" reason="Line breaking error &apos;)&apos;." />
    <issue char="76" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;function(label) { return label.id == (shape.id + &quot;name&quot;) }" line="201" reason="Missing semicolon." />
    <issue char="87" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;function(label) { return label.id == (event.shape.id + &quot;qualifier&quot;) }" line="224" reason="Missing semicolon." />
    <issue char="23" evidence="&#x9;&#x9;if (size &lt; 40) size = 40;" line="229" reason="Expected &apos;{&apos; and instead saw &apos;size&apos;." />
    <issue char="86" evidence="&#x9;&#x9;shape._markers.values()[0].element.setAttributeNS(null, &quot;markerWidth&quot;, size+5)" line="231" reason="Missing semicolon." />
    <issue char="5" evidence="&#x9;}," line="232" reason="Extra comma." />
    <issue char="0" evidence="};" line="233" reason="Expected &apos;}&apos; and instead saw &apos;}&apos;." />
    <issue char="0" evidence="" line="233" reason="Stopping, unable to continue. (98% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\umlactivity.js">
    <issue char="17" evidence=" if(!ORYX.Plugins)" line="27" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="&#x9;ORYX.Plugins = new Object();" line="28" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="28" reason="Use the object literal notation {}." />
    <issue char="108" evidence="&#x9;&#x9;&#x9;height ? partition.bounds.a.y + height - (isChildActivityPartition ? 30:0) : partition.bounds.b.y" line="250" reason="Line breaking error &apos;)&apos;." />
    <issue char="24" evidence="&#x9;&#x9;(partitions||[]).each(function(partition){" line="271" reason="Missing semicolon." />
    <issue char="24" evidence="&#x9;&#x9;(partitions||[]).each(function(partition){" line="271" reason="Expected an identifier and instead saw &apos;.&apos;." />
    <issue char="24" evidence="" line="271" reason="Stopping, unable to continue. (62% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\umlsequence.js">
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="22" reason="Use the object literal notation {}." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\umlstate.js">
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="22" reason="Use the object literal notation {}." />
    <issue char="94" evidence="&#x9;&#x9;&#x9;&#x9;else if ((stencilID === &quot;http://b3mn.org/stencilset/umlstate#stateWithActions&quot;)" line="99" reason="Line breaking error &apos;)&apos;." />
    <issue char="61" evidence="&#x9;&#x9;&#x9;&#x9;if ((indexOfEntry === 0) &amp;&amp; (indexOfDo === -1)" line="203" reason="Line breaking error &apos;)&apos;." />
    <issue char="61" evidence="&#x9;&#x9;&#x9;&#x9;if ((indexOfEntry === -1) &amp;&amp; (indexOfDo === 0)" line="208" reason="Line breaking error &apos;)&apos;." />
    <issue char="62" evidence="&#x9;&#x9;&#x9;&#x9;if ((indexOfEntry === -1) &amp;&amp; (indexOfDo === -1)" line="213" reason="Line breaking error &apos;)&apos;." />
    <issue char="61" evidence="&#x9;&#x9;&#x9;&#x9;if ((indexOfEntry === 0) &amp;&amp; (indexOfDo !== -1)" line="219" reason="Line breaking error &apos;)&apos;." />
    <issue char="61" evidence="&#x9;&#x9;&#x9;&#x9;if ((indexOfEntry === 0) &amp;&amp; (indexOfDo === -1)" line="225" reason="Line breaking error &apos;)&apos;." />
    <issue char="60" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;return oldValue.slice(0, indexOfExit) + &quot;do / action\n&quot;" line="227" reason="Line breaking error &apos;do / action&#xa;&apos;." />
    <issue char="61" evidence="&#x9;&#x9;&#x9;&#x9;if ((indexOfEntry === -1) &amp;&amp; (indexOfDo === 0)" line="232" reason="Line breaking error &apos;)&apos;." />
    <issue char="61" evidence="&#x9;&#x9;&#x9;&#x9;if ((indexOfEntry === 0) &amp;&amp; (indexOfDo !== -1)" line="240" reason="Line breaking error &apos;)&apos;." />
    <issue char="94" evidence="&#x9;&#x9;&#x9;&#x9;else if ((stencilID === &quot;http://b3mn.org/stencilset/umlstate#stateWithActions&quot;)" line="276" reason="Line breaking error &apos;)&apos;." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\umlusecase.js">
    <issue char="17" evidence=" if(!ORYX.Plugins)" line="28" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="&#x9;ORYX.Plugins = new Object();" line="29" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="29" reason="Use the object literal notation {}." />
    <issue char="21" evidence="&#x9;&#x9;return event[&quot;key&quot;] == &quot;oryx-stereotype&quot;;" line="276" reason="[&apos;key&apos;] is better written in dot notation." />
    <issue char="21" evidence="&#x9;&#x9;return event[&quot;key&quot;] == &quot;oryx-name&quot;;" line="286" reason="[&apos;key&apos;] is better written in dot notation." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\undo.js">
    <issue char="17" evidence="if (!ORYX.Plugins) " line="36" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="    ORYX.Plugins = new Object();" line="37" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="    ORYX.Plugins = new Object();" line="37" reason="Use the object literal notation {}." />
    <issue char="75" evidence="&#x9;&#x9;&#x9;isEnabled&#x9;&#x9;: function(){ return this.undoStack.length &gt; 0 }.bind(this)," line="66" reason="Missing semicolon." />
    <issue char="75" evidence="&#x9;&#x9;&#x9;isEnabled&#x9;&#x9;: function(){ return this.redoStack.length &gt; 0 }.bind(this)," line="83" reason="Missing semicolon." />
    <issue char="35" evidence="&#x9;&#x9;if( !evt.commands ){ return }" line="100" reason="Missing semicolon." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\validator.js">
    <issue char="17" evidence="if (!ORYX.Plugins) " line="22" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="    ORYX.Plugins = new Object();" line="23" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="    ORYX.Plugins = new Object();" line="23" reason="Use the object literal notation {}." />
    <issue char="12" evidence="        new Ajax.Request(ORYX.CONFIG.VALIDATOR_URL, {" line="85" reason="&apos;new&apos; should not be used as a statement." />
    <issue char="12" evidence="" line="85" reason="Stopping, unable to continue. (29% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\view.js">
    <issue char="16" evidence="if(!ORYX.Plugins)" line="27" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="&#x9;ORYX.Plugins = new Object();" line="28" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="28" reason="Use the object literal notation {}." />
    <issue char="77" evidence="&#x9;&#x9;&#x9;&apos;isEnabled&apos;: function(){return this.zoomLevel &lt; this.maxZoomLevel }.bind(this)});" line="70" reason="Missing semicolon." />
    <issue char="61" evidence="&#x9;&#x9;&#x9;&apos;isEnabled&apos;: function(){ return this._checkSize() }.bind(this)});" line="82" reason="Missing semicolon." />
    <issue char="62" evidence="&#x9;&#x9;&#x9;&apos;isEnabled&apos;: function(){return this.zoomLevel != 1}.bind(this)" line="95" reason="Missing semicolon." />
    <issue char="83" evidence="&#x9;&#x9;if(zoomFactor&gt;this.maxFitToScreenLevel){zoomFactor=this.maxFitToScreenLevel}" line="200" reason="Missing semicolon." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\visioBPMNImport.js">
    <issue char="16" evidence="if(!ORYX.Plugins)" line="6" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="&#x9;ORYX.Plugins = new Object();" line="7" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="7" reason="Use the object literal notation {}." />
    <issue char="151" evidence="&#x9;&#x9;form.getForm().errorReader = {read:function(e){ return {success:e.responseText.replace(/\s*&lt;(pre|\/pre)&gt;\s*/gi, &quot;&quot;).startsWith(&quot;{&quot;),records:[]}}};" line="75" reason="Missing semicolon." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\visioEPCImport.js">
    <issue char="16" evidence="if(!ORYX.Plugins)" line="4" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="&#x9;ORYX.Plugins = new Object();" line="5" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="5" reason="Use the object literal notation {}." />
    <issue char="12" evidence="&#x9;&#x9;new Ajax.Request(" line="44" reason="&apos;new&apos; should not be used as a statement." />
    <issue char="12" evidence="" line="44" reason="Stopping, unable to continue. (26% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\waveThis.js">
    <issue char="16" evidence="if(!ORYX.Plugins)" line="0" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="&#x9;ORYX.Plugins = new Object();" line="1" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="1" reason="Use the object literal notation {}." />
    <issue char="22" evidence="&#x9;ORYX.Config = new Object();" line="3" reason="Use the object literal notation {}." />
    <issue char="64" evidence="            &apos;dropDownGroupIcon&apos;:ORYX.PATH + &quot;images/export2.png&quot;," line="23" reason="Extra comma." />
    <issue char="8" evidence="&#x9;&#x9;});" line="25" reason="Expected &apos;}&apos; and instead saw &apos;}&apos;." />
    <issue char="8" evidence="" line="25" reason="Stopping, unable to continue. (29% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\workflownets.js">
    <issue char="16" evidence="if(!ORYX.Plugins)" line="23" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Use the object literal notation {}." />
    <issue char="5" evidence="&#x9;}," line="50" reason="Extra comma." />
    <issue char="0" evidence="};" line="51" reason="Expected &apos;}&apos; and instead saw &apos;}&apos;." />
    <issue char="0" evidence="" line="51" reason="Stopping, unable to continue. (92% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\xforms.js">
    <issue char="17" evidence=" if(!ORYX.Plugins)" line="28" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="&#x9;ORYX.Plugins = new Object();" line="29" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="29" reason="Use the object literal notation {}." />
    <issue char="42" evidence="&#x9;&#x9;&#x9;if(c.bounds.width()&gt;maxWidth) maxWidth = c.bounds.width();" line="173" reason="Expected &apos;{&apos; and instead saw &apos;maxWidth&apos;." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\xformsexport.js">
    <issue char="16" evidence="if(!ORYX.Plugins)" line="23" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Use the object literal notation {}." />
    <issue char="26" evidence="        window.setTimeout((function(){" line="58" reason="Parens are not needed here." />
    <issue char="16" evidence="&#x9;&#x9;&#x9;new Ajax.Request(ORYX.CONFIG.XFORMS_EXPORT_URL, {" line="80" reason="&apos;new&apos; should not be used as a statement." />
    <issue char="16" evidence="" line="80" reason="Stopping, unable to continue. (39% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\xformsexportorbeon.js">
    <issue char="16" evidence="if(!ORYX.Plugins)" line="23" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Use the object literal notation {}." />
    <issue char="26" evidence="        window.setTimeout((function(){" line="56" reason="Parens are not needed here." />
    <issue char="16" evidence="&#x9;&#x9;&#x9;new Ajax.Request(ORYX.CONFIG.XFORMS_EXPORT_ORBEON_URL, {" line="81" reason="&apos;new&apos; should not be used as a statement." />
    <issue char="16" evidence="" line="81" reason="Stopping, unable to continue. (59% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\Plugins\xformsimport.js">
    <issue char="16" evidence="if(!ORYX.Plugins)" line="23" reason="Line breaking error &apos;)&apos;." />
    <issue char="4" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="23" evidence="&#x9;ORYX.Plugins = new Object();" line="24" reason="Use the object literal notation {}." />
    <issue char="12" evidence="&#x9;&#x9;new Ajax.Request(url, {" line="65" reason="&apos;new&apos; should not be used as a statement." />
    <issue char="12" evidence="" line="65" reason="Stopping, unable to continue. (30% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\clazz.js">
    <issue char="20" evidence="    var proto = new this(Clazz);" line="62" reason="A constructor name should start with an uppercase letter." />
    <issue char="38" evidence="        if (item instanceof Function) item.$ = superClass;" line="67" reason="Expected &apos;{&apos; and instead saw &apos;item&apos;." />
    <issue char="4" evidence="    for (var n in def) {" line="65" reason="The body of a for in should be wrapped in an if statement to filter unwanted properties from the prototype." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\config.js">
    <issue char="10" evidence="if(!ORYX) var ORYX = {};" line="3" reason="Expected &apos;{&apos; and instead saw &apos;var&apos;." />
    <issue char="19" evidence="if(!ORYX) var ORYX = {};" line="3" reason="&apos;ORYX&apos; was used before it was defined." />
    <issue char="17" evidence="if(!ORYX.CONFIG) ORYX.CONFIG = {};" line="5" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\datamanager.js">
    <issue char="41" evidence="&#x9;&#x9;DataManager._triples.push(triple)" line="100" reason="Missing semicolon." />
    <issue char="44" evidence="&#x9;&#x9;&#x9;if(!$$(&apos;.&apos; + PROCESSDATA_REF)[0])" line="154" reason="Line breaking error &apos;)&apos;." />
    <issue char="16" evidence="&#x9;&#x9;&#x9;&#x9;DataManager.graft(XMLNS.XHTML," line="155" reason="Expected &apos;{&apos; and instead saw &apos;DataManager&apos;." />
    <issue char="45" evidence="&#x9;&#x9;&#x9;var resource = $(shape.resourceId)" line="170" reason="Line breaking error &apos;)&apos;." />
    <issue char="46" evidence="&#x9;&#x9;&#x9;var resource = $(shape.resourceId)" line="170" reason="Missing semicolon." />
    <issue char="49" evidence="&#x9;&#x9;&#x9;var children = $A(resource.childNodes)" line="171" reason="Line breaking error &apos;)&apos;." />
    <issue char="50" evidence="&#x9;&#x9;&#x9;var children = $A(resource.childNodes)" line="171" reason="Missing semicolon." />
    <issue char="9" evidence="&#x9;&#x9;};" line="175" reason="Unnecessary semicolon." />
    <issue char="16" evidence="&#x9;&#x9;&#x9;&#x9;value" line="204" reason="Line breaking error &apos;)&apos;." />
    <issue char="57" evidence="&#x9;&#x9;while($(RESOURCE_ID_PREFIX+DataManager.__counter))" line="302" reason="Line breaking error &apos;)&apos;." />
    <issue char="12" evidence="&#x9;&#x9;&#x9;DataManager.__counter++;" line="303" reason="Expected &apos;{&apos; and instead saw &apos;DataManager&apos;." />
    <issue char="20" evidence="&#x9;&#x9;&#x9;return !($(shape.resourceId));" line="340" reason="Parens are not needed here." />
    <issue char="22" evidence="&#x9;&#x9;&#x9;&#x9;var r = ResourceManager.__createResource();" line="376" reason="&apos;r&apos; is already defined." />
    <issue char="28" evidence="&#x9;&#x9;&#x9;var clazz = new String(node.getAttribute(&apos;class&apos;));" line="405" reason="Do not use the String function as a constructor." />
    <issue char="21" evidence="&#x9;&#x9;&#x9;if(ignore)" line="410" reason="Line breaking error &apos;)&apos;." />
    <issue char="16" evidence="&#x9;&#x9;&#x9;&#x9;return &apos;&apos;;" line="411" reason="Expected &apos;{&apos; and instead saw &apos;return&apos;." />
    <issue char="33" evidence="&#x9;&#x9;&#x9;if(!preserveNamespace) " line="418" reason="Line breaking error &apos;)&apos;." />
    <issue char="16" evidence="&#x9;&#x9;&#x9;&#x9;result += &apos; xmlns=&quot;&apos; + (node.namespaceURI ? node.namespaceURI : XMLNS.XHTML) + &apos;&quot; xmlns:oryx=&quot;http://oryx-editor.org&quot;&apos;;" line="419" reason="Expected &apos;{&apos; and instead saw &apos;result&apos;." />
    <issue char="31" evidence="&#x9;&#x9;&#x9;if(children.length == 0)" line="429" reason="Use &apos;===&apos; to compare with &apos;0&apos;." />
    <issue char="35" evidence="&#x9;&#x9;&#x9;if(children.length == 0)" line="429" reason="Line breaking error &apos;)&apos;." />
    <issue char="16" evidence="&#x9;&#x9;&#x9;&#x9;result += &apos;/&gt;&apos;;" line="430" reason="Expected &apos;{&apos; and instead saw &apos;result&apos;." />
    <issue char="64" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;result += DataManager.serialize(_node, true)});" line="438" reason="Missing semicolon." />
    <issue char="50" evidence="&#x9;&#x9;&#x9;&#x9;result += &apos;&lt;/&apos; + node.nodeName + &apos;&gt;&apos;" line="439" reason="Missing semicolon." />
    <issue char="47" evidence="&#x9;&#x9;if(!triple.subject.type == ERDF.LITERAL)" line="458" reason="Line breaking error &apos;)&apos;." />
    <issue char="12" evidence="&#x9;&#x9;&#x9;throw &apos;Cannot add the triple &apos; + triple.toString() +" line="459" reason="Expected &apos;{&apos; and instead saw &apos;throw&apos;." />
    <issue char="16" evidence="&#x9;&#x9;&#x9;&#x9;&apos; because the subject is not a resource.&apos;" line="460" reason="Line breaking error &apos; because the subject is not a resource.&apos;." />
    <issue char="55" evidence="&#x9;&#x9;&#x9;&#x9;&apos; because the subject is not a resource.&apos;" line="460" reason="Missing semicolon." />
    <issue char="19" evidence="&#x9;&#x9;if(!element)" line="467" reason="Line breaking error &apos;)&apos;." />
    <issue char="12" evidence="&#x9;&#x9;&#x9;throw &apos;Cannot add the triple &apos; + triple.toString() +" line="468" reason="Expected &apos;{&apos; and instead saw &apos;throw&apos;." />
    <issue char="45" evidence="&#x9;&#x9;if(triple.object.type == ERDF.LITERAL)" line="471" reason="Line breaking error &apos;)&apos;." />
    <issue char="12" evidence="&#x9;&#x9;&#x9;DataManager.graft(XMLNS.XHTML, element, [" line="474" reason="Expected &apos;{&apos; and instead saw &apos;DataManager&apos;." />
    <issue char="47" evidence="&#x9;&#x9;if(!triple.subject.type == ERDF.LITERAL)" line="524" reason="Line breaking error &apos;)&apos;." />
    <issue char="12" evidence="&#x9;&#x9;&#x9;throw &apos;Cannot remove the triple &apos; + triple.toString() +" line="526" reason="Expected &apos;{&apos; and instead saw &apos;throw&apos;." />
    <issue char="19" evidence="&#x9;&#x9;if(!element)" line="534" reason="Line breaking error &apos;)&apos;." />
    <issue char="12" evidence="&#x9;&#x9;&#x9;throw &apos;Cannot remove the triple &apos; + triple.toString() +" line="536" reason="Expected &apos;{&apos; and instead saw &apos;throw&apos;." />
    <issue char="61" evidence="&#x9;&#x9;if(continueFrom.nodeType != continueFrom.ELEMENT_NODE)" line="550" reason="Line breaking error &apos;)&apos;." />
    <issue char="12" evidence="&#x9;&#x9;&#x9;return false;" line="551" reason="Expected &apos;{&apos; and instead saw &apos;return&apos;." />
    <issue char="26" evidence="&#x9;&#x9;var classes = new String(continueFrom.getAttribute(&apos;class&apos;));" line="553" reason="Do not use the String function as a constructor." />
    <issue char="48" evidence="&#x9;&#x9;&#x9;&#x9;(triple.object.value == content))" line="560" reason="Line breaking error &apos;)&apos;." />
    <issue char="16" evidence="&#x9;&#x9;&#x9;&#x9;continueFrom.parentNode.removeChild(continueFrom);" line="562" reason="Expected &apos;{&apos; and instead saw &apos;continueFrom&apos;." />
    <issue char="64" evidence="&#x9;&#x9;&#x9;DataManager.__removeTripleRecursively(triple, _node)});" line="569" reason="Missing semicolon." />
    <issue char="20" evidence="&#x9;                for(var k in t[i]) { e.setAttributeNS(null, k, t[i][k] ); }" line="628" reason="The body of a for in should be wrapped in an if statement to filter unwanted properties from the prototype." />
    <issue char="20" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;throw &quot;Object &quot; + t[i] + &quot; is inscrutable as an graft arglet.&quot;;" line="632" reason="Expected &apos;{&apos; and instead saw &apos;throw&apos;." />
    <issue char="19" evidence="&#x9;&#x9;if(parent) parent.appendChild(e);" line="636" reason="Expected &apos;{&apos; and instead saw &apos;parent&apos;." />
    <issue char="36" evidence="&#x9;&#x9;&#x9;&#x9;select = select &amp;&amp; ((predicate.prefix) ?" line="677" reason="Parens are not needed here." />
    <issue char="36" evidence="&#x9;&#x9;&#x9;&#x9;select = select &amp;&amp; ((predicate.name) ?" line="679" reason="Parens are not needed here." />
    <issue char="1" evidence="}" line="688" reason="Missing semicolon." />
    <issue char="37" evidence="function assert(expr, m) { if(!expr) throw m; };" line="692" reason="Expected &apos;{&apos; and instead saw &apos;throw&apos;." />
    <issue char="47" evidence="function assert(expr, m) { if(!expr) throw m; };" line="692" reason="Unnecessary semicolon." />
    <issue char="5" evidence="&#x9;}" line="739" reason="Missing semicolon." />
    <issue char="5" evidence="" line="739" reason="Too many errors. (63% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\debug.js">
    <issue char="40" evidence=" * It is included in the test/examples/*.xhtml files as separate script" line="26" reason="Nested comment." />
    <issue char="40" evidence="" line="26" reason="Stopping, unable to continue. (61% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\erdfparser.js">
    <issue char="65" evidence="&#x9;&#x9;var duration = (ERDF.__stopTime - ERDF.__startTime)/1000.;" line="58" reason="A trailing decimal point can be confused with a dot &apos;1000.&apos;." />
    <issue char="19" evidence="&#x9;&#x9;if(!depth) depth=0;" line="108" reason="Expected &apos;{&apos; and instead saw &apos;depth&apos;." />
    <issue char="27" evidence="&#x9;&#x9;&#x9;var properties = node.getAttribute(&apos;class&apos;);" line="155" reason="&apos;properties&apos; is already defined." />
    <issue char="22" evidence="&#x9;&#x9;&#x9;var value = node.getAttribute(&apos;src&apos;);" line="156" reason="&apos;value&apos; is already defined." />
    <issue char="23" evidence="&#x9;&#x9;var properties = node.getAttribute(&apos;class&apos;);" line="176" reason="&apos;properties&apos; is already defined." />
    <issue char="18" evidence="&#x9;&#x9;var title = node.getAttribute(&apos;title&apos;);" line="177" reason="&apos;title&apos; is already defined." />
    <issue char="20" evidence="&#x9;&#x9;var content = node.textContent;" line="178" reason="&apos;content&apos; is already defined." />
    <issue char="15" evidence="&#x9;&#x9;if(id) subject = {type: ERDF.RESOURCE, value: ERDF.HASH+id};" line="187" reason="Expected &apos;{&apos; and instead saw &apos;subject&apos;." />
    <issue char="21" evidence="&#x9;&#x9;if(children) $A(children).each(function(_node) {" line="196" reason="Expected &apos;{&apos; and instead saw &apos;$A&apos;." />
    <issue char="51" evidence="&#x9;&#x9;&#x9;if(_node.nodeType == _node.ELEMENT_NODE)" line="197" reason="Line breaking error &apos;)&apos;." />
    <issue char="16" evidence="&#x9;&#x9;&#x9;&#x9;ERDF._parseFromTag(_node, subject, depth+1); });" line="198" reason="Expected &apos;{&apos; and instead saw &apos;ERDF&apos;." />
    <issue char="24" evidence="&#x9;&#x9;if(!properties) return;" line="204" reason="Expected &apos;{&apos; and instead saw &apos;return&apos;." />
    <issue char="29" evidence="&#x9;&#x9;&#x9;&#x9;if(callback) callback(triple);" line="226" reason="Expected &apos;{&apos; and instead saw &apos;callback&apos;." />
    <issue char="24" evidence="&#x9;&#x9;if(!properties) return;" line="233" reason="Expected &apos;{&apos; and instead saw &apos;return&apos;." />
    <issue char="29" evidence="&#x9;&#x9;&#x9;&#x9;if(callback) callback(triple);" line="253" reason="Expected &apos;{&apos; and instead saw &apos;callback&apos;." />
    <issue char="53" evidence="&#x9;&#x9;if(predicate.prefix.toLowerCase() == &apos;schema&apos;)" line="304" reason="Line breaking error &apos;)&apos;." />
    <issue char="12" evidence="&#x9;&#x9;&#x9;this.registerSchema(predicate.name, object.value);" line="305" reason="Expected &apos;{&apos; and instead saw &apos;this&apos;." />
    <issue char="45" evidence="&#x9;&#x9;&#x9;return this.type == ERDF.RESOURCE };" line="321" reason="Missing semicolon." />
    <issue char="66" evidence="&#x9;&#x9;&#x9;return this.isResource() &amp;&amp; this.value.startsWith(&apos;#&apos;) };" line="323" reason="Missing semicolon." />
    <issue char="52" evidence="&#x9;&#x9;&#x9;return this.isResource() &amp;&amp; (this.value == &apos;&apos;) };" line="325" reason="Use &apos;===&apos; to compare with &apos;&apos;." />
    <issue char="58" evidence="&#x9;&#x9;&#x9;return this.isResource() &amp;&amp; (this.value == &apos;&apos;) };" line="325" reason="Missing semicolon." />
    <issue char="45" evidence="&#x9;&#x9;&#x9;return this.type == ERDF.LIITERAL };" line="333" reason="Missing semicolon." />
    <issue char="5" evidence="&#x9;}" line="374" reason="Missing semicolon." />
    <issue char="5" evidence="&#x9;}" line="386" reason="Missing semicolon." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\ext.js" />
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\kickstart.js">
    <issue char="8" evidence="&#x9;&#x9;with(Kickstart) {" line="38" reason="Expected an identifier and instead saw &apos;with&apos;." />
    <issue char="8" evidence="" line="38" reason="Stopping, unable to continue. (46% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\oryx.js">
    <issue char="41" evidence="&#x9;for (var i=1; i&lt;arguments.length; i++)" line="26" reason="Line breaking error &apos;)&apos;." />
    <issue char="8" evidence="&#x9;&#x9;result = result.replace(&apos;%&apos; + (i-1), arguments[i]);" line="27" reason="Expected &apos;{&apos; and instead saw &apos;result&apos;." />
    <issue char="10" evidence="if(!ORYX) var ORYX = {};" line="42" reason="Expected &apos;{&apos; and instead saw &apos;var&apos;." />
    <issue char="19" evidence="if(!ORYX) var ORYX = {};" line="42" reason="&apos;ORYX&apos; was used before it was defined." />
    <issue char="57" evidence="&#x9;                            args.unshift(&quot;[TRACE|&quot; + (new Date()).getTime()+&quot;]&quot;); " line="112" reason="Parens are not needed here." />
    <issue char="84" evidence="&#x9;                            args.unshift(&quot;[TRACE|&quot; + (new Date()).getTime()+&quot;]&quot;); " line="112" reason="Expected a &apos;break&apos; statement before &apos;case&apos;." />
    <issue char="55" evidence="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;args.unshift(&quot;[FATAL]&quot;); " line="124" reason="Expected a &apos;break&apos; statement before &apos;case&apos;." />
    <issue char="70" evidence="&#x9;&#x9;trace: function() {&#x9;if(ORYX_LOGLEVEL &gt;= ORYX_LOGLEVEL_TRACE)" line="138" reason="Line breaking error &apos;)&apos;." />
    <issue char="12" evidence="&#x9;&#x9;&#x9;ORYX.Log.__log(&apos;TRACE&apos;, arguments); }," line="139" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="67" evidence="&#x9;&#x9;debug: function() { if(ORYX_LOGLEVEL &gt;= ORYX_LOGLEVEL_DEBUG)" line="140" reason="Line breaking error &apos;)&apos;." />
    <issue char="12" evidence="&#x9;&#x9;&#x9;ORYX.Log.__log(&apos;DEBUG&apos;, arguments); }," line="141" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="65" evidence="&#x9;&#x9;info: function() { if(ORYX_LOGLEVEL &gt;= ORYX_LOGLEVEL_INFO)" line="142" reason="Line breaking error &apos;)&apos;." />
    <issue char="12" evidence="&#x9;&#x9;&#x9;ORYX.Log.__log(&apos;INFO&apos;, arguments); }," line="143" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="65" evidence="&#x9;&#x9;warn: function() { if(ORYX_LOGLEVEL &gt;= ORYX_LOGLEVEL_WARN)" line="144" reason="Line breaking error &apos;)&apos;." />
    <issue char="12" evidence="&#x9;&#x9;&#x9;ORYX.Log.__log(&apos;WARN&apos;, arguments); }," line="145" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="67" evidence="&#x9;&#x9;error: function() { if(ORYX_LOGLEVEL &gt;= ORYX_LOGLEVEL_ERROR)" line="146" reason="Line breaking error &apos;)&apos;." />
    <issue char="12" evidence="&#x9;&#x9;&#x9;ORYX.Log.__log(&apos;ERROR&apos;, arguments); }," line="147" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="67" evidence="&#x9;&#x9;fatal: function() { if(ORYX_LOGLEVEL &gt;= ORYX_LOGLEVEL_FATAL)" line="148" reason="Line breaking error &apos;)&apos;." />
    <issue char="12" evidence="&#x9;&#x9;&#x9;ORYX.Log.__log(&apos;FATAL&apos;, arguments); }," line="149" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="306" evidence="&#x9;&#x9;var waitingpanel = new Ext.Window({renderTo:Ext.getBody(),id:&apos;oryx-loading-panel&apos;,bodyStyle:&apos;padding: 8px;background:white&apos;,title:ORYX.I18N.Oryx.title,width:&apos;auto&apos;,height:&apos;auto&apos;,modal:true,resizable:false,closable:false,html:&apos;&lt;span style=&quot;font-size:11px;&quot;&gt;&apos; + ORYX.I18N.Oryx.pleaseWait + &apos;&lt;/span&gt;&apos;})" line="171" reason="Line breaking error &apos;)&apos;." />
    <issue char="307" evidence="&#x9;&#x9;var waitingpanel = new Ext.Window({renderTo:Ext.getBody(),id:&apos;oryx-loading-panel&apos;,bodyStyle:&apos;padding: 8px;background:white&apos;,title:ORYX.I18N.Oryx.title,width:&apos;auto&apos;,height:&apos;auto&apos;,modal:true,resizable:false,closable:false,html:&apos;&lt;span style=&quot;font-size:11px;&quot;&gt;&apos; + ORYX.I18N.Oryx.pleaseWait + &apos;&lt;/span&gt;&apos;})" line="171" reason="Missing semicolon." />
    <issue char="26" evidence="&#x9;&#x9;waitingpanel.show()" line="172" reason="Line breaking error &apos;)&apos;." />
    <issue char="27" evidence="&#x9;&#x9;waitingpanel.show()" line="172" reason="Missing semicolon." />
    <issue char="54" evidence="&#x9;&#x9;&#x9;&#x9;Prototype.Version.split(&quot;.&quot;)[1]) &lt; 1.5)" line="181" reason="Line breaking error &apos;)&apos;." />
    <issue char="12" evidence="&#x9;&#x9;&#x9;throw(&quot;Application requires the Prototype JavaScript framework &gt;= 1.5.3&quot;);" line="183" reason="Expected &apos;{&apos; and instead saw &apos;throw&apos;." />
    <issue char="38" evidence="&#x9;&#x9;if(ORYX.CONFIG.PLUGINS_ENABLED)" line="258" reason="Line breaking error &apos;)&apos;." />
    <issue char="12" evidence="&#x9;&#x9;&#x9;ORYX._loadPlugins()" line="259" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="30" evidence="&#x9;&#x9;&#x9;ORYX._loadPlugins()" line="259" reason="Line breaking error &apos;)&apos;." />
    <issue char="31" evidence="&#x9;&#x9;&#x9;ORYX._loadPlugins()" line="259" reason="Missing semicolon." />
    <issue char="12" evidence="&#x9;&#x9;&#x9;ORYX.Log.warn(&quot;Ignoring plugins, loading Core only.&quot;);" line="261" reason="Expected &apos;{&apos; and instead saw &apos;ORYX&apos;." />
    <issue char="12" evidence="&#x9;&#x9;new Ajax.Request(source, {" line="274" reason="&apos;new&apos; should not be used as a statement." />
    <issue char="12" evidence="" line="274" reason="Stopping, unable to continue. (65% scanned)." />
  </file>
  <file name="C:\dev\gitrepos\flowframe\editors\oryx\frontend\src\main\javascript\client\scripts\utils.js">
    <issue char="40" evidence="&#x9;&#x9;name = name.replace(/[\[]/, &quot;\\\[&quot;).replace(/[\]]/, &quot;\\\]&quot;);" line="14" reason="Bad escapement." />
    <issue char="64" evidence="&#x9;&#x9;name = name.replace(/[\[]/, &quot;\\\[&quot;).replace(/[\]]/, &quot;\\\]&quot;);" line="14" reason="Bad escapement." />
    <issue char="20" evidence="&#x9;&#x9;if (results == null) {" line="18" reason="Use &apos;===&apos; to compare with &apos;null&apos;." />
    <issue char="14" evidence="&#x9;&#x9;&#x9;})" line="36" reason="Missing semicolon." />
    <issue char="1" evidence="}" line="39" reason="Missing semicolon." />
    <issue char="8" evidence="&#x9;&#x9;function __clean_attr(node) {" line="85" reason="Function statements cannot be placed in blocks. Use a function expression or move the statement to the top of the outer function." />
    <issue char="50" evidence="&#x9;&#x9;&#x9;for ( var i = 0; i &lt; nodes.length; i++)" line="105" reason="Line breaking error &apos;)&apos;." />
    <issue char="16" evidence="&#x9;&#x9;&#x9;&#x9;__clean_attr(nodes[i]);" line="106" reason="Expected &apos;{&apos; and instead saw &apos;__clean_attr&apos;." />
    <issue char="9" evidence="&#x9;&#x9;}" line="107" reason="Missing semicolon." />
  </file>
</jslint>
