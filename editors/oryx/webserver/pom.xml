<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <artifactId>org.flowframe.editors.oryx</artifactId>
    <groupId>org.flowframe</groupId>
    <version>0.0.1</version>
    <relativePath>..</relativePath>
  </parent>
  <packaging>war</packaging>
  <artifactId>org.flowframe.editors.oryx.webserver</artifactId>
	<dependencies>
		<!-- Hibernate -->
		<dependency>
			<groupId>org.flowframe</groupId>
			<artifactId>org.flowframe.thirdparty.hibernate.core</artifactId>
			<version>3.6.0.Final</version>
			<scope>provided</scope>
		</dependency>	
		
		<dependency>
			<groupId>org.flowframe</groupId>
			<artifactId>org.flowframe.thirdparty.hibernate.entitymanager</artifactId>
			<version>3.6.0.Final</version>
			<scope>provided</scope>
			<exclusions>
				<exclusion>
					<groupId>javassist</groupId>
					<artifactId>javassist</artifactId>
				</exclusion>
			</exclusions>			
		</dependency>
		
		<!-- JSON -->	
		<dependency>
			<groupId>org.codehaus.jettison</groupId>
			<artifactId>com.springsource.org.codehaus.jettison</artifactId>
			<version>1.0.1</version>
		</dependency>
				
		<!-- Testing -->
		<dependency>
			<groupId>org.junit</groupId>
			<artifactId>com.springsource.org.junit</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.10</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.codehaus.groovy</groupId>
			<artifactId>com.springsource.org.codehaus.groovy</artifactId>
			<version>1.7.3</version>
		</dependency>
		<dependency>
			<groupId>org.antlr</groupId>
			<artifactId>com.springsource.antlr</artifactId>
			<version>2.7.7</version>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet</artifactId>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.persistence</groupId>
			<artifactId>com.springsource.javax.persistence</artifactId>
			<scope>compile</scope>
		</dependency>		
		<dependency>
			<groupId>org.springframework.osgi</groupId>
			<artifactId>org.springframework.osgi.extensions.annotation</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>org.springframework.spring-library</artifactId>
			<type>libd</type>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>org.aspectj-library</artifactId>
			<type>libd</type>
		</dependency>		
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>org.springframework.test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>org.springframework.aspects</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>org.springframework.context</artifactId>
			<scope>provided</scope>
		</dependency>
		
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>com.springsource.org.apache.commons.io</artifactId>
			<version>1.4.0</version>
			<scope>provided</scope>
		</dependency>				
	</dependencies>
	<build>
		<plugins>
			<plugin>
				<groupId>com.springsource.bundlor</groupId>
				<artifactId>com.springsource.bundlor.maven</artifactId>
				<inherited>true</inherited>
				<configuration>
					<failOnWarnings>true</failOnWarnings>
					<!-- used to properly set-up versions for system packages -->
					<osgiProfilePath>${basedir}/../../../java6-server.profile</osgiProfilePath>
					<bundleVersion>${project.version}</bundleVersion>
					<!-- point to a different output path - so manifest will be regenerated 
						on each build and can be eyeballed if desired. Also for eclipse use, where 
						manifest is always needed -->
					<outputPath>${basedir}/src/main/webapp</outputPath>
				</configuration>
				<executions>
					<execution>
						<!-- <phase>none</phase> -->
						<id>build-manifest</id>
						<goals>
							<goal>bundlor</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.1-beta-1</version>
				<configuration>
					<packagingExcludes>WEB-INF/lib/**</packagingExcludes>
					<archive>
						<manifestFile>src/main/webapp/META-INF/MANIFEST.MF</manifestFile>
					</archive>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>